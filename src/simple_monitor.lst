
simple_monitor.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000188 l    d  .text	00000000 .text
0800a3f8 l    d  .rodata	00000000 .rodata
08019f90 l    d  .ARM	00000000 .ARM
08019f98 l    d  .init_array	00000000 .init_array
08019fa0 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
10000000 l    d  .ccmram	00000000 .ccmram
20000a3c l    d  .bss	00000000 .bss
20004684 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
0801a9e0 l    d  .parsetable	00000000 .parsetable
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 build/Drivers/CMSIS/Device/ST/STM32F3xx/Source/Templates/gcc/startup_stm32f303xc.o
f1e0f85f l       *ABS*	00000000 BootRAM
08005978 l       .text	00000000 LoopCopyDataInit
08005970 l       .text	00000000 CopyDataInit
0800598c l       .text	00000000 LoopFillZerobss
08005986 l       .text	00000000 FillZerobss
0800599e l       .text	00000000 LoopForever
080059b8 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
0800a3dc l     O .text	00000000 __EH_FRAME_BEGIN__
08000188 l     F .text	00000000 __do_global_dtors_aux
20000a3c l       .bss	00000000 completed.8108
08019fa0 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
080001ac l     F .text	00000000 frame_dummy
20000a40 l       .bss	00000000 object.8113
08019f9c l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 build/mycode.o
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 PWM.c
00000000 l    df *ABS*	00000000 coopTaskExecutive.c
08001634 l     F .text	00000024 TaskShell
00000000 l    df *ABS*	00000000 coopTaskTest.c
00000000 l    df *ABS*	00000000 mytest.c
00000000 l    df *ABS*	00000000 lcd2.c
00000000 l    df *ABS*	00000000 monitor.c
00000000 l    df *ABS*	00000000 parser.c
20000a58 l     O .bss	00000004 count.5807
20000a5c l     O .bss	00000004 saved.5808
20000004 l     O .data	00000004 printPrompt.5810
20000008 l     O .data	00000004 buf.5809
0800aed8 l     O .rodata	00000006 __FUNCTION__.5824
00000000 l    df *ABS*	00000000 dump.c
20000010 l     O .data	00000004 count.5238
20000a60 l     O .bss	00000004 address.5237
00000000 l    df *ABS*	00000000 syscall.c
20000a64 l     O .bss	00000004 heap_end.5745
00000000 l    df *ABS*	00000000 terminal.c
08002230 l     F .text	00000080 USBD_CDC_DataIn
20000a68 l     O .bss	00000124 TerminalState
00000000 l    df *ABS*	00000000 decoder.c
08002594 l     F .text	00000078 Uncompress
20000b8c l     O .bss	00000014 buf.5796
00000000 l    df *ABS*	00000000 system_stm32f3xx.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal.c
20000ba0 l     O .bss	00000004 uwTick
00000000 l    df *ABS*	00000000 stm32f3xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd_ex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_tim.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_tim_ex.c
08004a48 l     F .text	00000068 TIM_OC5_SetConfig
08004ab0 l     F .text	00000068 TIM_OC6_SetConfig
00000000 l    df *ABS*	00000000 usbd_core.c
00000000 l    df *ABS*	00000000 usbd_ctlreq.c
20000ba4 l     O .bss	00000001 cfgidx.10121
00000000 l    df *ABS*	00000000 usbd_ioreq.c
00000000 l    df *ABS*	00000000 usbd_cdc.c
08005228 l     F .text	00000012 USBD_CDC_DataIn
0800523a l     F .text	00000028 USBD_CDC_EP0_RxReady
08005264 l     F .text	0000000c USBD_CDC_GetFSCfgDesc
08005270 l     F .text	0000000c USBD_CDC_GetHSCfgDesc
0800527c l     F .text	0000000c USBD_CDC_GetOtherSpeedCfgDesc
08005294 l     F .text	0000002e USBD_CDC_DataOut
080052c2 l     F .text	0000005a USBD_CDC_Setup
0800531c l     F .text	0000003a USBD_CDC_DeInit
08005356 l     F .text	00000086 USBD_CDC_Init
20000094 l     O .data	0000000a USBD_CDC_DeviceQualifierDesc
00000000 l    df *ABS*	00000000 usbd_conf.c
20000ba8 l     O .bss	00000230 mem.10343
00000000 l    df *ABS*	00000000 usbd_desc.c
08005698 l     F .text	00000028 IntToUnicode
00000000 l    df *ABS*	00000000 usbd_cdc_interface.c
08005770 l     F .text	00000004 CDC_Itf_DeInit
08005774 l     F .text	00000020 CDC_Itf_Receive
08005794 l     F .text	00000018 CDC_Itf_Init
080057ac l     F .text	00000058 CDC_Itf_Control
00000000 l    df *ABS*	00000000 stm32f3_discovery.c
00000000 l    df *ABS*	00000000 stm32f3_discovery_accelerometer.c
20000dd8 l     O .bss	00000004 AccelerometerDrv
00000000 l    df *ABS*	00000000 stm32f3_discovery_gyroscope.c
20000ddc l     O .bss	00000004 GyroscopeDrv
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 setvbuf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 vfprintf.c
08007390 l     F .text	00000076 __sbprintf
08019e10 l     O .rodata	00000010 zeroes.6931
08019e64 l     O .rodata	00000010 blanks.6930
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
080074cc l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
080074ec l     F .text	0000012c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0800864c l     F .text	000000f0 __sinit.part.1
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
200005cc l     O .data	00000038 lconv
20000604 l     O .data	00000020 lc_ctype_charset
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mprec.c
08019e90 l     O .rodata	0000000c p05.5296
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
08009fd8 l     F .text	00000078 __sprint_r.part.0
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 /usr/local/bin/../lib/gcc/arm-none-eabi/4.9.3/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 /usr/local/bin/../lib/gcc/arm-none-eabi/4.9.3/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 STM32F30x_decoder.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
200001a0 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
00000400 l       *ABS*	00000000 _Min_Stack_Size
00000000 l       *UND*	00000000 HAL_DMA_Start_IT
08019fa4 l       .fini_array	00000000 __fini_array_end
20000a3c l       .bss	00000000 __bss_start__
20004684 l       .bss	00000000 __bss_end__
00001000 l       *ABS*	00000000 _Min_Heap_Size
00000000 l       *UND*	00000000 HAL_DMA_Abort
00000000 l       *UND*	00000000 software_init_hook
08019fa0 l       .fini_array	00000000 __fini_array_start
08019fa0 l       .init_array	00000000 __init_array_end
00000000 l       *UND*	00000000 hardware_init_hook
08019f98 l       .init_array	00000000 __preinit_array_end
00000000 l       *UND*	00000000 __stack
08019f98 l       .init_array	00000000 __init_array_start
00000000 l       *UND*	00000000 _exit
08019f98 l       .init_array	00000000 __preinit_array_start
080059b8  w    F .text	00000002 RTC_Alarm_IRQHandler
080159e8 g     O .rodata	00000008 RTC_BKP19R_fields
08019c5c g     O .rodata	00000010 APBAHBPrescTable
0800c128 g     O .rodata	00000050 TIM2_SR_fields
08012f88 g     O .rodata	00000100 CAN_F10R1_fields
08016798 g     O .rodata	00000008 TIM16_DMAR_fields
08005adc g     F .text	00000014 putchar
080059b8  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
08015638 g     O .rodata	00000008 I2C1_RXDR_fields
080059b8  w    F .text	00000002 TIM8_CC_IRQHandler
08015b80 g     O .rodata	00000030 TIM6_CR1_fields
08001d20 g     F .text	00000084 cmdCursorblink
0800bda0 g     O .rodata	00000048 I2C1_ICR_fields
08002228 g     F .text	00000004 _isatty_r
20003898 g     O .bss	00000050 input_b
08000bbc g     F .text	00000012 .hidden __aeabi_dcmple
080158c0 g     O .rodata	00000008 TIM2_PSC_fields
0800c8b8 g     O .rodata	00000028 TIM17_CCMR1_Output_fields
08005c98 g     F .text	000000ba strcpy
08001554 g     F .text	0000003c TaskKill
08015dd8 g     O .rodata	00000050 COMP_COMP5_CSR_fields
08000ca8 g     F .text	0000002e .hidden __gnu_uldivmod_helper
08011960 g     O .rodata	00000008 I2C1_TXDR_fields
08005af0 g     F .text	0000005c _puts_r
08004b18 g     F .text	0000010c HAL_TIM_PWM_ConfigChannel
08005738 g     F .text	0000001c USBD_VCP_ConfigStrDescriptor
0800dd28 g     O .rodata	00000100 CAN_F19R1_fields
08000af8 g     F .text	0000007a .hidden __cmpdf2
08002664 g     F .text	00000054 DecodeWriteRegister
0800451e g     F .text	000000c8 HAL_PCD_EP_ClrStall
08012b38 g     O .rodata	00000008 TIM16_CCR1_fields
080059b8  w    F .text	00000002 DebugMon_Handler
0800222c g     F .text	00000004 _lseek_r
080120c0 g     O .rodata	00000020 FPU_MVFR1_fields
08005530 g     F .text	0000001a HAL_PCD_ResetCallback
0800461a g     F .text	0000002e PCD_WritePMA
08016a00 g     O .rodata	00000100 CAN_F22R1_fields
0800c330 g     O .rodata	000000e0 CAN_FA1R_fields
20003938 g     O .bss	00000224 hUSBDDevice
0800df20 g     O .rodata	00000048 TIM2_SMCR_fields
0800c878 g     O .rodata	00000020 NVIC_IPR1_fields
0801aa40 g     O .parsetable	0000000c CmdTestE
08000af8 g     F .text	0000007a .hidden __eqdf2
08011dd0 g     O .rodata	00000100 CAN_F14R1_fields
08012f80 g     O .rodata	00000008 TIM8_PSC_fields
08011218 g     O .rodata	00000030 TIM15_EGR_fields
08000cdc g     F .text	0000029c .hidden __divdi3
080022b0 g     F .text	00000054 CmdStats
080045e6 g     F .text	00000034 HAL_PCDEx_PMAConfig
08013b60 g     O .rodata	00000140 TIM2_registers
080152f8 g     O .rodata	00000058 TIM15_DIER_fields
0800d078 g     O .rodata	00000008 DMA1_CMAR3_fields
0800d818 g     O .rodata	00000100 GPIOA_BSRR_fields
08019814 g     O .rodata	00000060 DMA1_CCR7_fields
08003ba0 g     F .text	000001b0 HAL_PCD_EP_Close
08012218 g     O .rodata	00000008 TSC_IOG6CR_fields
0800d080 g     O .rodata	00000028 ADC1_SQR1_fields
08000668 g     F .text	0000005a .hidden __floatdidf
0800cf58 g     O .rodata	000000e0 CAN_FS1R_fields
08012a80 g     O .rodata	00000030 TIM1_CCMR2_Input_fields
0800baa8 g     O .rodata	00000010 RTC_SHIFTR_fields
08005ab4 g     F .text	00000028 printf
08015a28 g     O .rodata	00000028 CAN_TI1R_fields
08004c66 g     F .text	00000016 USBD_SetClassConfig
080126f0 g     O .rodata	00000020 NVIC_IPR14_fields
0800a36c g     F .text	00000054 _wcrtomb_r
080059b8  w    F .text	00000002 TIM1_CC_IRQHandler
0800354c g     F .text	00000060 HAL_NVIC_SetPriority
0800e4d0 g     O .rodata	000001b0 ADC1_registers
08003474 g     F .text	00000030 HAL_RCC_GetPCLK2Freq
08005518 g     F .text	00000010 HAL_PCD_DataInStageCallback
080159f0 g     O .rodata	00000018 TIM2_CR2_fields
08012638 g     O .rodata	00000008 Flash_WRPR_fields
08009fb0 g     F .text	00000020 __sseek
0800873c g     F .text	0000000a __sinit
0800daa0 g     O .rodata	00000060 DMA1_CCR2_fields
0800a068 g     F .text	000000a8 __swbuf_r
080059b8  w    F .text	00000002 HardFault_Handler
0800c4c0 g     O .rodata	00000100 TSC_IOHCR_fields
08011830 g     O .rodata	00000020 CRC_CR_fields
0800c4b0 g     O .rodata	00000008 NVIC_ISER0_fields
080094c4 g     F .text	00000002 __malloc_unlock
08014648 g     O .rodata	00000008 TIM15_ARR_fields
08011cf8 g     O .rodata	00000008 RTC_BKP24R_fields
08004750 g     F .text	00000098 TIM_OC1_SetConfig
08011cf0 g     O .rodata	00000008 TIM1_CCR3_fields
08019884 g     O .rodata	00000008 TIM1_DMAR_fields
0800d7a0 g     O .rodata	00000008 TIM15_CCR1_fields
080059b8  w    F .text	00000002 USB_HP_IRQHandler
080158a8 g     O .rodata	00000010 USART1_RTOR_fields
0800ffb8 g     O .rodata	00000070 RCC_AHBENR_fields
080134e0 g     O .rodata	00000018 TIM2_CNT_fields
08014528 g     O .rodata	000000b0 I2C1_registers
0800136c g     F .text	0000000e SysTick_Handler
08010808 g     O .rodata	00000008 RTC_WPR_fields
08016478 g     O .rodata	00000008 RTC_SSR_fields
08011fb0 g     O .rodata	00000008 TSC_IOG2CR_fields
08003784 g     F .text	0000000a HAL_GPIO_WritePin
08005434 g     F .text	00000026 USBD_CDC_ReceivePacket
080059b8  w    F .text	00000002 PVD_IRQHandler
0800c4b8 g     O .rodata	00000008 DMA1_CPAR7_fields
080134f8 g     O .rodata	00000010 TIM6_CNT_fields
0800d5c0 g     O .rodata	00000078 TIM1_DIER_fields
08005528 g     F .text	00000008 HAL_PCD_SOFCallback
08011290 g     O .rodata	00000008 NVIC_ICPR0_fields
080093f8 g     F .text	000000c6 memmove
080059b8  w    F .text	00000002 TAMP_STAMP_IRQHandler
08016220 g     O .rodata	00000020 NVIC_IPR2_fields
0801aa64 g     O .parsetable	0000000c cmddcE
08001408 g     F .text	00000038 cmddcinit
08019fa4 g       *ABS*	00000000 _sidata
0800343c g     F .text	00000038 HAL_RCC_GetHCLKFreq
080059b8  w    F .text	00000002 PendSV_Handler
0801aa28 g     O .parsetable	0000000c CmdButtonE
08014970 g     O .rodata	00000008 NVIC_ICPR1_fields
080059b8  w    F .text	00000002 NMI_Handler
080035ac g     F .text	00000018 HAL_NVIC_EnableIRQ
080094c8 g     F .text	0000004c _Balloc
08019f98 g       .ARM	00000000 __exidx_end
08005dc0 g     F .text	00000064 __strtok_r
080017a8 g     F .text	00000020 Task4
080059b8  w    F .text	00000002 EXTI3_IRQHandler
080033d0 g     F .text	0000006c HAL_RCC_GetSysClockFreq
08005888 g     F .text	0000001c BSP_LED_Off
08019594 g     O .rodata	00000008 DMA1_CNDTR5_fields
08010300 g     O .rodata	00000098 TIM8_CCER_fields
08010b28 g     O .rodata	00000100 CAN_F8R2_fields
08000ae8 g     F .text	0000008a .hidden __gtdf2
0801aaf4 g       .parsetable	00000000 _parsetable_end
08015180 g     O .rodata	00000048 RCC_AHBRSTR_fields
080059bc g     F .text	0000000c __errno
0800c410 g     O .rodata	00000008 RTC_BKP6R_fields
0800c9a0 g     O .rodata	00000028 CAN_TI2R_fields
08004e68 g     F .text	00000218 USBD_StdDevReq
08014790 g     O .rodata	00000008 NVIC_ISER2_fields
0801aadc g     O .parsetable	0000000c CmdWE
0800f780 g     O .rodata	00000020 CAN_RDH0R_fields
08011cb8 g     O .rodata	00000020 FPU_FPDSCR_fields
08005680 g     F .text	0000000c USBD_VCP_DeviceDescriptor
080034a4  w    F .text	00000002 HAL_MspInit
0800dc20 g     O .rodata	00000100 CAN_F0R2_fields
0800ba08 g     O .rodata	00000008 TSC_IOG8CR_fields
20000e50 g     O .bss	00000230 tasks
08005618 g     F .text	00000026 USBD_LL_IsStallEP
08015cd8 g     O .rodata	00000100 CAN_F0R1_fields
08010c28 g     O .rodata	00000020 TIM15_SMCR_fields
080055cc g     F .text	0000000e USBD_LL_Start
08004c5c g     F .text	0000000a USBD_Start
0800221e g     F .text	0000000a _fstat_r
0800378e g     F .text	00000008 HAL_GPIO_TogglePin
08014aa0 g     O .rodata	00000048 TIM8_CR1_fields
080128e8 g     O .rodata	00000008 Flash_AR_fields
0800ed58 g     O .rodata	00000100 CAN_F2R1_fields
080119c8 g     O .rodata	00000058 COMP_COMP4_CSR_fields
0800d3e8 g     O .rodata	00000040 GPIOB_AFRH_fields
0800a3f4 g       .text	00000000 _etext
08011998 g     O .rodata	00000010 EXTI_PR2_fields
08012720 g     O .rodata	00000028 USB_FS_FNR_fields
20000a3c g       .bss	00000000 _sbss
08011758 g     O .rodata	00000070 COMP_registers
08014978 g     O .rodata	00000100 CAN_F4R2_fields
0800567c g     F .text	00000002 USBD_static_free
08011210 g     O .rodata	00000008 DMA1_CMAR1_fields
0800eaf0 g     O .rodata	00000060 TIM2_DIER_fields
08000b84 g     F .text	00000010 .hidden __aeabi_cdcmple
0800f970 g     O .rodata	00000008 TSC_IOG1CR_fields
08016768 g     O .rodata	00000020 TIM17_CCER_fields
08016568 g     O .rodata	00000008 TIM8_RCR_fields
08012cf0 g     O .rodata	00000010 TIM16_CNT_fields
08012bd0 g     O .rodata	00000100 GPIOB_BSRR_fields
0800fe00 g     O .rodata	00000100 CAN_F16R2_fields
0800da48 g     O .rodata	00000018 ADC1_OFR1_fields
08015350 g     O .rodata	00000100 CAN_F24R2_fields
0800f0d8 g     O .rodata	00000008 RTC_BKP23R_fields
08012400 g     O .rodata	00000008 TIM15_CCR2_fields
0800ccc8 g     O .rodata	00000098 ADC1_CFGR_fields
0800c7f8 g     O .rodata	00000008 RTC_BKP13R_fields
08004c4e g     F .text	0000000e USBD_RegisterClass
08010030 g     O .rodata	00000100 CAN_F20R1_fields
0800ff00 g     O .rodata	00000060 USART1_ICR_fields
08019b0c g     O .rodata	00000100 CAN_F25R2_fields
08016788 g     O .rodata	00000008 TSC_IOG4CR_fields
08010130 g     O .rodata	00000100 CAN_F27R2_fields
08019a8c g     O .rodata	00000078 TIM8_SR_fields
0800bd50 g     O .rodata	00000050 USB_FS_ISTR_fields
08014628 g     O .rodata	00000008 DMA1_CMAR2_fields
0800d638 g     O .rodata	00000008 RTC_BKP26R_fields
08011268 g     O .rodata	00000028 ADC1_SQR2_fields
08010810 g     O .rodata	00000010 TIM17_CNT_fields
0800d498 g     O .rodata	00000008 WWDG_SR_fields
0800ec50 g     O .rodata	000000c0 EXTI_registers
080035f0 g     F .text	00000188 HAL_GPIO_Init
08004e0a g     F .text	00000006 USBD_LL_SetSpeed
20000178 g     O .data	00000004 BUTTON_PORT
08005948 g     F .text	00000010 BSP_ACCELERO_GetXYZ
0800f0c8 g     O .rodata	00000008 NVIC_ICTR_fields
0800c6c0 g     O .rodata	00000008 TIM6_ARR_fields
0800f7a0 g     O .rodata	000000b0 CAN_TSR_fields
080020dc g     F .text	000000b4 DumpBuffer
08010aa8 g     O .rodata	00000080 GPIOA_IDR_fields
0800b938 g     O .rodata	00000050 USB_FS_USB_EP3R_fields
0800554c g     F .text	00000002 HAL_PCD_ResumeCallback
08000220 g     F .text	00000134 memcpy
08000b74 g     F .text	00000020 .hidden __aeabi_cdrcmple
080158c8 g     O .rodata	00000100 CAN_F7R2_fields
080154e0 g     O .rodata	00000010 TIM1_CNT_fields
08005b5c g     F .text	000000f8 setvbuf
080011e4 g     F .text	0000005c CmdLED
0800ef68 g     O .rodata	00000078 TIM1_SR_fields
08001da4 g     F .text	00000084 cmdCursorOnOff
0800db00 g     O .rodata	00000020 NVIC_IPR13_fields
0800c898 g     O .rodata	00000008 TIM15_PSC_fields
080050b0 g     F .text	000000b2 USBD_StdEPReq
08008640 g     F .text	0000000c _cleanup_r
08013128 g     O .rodata	00000040 GPIOA_AFRH_fields
08001960 g     F .text	00000068 functionCmd
080005f8 g     F .text	00000022 .hidden __floatsidf
080147d8 g     O .rodata	00000010 DAC_DHR12RD_fields
08014b20 g     O .rodata	00000058 COMP_COMP2_CSR_fields
0800137c g     F .text	0000008c cmdPWM
080147e8 g     O .rodata	00000078 TIM8_DIER_fields
08019874 g     O .rodata	00000010 ADC1_DIFSEL_fields
08000af0 g     F .text	00000082 .hidden __ltdf2
080058c0 g     F .text	00000074 BSP_PB_Init
080059b8  w    F .text	00000002 USB_HP_CAN_TX_IRQHandler
080059b8  w    F .text	00000002 EXTI0_IRQHandler
08015e98 g     O .rodata	00000010 TIM8_OR_fields
080059b8  w    F .text	00000002 I2C2_EV_IRQHandler
0800c970 g     O .rodata	00000020 CAN_TDH0R_fields
0800ee60 g     O .rodata	00000050 USB_FS_USB_EP4R_fields
08000c48 g     F .text	00000000 .hidden __aeabi_uldivmod
08011968 g     O .rodata	00000030 WWDG_registers
0800bc48 g     O .rodata	00000008 TIM17_RCR_fields
08005b4c g     F .text	00000010 puts
080051fc g     F .text	00000016 USBD_CtlSendStatus
080059b8  w    F .text	00000002 FPU_IRQHandler
0800350c  w    F .text	0000001a HAL_Delay
08005080 g     F .text	00000030 USBD_StdItfReq
0800ee58 g     O .rodata	00000008 TIM8_CCR4_fields
20000014 g     O .data	00000004 SystemCoreClock
08009ef8 g     F .text	0000005c __fpclassifyd
080154f0 g     O .rodata	00000120 TIM15_registers
08003e54 g     F .text	00000182 HAL_PCD_EP_Transmit
080001fc g     F .text	00000012 my_Tick
08011bb8 g     O .rodata	00000100 CAN_F3R1_fields
08004e28 g     F .text	00000028 USBD_ParseSetupRequest
08012a30 g     O .rodata	00000010 TIM2_CCR1_fields
0800fc50 g     O .rodata	00000010 DAC_SWTRIGR_fields
080059b8  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
0800e8d0 g     O .rodata	00000100 CAN_F13R1_fields
08008e30 g     F .text	00000010 malloc
08011040 g     O .rodata	00000008 IWDG_RLR_fields
08004648 g     F .text	00000022 PCD_ReadPMA
08001268 g     F .text	00000054 CmdGyro
08016450 g     O .rodata	00000010 CAN_FMR_fields
08019ea0 g     O .rodata	000000c8 __mprec_tens
080198e4 g     O .rodata	00000040 OPAMP_registers
08014350 g     O .rodata	00000008 DMA1_CNDTR4_fields
08015c50 g     O .rodata	00000008 NVIC_IABR1_fields
08015b50 g     O .rodata	00000030 ADC1_2_registers
20000128 g     O .data	0000001c VCP_Desc
08015670 g     O .rodata	000000d0 EXTI_PR1_fields
080059b8  w    F .text	00000002 UsageFault_Handler
08008d34 g     F .text	00000008 __locale_charset
08013f30 g     O .rodata	00000020 TIM8_CCR5_fields
080059b8  w    F .text	00000002 ADC1_2_IRQHandler
20000de8 g     O .bss	00000004 __malloc_top_pad
200038e8 g     O .bss	00000050 input
08014b78 g     O .rodata	00000100 CAN_F4R1_fields
08012710 g     O .rodata	00000010 ADC1_TR3_fields
0800efe0 g     O .rodata	00000008 DMA1_CPAR2_fields
0800d4a0 g     O .rodata	00000048 TIM16_DIER_fields
08003778 g     F .text	0000000c HAL_GPIO_ReadPin
08011950 g     O .rodata	00000008 NVIC_ICER2_fields
08005f4c g     F .text	00000018 strtoul
20003dd8 g     O .bss	00000004 BuffLength
20000624 g     O .data	00000004 __mb_cur_max
080005d8 g     F .text	0000001e .hidden __aeabi_ui2d
08008d48 g     F .text	00000008 _localeconv_r
0800d490 g     O .rodata	00000008 TIM8_CCR1_fields
20003ddc g     O .bss	0000006c UartHandle
08016038 g     O .rodata	00000100 CAN_F9R2_fields
08013b58 g     O .rodata	00000008 DAC_DHR12L2_fields
08009648 g     F .text	00000012 __i2b
080089c8 g     F .text	00000318 __sfvwrite_r
08004e10 g     F .text	00000018 USBD_LL_SOF
20000000 g       .data	00000000 _sdata
080059b8  w    F .text	00000002 SPI1_IRQHandler
08011d00 g     O .rodata	00000028 CAN_TI0R_fields
080059b8  w    F .text	00000002 CAN_SCE_IRQHandler
08000354 g     F .text	00000000 .hidden __aeabi_drsub
08016188 g     O .rodata	00000048 ADC1_SMPR2_fields
08012bb0 g     O .rodata	00000020 NVIC_IPR4_fields
080021e4 g     F .text	00000034 _sbrk_r
0800c7d8 g     O .rodata	00000020 NVIC_IPR18_fields
0800545c g     F .text	0000009c HAL_PCD_MspInit
08013db0 g     O .rodata	00000010 TIM6_DIER_fields
0800d268 g     O .rodata	00000060 TIM1_CCMR1_Output_fields
0801947c g     O .rodata	000000b0 USART1_ISR_fields
080059b8  w    F .text	00000002 TIM6_DAC_IRQHandler
08001440 g     F .text	000000b4 cmdPWMtimerinit
0800dfd8 g     O .rodata	00000068 I2C1_CR2_fields
08011fa8 g     O .rodata	00000008 TIM8_CCR2_fields
0800447c g     F .text	000000a2 HAL_PCD_EP_SetStall
080023cc g     F .text	0000000a _read_r
0800ba60 g     O .rodata	00000048 TIM1_SMCR_fields
08012188 g     O .rodata	00000030 CAN_ESR_fields
08004c24 g     F .text	0000002a USBD_Init
08014c88 g     O .rodata	00000080 GPIOB_BRR_fields
20003b60 g     O .bss	00000178 hpcd
08000ba8 g     F .text	00000012 .hidden __aeabi_dcmplt
0800a214 g     F .text	00000084 _fclose_r
08012b40 g     O .rodata	00000018 ADC1_OFR2_fields
0800c8e0 g     O .rodata	00000010 TIM2_ARR_fields
20000de4 g     O .bss	00000004 __malloc_max_sbrked_mem
080167d0 g     O .rodata	00000100 CAN_F9R1_fields
080128f0 g     O .rodata	00000038 RTC_DR_fields
08015460 g     O .rodata	00000008 TIM1_CCR1_fields
080035c4 g     F .text	0000002c HAL_SYSTICK_Config
0800061c g     F .text	0000003a .hidden __extendsfdf2
08014248 g     O .rodata	00000008 Flash_OPTKEYR_fields
0800f5c0 g     O .rodata	00000018 ADC1_OFR4_fields
20003b5c g     O .bss	00000004 USBDDataIn
08000918 g     F .text	000001d0 .hidden __aeabi_ddiv
080059b8  w    F .text	00000002 TIM8_UP_IRQHandler
20000144 g     O .data	0000001a USBD_StringSerial
0800fa80 g     O .rodata	00000100 CAN_F25R1_fields
08016598 g     O .rodata	00000018 SPI1_I2SPR_fields
08013e28 g     O .rodata	00000008 ADC1_JDR1_fields
08014968 g     O .rodata	00000008 IWDG_KR_fields
08015bb0 g     O .rodata	00000050 USB_FS_USB_EP0R_fields
08000360 g     F .text	00000276 .hidden __adddf3
08011fb8 g     O .rodata	00000100 CAN_F23R2_fields
08011d48 g     O .rodata	00000050 CRC_registers
0800e828 g     O .rodata	000000a0 USART1_CR1_fields
0800f100 g     O .rodata	00000320 RTC_registers
0800f870 g     O .rodata	00000100 CAN_F5R2_fields
0801aa1c g     O .parsetable	0000000c cmdCursorblinkE
0800e680 g     O .rodata	00000028 TIM17_CR2_fields
08019f90 g       .ARM	00000000 __exidx_start
0800df08 g     O .rodata	00000018 TIM16_CCMR1_Input_fields
0800cc48 g     O .rodata	00000008 Flash_KEYR_fields
080006c4 g     F .text	00000254 .hidden __aeabi_dmul
080125d0 g     O .rodata	00000060 TIM8_CCMR2_Output_fields
0800d3c0 g     O .rodata	00000028 PWR_CSR_fields
080152e8 g     O .rodata	00000010 RTC_ALRMASSR_fields
20001080 g     O .bss	00000004 currentTask
200000a0 g     O .data	00000043 USBD_CDC_OtherSpeedCfgDesc
080159c8 g     O .rodata	00000020 SYSCFG_EXTICR4_fields
0800ea20 g     O .rodata	00000008 NVIC_IABR0_fields
08019e08 g     O .rodata	00000004 _global_impure_ptr
0801aa4c g     O .parsetable	0000000c cmdCursorOnOffE
0800eba0 g     O .rodata	00000040 FPU_MVFR0_fields
08014510 g     O .rodata	00000008 TIM16_RCR_fields
08009b0c g     F .text	000003ec _realloc_r
080059c8 g     F .text	00000050 __libc_init_array
080051ea g     F .text	00000012 USBD_CtlContinueRx
080158b8 g     O .rodata	00000008 RTC_BKP12R_fields
0800c218 g     O .rodata	00000010 USART1_GTPR_fields
08003868 g     F .text	00000338 HAL_PCD_EP_Open
080059b8  w    F .text	00000002 DMA2_Channel2_IRQHandler
08000f78 g     F .text	0000026a .hidden __udivdi3
080059b8  w    F .text	00000002 DMA1_Channel4_IRQHandler
0800d2d0 g     O .rodata	00000010 TIM1_OR_fields
0800b988 g     O .rodata	00000080 GPIOB_PUPDR_fields
08003fd6 g     F .text	000004a6 HAL_PCD_IRQHandler
08001e44 g     F .text	00000020 CmdR
0800a348 g     F .text	00000024 _fputwc_r
08019f68 g     O .rodata	00000028 __mprec_bigtens
08016480 g     O .rodata	00000008 TIM1_CCR4_fields
080005d8 g     F .text	0000001e .hidden __floatunsidf
080019c8 g     F .text	00000010 enable
080111e8 g     O .rodata	00000020 CAN_TDL1R_fields
080098dc g     F .text	00000046 __mcmp
08014b00 g     O .rodata	00000020 NVIC_IPR7_fields
08015640 g     O .rodata	00000008 TIM17_DMAR_fields
08013da0 g     O .rodata	00000010 TIM15_CNT_fields
0800e188 g     O .rodata	00000008 RTC_BKP10R_fields
0800eb50 g     O .rodata	00000048 CAN_MSR_fields
0801aaa0 g     O .parsetable	0000000c lcdinitE
08012798 g     O .rodata	000000d0 RCC_registers
0800a3dc g     F .text	00000000 _init
0800f850 g     O .rodata	00000020 CAN_TDL0R_fields
08011cd8 g     O .rodata	00000008 DAC_DHR8R2_fields
08013168 g     O .rodata	00000090 RCC_APB1RSTR_fields
08005958 g     F .text	00000010 BSP_GYRO_GetXYZ
0800dd20 g     O .rodata	00000008 RTC_BKP0R_fields
08013598 g     O .rodata	00000590 CAN_registers
0801a9e0 g       .parsetable	00000000 _parsetable_start
0800f708 g     O .rodata	00000060 DMA1_CCR5_fields
0800ed50 g     O .rodata	00000008 RTC_BKP8R_fields
0800e3c0 g     O .rodata	00000110 TSC_registers
08011a20 g     O .rodata	00000030 TIM2_CCMR2_Input_fields
080055fc g     F .text	0000000e USBD_LL_StallEP
0800cf28 g     O .rodata	00000008 NVIC_ICER1_fields
08015648 g     O .rodata	00000028 TIM16_EGR_fields
0801aab8 g     O .parsetable	0000000c CmdRE
08013ca0 g     O .rodata	00000100 CAN_F8R1_fields
080059b8  w    F .text	00000002 USART3_IRQHandler
080110d0 g     O .rodata	00000100 CAN_F21R1_fields
0800e9d0 g     O .rodata	00000050 RCC_CSR_fields
080056c0 g     F .text	00000040 USBD_VCP_SerialStrDescriptor
080115a0 g     O .rodata	00000080 GPIOA_OTYPER_fields
080167a0 g     O .rodata	00000010 DAC_DHR12LD_fields
0800d918 g     O .rodata	00000030 TIM16_SR_fields
080131f8 g     O .rodata	000001a0 TIM1_registers
08008750 g     F .text	0000002c __libc_fini_array
08015e60 g     O .rodata	00000038 ADC1_JSQR_fields
20004684 g       .bss	00000000 _ebss
080018b0 g     F .text	00000030 CmdTest
08004900 g     F .text	00000068 TIM_OC4_SetConfig
08011a68 g     O .rodata	00000050 FPU_CPACR_fields
080059b8  w    F .text	00000002 DMA1_Channel7_IRQHandler
08011ee0 g     O .rodata	00000020 CAN_TDL2R_fields
0800d038 g     O .rodata	00000040 GPIOA_AFRL_fields
08005968  w    F .text	00000038 Reset_Handler
20000018 g     O .data	00000043 USBD_CDC_CfgFSDesc
08004670 g     F .text	000000b4 TIM_Base_SetConfig
080196f4 g     O .rodata	00000008 RTC_BKP29R_fields
0800ce08 g     O .rodata	00000020 NVIC_IPR0_fields
080112c0 g     O .rodata	00000080 GPIOA_ODR_fields
080095ac g     F .text	00000040 __hi0bits
0800efe8 g     O .rodata	00000020 NVIC_IPR15_fields
0800d2c8 g     O .rodata	00000008 TIM1_CCR2_fields
0800188c g     F .text	00000024 CmdCooperativeSwitcher
0800e6d0 g     O .rodata	000000d0 EXTI_RTSR1_fields
0800f700 g     O .rodata	00000008 DAC_DOR2_fields
08011208 g     O .rodata	00000008 CRC_DR_fields
08000bf8 g     F .text	0000004e .hidden __fixdfsi
0800ce50 g     O .rodata	00000080 GPIOB_OSPEEDR_fields
0801aaac g     O .parsetable	0000000c CmdLEDE
080059b8  w    F .text	00000002 UART5_IRQHandler
08002760 g     F .text	00000050 DecodePeripheral
08015618 g     O .rodata	00000020 SYSCFG_EXTICR1_fields
0800e198 g     O .rodata	00000100 CAN_F11R2_fields
080059b8  w    F .text	00000002 ADC3_IRQHandler
08011048 g     O .rodata	00000038 RTC_TSTR_fields
0801aac4 g     O .parsetable	0000000c TaskInitialise1E
08012140 g     O .rodata	00000048 TIM2_CR1_fields
080034cc g     F .text	00000024 HAL_Init
08010cd0 g     O .rodata	00000100 CAN_F1R2_fields
08009ab4 g     F .text	00000058 _putc_r
080051ca g     F .text	00000020 USBD_CtlPrepareRx
080108a0 g     O .rodata	00000008 RTC_BKP17R_fields
08001590 g     F .text	0000002c TaskInit
08013398 g     O .rodata	00000020 CAN_RDL1R_fields
08014410 g     O .rodata	00000100 CAN_F23R1_fields
080059b8  w    F .text	00000002 TIM4_IRQHandler
0800f5f8 g     O .rodata	00000100 CAN_F18R1_fields
08016488 g     O .rodata	000000d0 USB_FS_registers
08000360 g     F .text	00000276 .hidden __aeabi_dadd
08016760 g     O .rodata	00000008 TIM8_CCR3_fields
08000af0 g     F .text	00000082 .hidden __ledf2
08014250 g     O .rodata	00000100 CAN_F13R2_fields
0800aa1d g     O .rodata	00000008 LEDs
08012868 g     O .rodata	00000030 TIM2_CCMR1_Input_fields
080017e8 g     F .text	00000004 TaskInitialise1
08019b04 g     O .rodata	00000008 DAC_DHR12R1_fields
080169d0 g     O .rodata	00000028 I2C1_OAR1_fields
08005674 g     F .text	00000008 USBD_static_malloc
0800cf38 g     O .rodata	00000020 CAN_RF0R_fields
080059b8  w    F .text	00000002 CAN_RX1_IRQHandler
080059b8  w    F .text	00000002 DMA2_Channel1_IRQHandler
0800cf30 g     O .rodata	00000008 RTC_BKP7R_fields
08009790 g     F .text	000000a0 __pow5mult
08011620 g     O .rodata	00000010 ADC1_TR1_fields
08016380 g     O .rodata	00000008 DMA1_CNDTR7_fields
08000658 g     F .text	0000006a .hidden __aeabi_ul2d
08005406 g     F .text	0000002e USBD_CDC_TransmitPacket
0800f6f8 g     O .rodata	00000008 TSC_IOG5CR_fields
0800ffb0 g     O .rodata	00000008 DAC_DHR12R2_fields
08011ce8 g     O .rodata	00000008 RTC_BKP18R_fields
080016c8 g     F .text	00000070 Task1
080001e4 g     F .text	00000016 mytest
0800e190 g     O .rodata	00000008 DMA1_CMAR6_fields
0800ff80 g     O .rodata	00000030 TIM15_CCMR1_Input_fields
080012bc g     F .text	0000002c CmdButton
00000000  w      *UND*	00000000 __deregister_frame_info
08005212 g     F .text	00000016 USBD_CtlReceiveStatus
0800f530 g     O .rodata	00000010 TIM2_CCR4_fields
20004684 g       ._user_heap_stack	00000000 end
20000160 g     O .data	00000008 LineCoding
0800ebe0 g     O .rodata	00000070 SPI1_CR1_fields
080059b8  w    F .text	00000002 I2C1_EV_IRQHandler
08013508 g     O .rodata	00000090 SPI1_registers
080055da g     F .text	00000014 USBD_LL_OpenEP
08012b58 g     O .rodata	00000010 TIM8_DCR_fields
080027f8 g     F .text	00000058 DecodePrintRegisters
080114c0 g     O .rodata	00000068 USB_FS_USB_CNTR_fields
0800fba0 g     O .rodata	000000b0 USART1_registers
0800d2e0 g     O .rodata	00000008 USART1_TDR_fields
08013090 g     O .rodata	00000078 RCC_APB1ENR_fields
080169f8 g     O .rodata	00000008 DMA1_CNDTR2_fields
08014860 g     O .rodata	00000070 CAN_IER_fields
08015c58 g     O .rodata	00000060 DMA1_CCR1_fields
08016030 g     O .rodata	00000008 NVIC_ICER0_fields
080110c0 g     O .rodata	00000008 NVIC_ISER1_fields
08004d44 g     F .text	00000088 USBD_LL_DataInStage
080196ec g     O .rodata	00000008 RTC_BKP31R_fields
08011478 g     O .rodata	00000048 TIM1_EGR_fields
08015480 g     O .rodata	00000060 TIM2_CCMR1_Output_fields
08014650 g     O .rodata	00000010 DAC_SR_fields
080124a8 g     O .rodata	00000010 TIM2_CCR2_fields
080049cc g     F .text	0000007c HAL_TIM_PWM_Stop
08005550 g     F .text	0000007c USBD_LL_Init
08014a98 g     O .rodata	00000008 RTC_BKP3R_fields
0800586c g     F .text	0000001c BSP_LED_On
08000be4 g     F .text	00000012 .hidden __aeabi_dcmpgt
080059b8  w    F .text	00000002 DMA1_Channel6_IRQHandler
08004e50 g     F .text	00000016 USBD_CtlError
2000005c g     O .data	00000038 USBD_CDC
08004c7c g     F .text	0000000e USBD_ClrClassConfig
0801952c g     O .rodata	00000008 RTC_BKP5R_fields
080059b8  w    F .text	00000002 UART4_IRQHandler
080059b8  w    F .text	00000002 DMA2_Channel4_IRQHandler
080053dc g     F .text	0000000e USBD_CDC_RegisterInterface
08008748 g     F .text	00000002 __sfp_lock_acquire
08009364 g     F .text	00000092 memchr
08008818 g     F .text	000001b0 _free_r
080059b8  w    F .text	00000002 TIM3_IRQHandler
080059b8  w    F .text	00000002 RCC_IRQHandler
0800c108 g     O .rodata	00000020 RTC_CALR_fields
08008d3c g     F .text	0000000c __locale_mb_cur_max
08000bd0 g     F .text	00000012 .hidden __aeabi_dcmpge
0800eb98 g     O .rodata	00000008 DAC_DHR12L1_fields
0800c1e8 g     O .rodata	00000030 TIM17_SR_fields
080113c0 g     O .rodata	00000080 GPIOB_OTYPER_fields
080059b8  w    F .text	00000002 DMA1_Channel1_IRQHandler
080157c0 g     O .rodata	00000008 RTC_BKP9R_fields
080165b0 g     O .rodata	00000100 CAN_F14R2_fields
080019d8 g     F .text	000002cc lcdCmd
0800035c g     F .text	0000027a .hidden __aeabi_dsub
08005506 g     F .text	00000012 HAL_PCD_DataOutStageCallback
080059b8 g       .text	00000002 Default_Handler
20000a34 g     O .data	00000004 __malloc_sbrk_base
0800571c g     F .text	0000001c USBD_VCP_ManufacturerStrDescriptor
08012ab0 g     O .rodata	00000088 GPIOA_LCKR_fields
0800fd68 g     O .rodata	00000090 RTC_TAFCR_fields
20000168 g     O .data	00000010 USBD_CDC_fops
080166b0 g     O .rodata	000000b0 GPIOA_registers
0800f520 g     O .rodata	00000008 NVIC_ISPR2_fields
080059b8  w    F .text	00000002 USBWakeUp_RMP_IRQHandler
08013dc8 g     O .rodata	00000060 TIM2_CCMR2_Output_fields
0800d1d8 g     O .rodata	00000088 GPIOB_LCKR_fields
0800cc50 g     O .rodata	00000078 TIM8_CR2_fields
08003e44 g     F .text	00000010 HAL_PCD_EP_GetRxCount
0800c800 g     O .rodata	00000030 CAN_BTR_fields
08000658 g     F .text	0000006a .hidden __floatundidf
080018e0 g     F .text	00000074 lcdinit
08019534 g     O .rodata	00000060 DMA1_CCR4_fields
0800d780 g     O .rodata	00000020 NVIC_IPR10_fields
0800fdf8 g     O .rodata	00000008 TIM17_ARR_fields
0800fc60 g     O .rodata	00000100 CAN_F12R2_fields
08009830 g     F .text	000000aa __lshift
080140a0 g     O .rodata	00000028 USART1_RQR_fields
08012750 g     O .rodata	00000048 TIM17_DIER_fields
0800bbe0 g     O .rodata	00000008 RTC_BKP22R_fields
080140c8 g     O .rodata	00000020 CAN_TDH2R_fields
080117d8 g     O .rodata	00000008 TIM1_RCR_fields
0800560a g     F .text	0000000e USBD_LL_ClearStallEP
08019a6c g     O .rodata	00000020 NVIC_IPR5_fields
0800d640 g     O .rodata	00000058 Flash_OBR_fields
080059b8  w    F .text	00000002 EXTI15_10_IRQHandler
0800df68 g     O .rodata	00000018 CAN_TDT1R_fields
08012260 g     O .rodata	00000038 RTC_TR_fields
08012cd0 g     O .rodata	00000020 NVIC_IPR17_fields
0800a110 g     F .text	000000a4 __register_exitproc
0800d568 g     O .rodata	00000058 Flash_CR_fields
0800f068 g     O .rodata	00000058 SPI1_SR_fields
0800ed10 g     O .rodata	00000040 USB_FS_DADDR_fields
08001658 g     F .text	00000070 TaskAdd
0800f770 g     O .rodata	00000010 EXTI_SWIER2_fields
0800383c g     F .text	0000002c HAL_PCD_SetAddress
08011248 g     O .rodata	00000020 NVIC_IPR19_fields
08010230 g     O .rodata	00000008 TIM6_SR_fields
0800c230 g     O .rodata	00000100 CAN_F1R1_fields
08014c80 g     O .rodata	00000008 TIM17_PSC_fields
0800c178 g     O .rodata	00000020 SYSCFG_EXTICR2_fields
0800965c g     F .text	00000134 __multiply
08016b88 g     O .rodata	00000008 SPI1_CRCPR_fields
08003104 g     F .text	000002cc HAL_RCC_ClockConfig
08003528 g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
2000000c g     O .data	00000004 Commands
08001550 g     F .text	00000002 TaskNull
08016138 g     O .rodata	00000010 ADC1_TR2_fields
20000dec g     O .bss	00000028 __malloc_current_mallinfo
08011d40 g     O .rodata	00000008 RTC_TSSSR_fields
08001f68 g     F .text	0000012c TaskInput
0800fa78 g     O .rodata	00000008 TIM6_CR2_fields
080143b8 g     O .rodata	00000050 RCC_CR_fields
08011630 g     O .rodata	000000e0 CAN_FM1R_fields
080120b8 g     O .rodata	00000008 TIM1_CCR6_fields
080099f8 g     F .text	000000ba __d2b
08016388 g     O .rodata	00000098 USART1_CR2_fields
08013fa0 g     O .rodata	00000060 TIM1_BDTR_fields
08005c54 g     F .text	00000044 strcasecmp
0800bfe0 g     O .rodata	00000008 IWDG_WINR_fields
08011710 g     O .rodata	00000048 ADC1_SMPR1_fields
08000214 g     F .text	00000004 my_Init
0800f0e0 g     O .rodata	00000018 I2C1_OAR2_fields
080014f4 g     F .text	0000005c cmddc
08015ea8 g     O .rodata	00000100 CAN_F26R1_fields
08005e24 g     F .text	00000128 _strtoul_r
08012630 g     O .rodata	00000008 CRC_POL_fields
080196fc g     O .rodata	00000008 DMA1_CMAR4_fields
080059b8  w    F .text	00000002 TIM7_IRQHandler
0800554a g     F .text	00000002 HAL_PCD_SuspendCallback
080140f0 g     O .rodata	00000008 DMA1_CPAR3_fields
08010028 g     O .rodata	00000008 RTC_BKP14R_fields
08005288 g     F .text	0000000c USBD_CDC_GetDeviceQualifierDescriptor
08002218 g     F .text	00000006 _close_r
0800b880 g     O .rodata	00000008 SPI1_DR_fields
0800cc28 g     O .rodata	00000018 RCC_CFGR2_fields
080005f8 g     F .text	00000022 .hidden __aeabi_i2d
0800c7c8 g     O .rodata	00000010 TIM15_DCR_fields
0800c8a0 g     O .rodata	00000018 Flash_ACR_fields
08019804 g     O .rodata	00000008 CRC_IDR_fields
0800f528 g     O .rodata	00000008 DMA1_CPAR5_fields
08015a50 g     O .rodata	00000100 CAN_F18R2_fields
08013f50 g     O .rodata	00000050 IWDG_registers
08005db0 g     F .text	00000010 strtok
0801aa88 g     O .parsetable	0000000c CmdGyroE
080110c8 g     O .rodata	00000008 IWDG_PR_fields
08004724 g     F .text	0000002c HAL_TIM_Base_Init
080123e0 g     O .rodata	00000020 NVIC_IPR11_fields
080117e0 g     O .rodata	00000050 COMP_COMP7_CSR_fields
0800c0e8 g     O .rodata	00000020 CAN_RF1R_fields
08002304 g     F .text	0000007c TerminalInit
08007408 g     F .text	000000c4 __swsetup_r
0800e6c8 g     O .rodata	00000008 TIM8_ARR_fields
08000cd8  w    F .text	00000002 .hidden __aeabi_ldiv0
080059b8  w    F .text	00000002 EXTI9_5_IRQHandler
08000918 g     F .text	000001d0 .hidden __divdf3
0800e2b8 g     O .rodata	00000008 ADC1_DR_fields
080059b8  w    F .text	00000002 RTC_WKUP_IRQHandler
080196dc g     O .rodata	00000010 USART1_BRR_fields
08015c00 g     O .rodata	00000050 TIM15_CCMR1_Output_fields
20000628 g     O .data	00000408 __malloc_av_
080129a0 g     O .rodata	00000088 SYSCFG_CFGR1_fields
080023d6 g     F .text	00000010 TerminalReadNonBlock
080006c4 g     F .text	00000254 .hidden __muldf3
080167b8 g     O .rodata	00000018 CAN_TDT0R_fields
08002190 g     F .text	00000054 CmdDump
08009f54 g     F .text	00000022 __sread
08011298 g     O .rodata	00000028 TIM16_CCMR1_Output_fields
08014630 g     O .rodata	00000018 WWDG_CFR_fields
08014e10 g     O .rodata	00000370 Peripherals
08015740 g     O .rodata	00000080 GPIOB_ODR_fields
08003500  w    F .text	0000000c HAL_GetTick
08012640 g     O .rodata	00000050 USB_FS_USB_EP5R_fields
0800f978 g     O .rodata	00000100 CAN_F11R1_fields
080094c0 g     F .text	00000002 __malloc_lock
080140e8 g     O .rodata	00000008 NVIC_ISPR0_fields
0800ced0 g     O .rodata	00000058 ADC1_ISR_fields
0800d428 g     O .rodata	00000048 FPU_FPCCR_fields
08016558 g     O .rodata	00000010 TSC_ICR_fields
0800da98 g     O .rodata	00000008 NVIC_IABR2_fields
08008614 g     F .text	0000002c _fflush_r
080023e6 g     F .text	00000012 TerminalReadAnyNonBlock
08005700 g     F .text	0000001c USBD_VCP_ProductStrDescriptor
0800a1b4 g     F .text	0000005e _calloc_r
080017c8 g     F .text	00000020 Task5
08016b00 g     O .rodata	00000080 GPIOA_PUPDR_fields
080059b8  w    F .text	00000002 SPI2_IRQHandler
08014ae8 g     O .rodata	00000008 RTC_BKP21R_fields
08019cdd g     O .rodata	00000012 hUSBDDeviceDesc
0800bbb8 g     O .rodata	00000028 RTC_TSDR_fields
08002588 g     F .text	0000000c USB_LP_CAN_RX0_IRQHandler
080146c0 g     O .rodata	00000048 RCC_CFGR3_fields
08005a18 g     F .text	0000009a memset
20003884 g     O .bss	00000014 GPIO_InitStruct
080059b8  w    F .text	00000002 MemManage_Handler
080012f4 g     F .text	00000078 main
080140f8 g     O .rodata	00000100 TSC_IOSCR_fields
0800b6a0 g     O .rodata	000001e0 DMA1_registers
08005934 g     F .text	00000014 BSP_PB_GetState
08012408 g     O .rodata	00000020 SYSCFG_EXTICR3_fields
20000de0 g     O .bss	00000004 __malloc_max_total_mem
08001788 g     F .text	00000020 Task3
0800f0c0 g     O .rodata	00000008 ADC1_JDR3_fields
080123d8 g     O .rodata	00000008 SPI1_TXCRCR_fields
0801a9e0 g       *ABS*	00000000 _siccmram
08019894 g     O .rodata	00000050 COMP_COMP3_CSR_fields
080102e0 g     O .rodata	00000020 NVIC_IPR9_fields
08010580 g     O .rodata	00000040 DBGMCU_registers
080017ec g     F .text	000000a0 CmdTaskAdd
08014a78 g     O .rodata	00000020 NVIC_IPR16_fields
0800f420 g     O .rodata	00000100 CAN_F2R2_fields
080059b8  w    F .text	00000002 SVC_Handler
08009fd0 g     F .text	00000008 __sclose
080059b8  w    F .text	00000002 DMA2_Channel5_IRQHandler
0800de28 g     O .rodata	000000e0 DMA1_IFCR_fields
0801aa70 g     O .parsetable	0000000c cmddcinitE
0800cd88 g     O .rodata	00000080 TSC_IOGCSR_fields
0801a9f8 g     O .parsetable	0000000c cmdPWME
08002518 g     F .text	00000070 TerminalInputBufferWrite
08016790 g     O .rodata	00000008 DMA1_CPAR1_fields
08007618 g     F .text	00000ea2 _dtoa_r
08008e40 g     F .text	00000524 _malloc_r
08012220 g     O .rodata	00000040 GPIOB_AFRL_fields
0800a3c0 g     F .text	0000001a __ascii_wctomb
0800c9c8 g     O .rodata	00000058 ADC1_IER_fields
0801a9ec g     O .parsetable	0000000c CmdCooperativeSwitcherE
08000668 g     F .text	0000005a .hidden __aeabi_l2d
0800d260 g     O .rodata	00000008 DAC_DHR8R1_fields
08013b28 g     O .rodata	00000030 TIM1_CCMR1_Input_fields
0800cb28 g     O .rodata	00000100 TSC_IOASCR_fields
0800e298 g     O .rodata	00000020 NVIC_IPR20_fields
08004dcc g     F .text	0000003e USBD_LL_Reset
080133b8 g     O .rodata	00000018 CAN_RDT1R_fields
08010820 g     O .rodata	00000080 GPIOA_BRR_fields
08014d10 g     O .rodata	00000100 CAN_F20R2_fields
080117c8 g     O .rodata	00000010 TSC_ISR_fields
00000000  w      *UND*	00000000 __libc_fini
08005668 g     F .text	0000000c USBD_LL_GetRxDataSize
080059b8  w    F .text	00000002 DMA1_Channel5_IRQHandler
080059b8  w    F .text	00000002 USB_LP_IRQHandler
20003e48 g     O .bss	00000800 UserRxBuffer
08012398 g     O .rodata	00000040 SPI1_I2SCFGR_fields
08019c8c g     O .rodata	00000004 USBD_LangIDDesc
0800d0a8 g     O .rodata	00000100 CAN_F15R2_fields
080059b8  w    F .text	00000002 EXTI4_IRQHandler
080145d8 g     O .rodata	00000050 USB_FS_USB_EP2R_fields
2000017c g     O .data	00000020 LED_PORT
0800be80 g     O .rodata	00000008 TIM8_CCR6_fields
08004ce4 g     F .text	00000060 USBD_LL_DataOutStage
0800fd60 g     O .rodata	00000008 RTC_BKP4R_fields
0800877c g     F .text	0000009c _malloc_trim_r
08015610 g     O .rodata	00000008 TSC_IOG7CR_fields
08014238 g     O .rodata	00000008 RTC_BKP16R_fields
08011440 g     O .rodata	00000028 DBGMCU_CR_fields
08011d28 g     O .rodata	00000018 CAN_RDT0R_fields
0800d698 g     O .rodata	00000008 ADC1_AWD2CR_fields
08015fa8 g     O .rodata	00000008 DMA1_CMAR5_fields
0800fb80 g     O .rodata	00000020 CAN_RDL0R_fields
08016b90 g     O .rodata	00000008 DMA1_CPAR4_fields
080148d0 g     O .rodata	00000080 TIM6_registers
08001240 g     F .text	00000028 CmdAccel
08011a60 g     O .rodata	00000008 RTC_BKP11R_fields
08002ac8 g     F .text	00000068 SystemInit
08012b68 g     O .rodata	00000048 TIM16_BDTR_fields
08000af8 g     F .text	0000007a .hidden __nedf2
08011530 g     O .rodata	00000070 RTC_ALRMBR_fields
08011ed0 g     O .rodata	00000010 TIM2_DCR_fields
08019c0c g     O .rodata	00000050 ADC1_CR_fields
0800a3e8 g     F .text	00000000 _fini
08001e28 g     F .text	0000001c CmdW
08003830 g     F .text	0000000c HAL_PCD_Start
080059b8  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
080105c0 g     O .rodata	00000020 EXTI_EMR2_fields
0800ce48 g     O .rodata	00000008 RTC_WUTR_fields
08014408 g     O .rodata	00000008 DMA1_CPAR6_fields
08015e58 g     O .rodata	00000008 CRC_INIT_fields
0800bdf0 g     O .rodata	00000088 RTC_ISR_fields
0800c990 g     O .rodata	00000010 TIM1_DCR_fields
0800c478 g     O .rodata	00000038 PWR_CR_fields
0800ea28 g     O .rodata	00000030 TIM2_EGR_fields
080074e0 g     F .text	0000000c atexit
08015fb0 g     O .rodata	00000080 OPAMP_OPAMP1_CR_fields
0800d6a0 g     O .rodata	00000060 FPU_registers
0800ca28 g     O .rodata	00000100 EXTI_IMR1_fields
080024e0 g     F .text	00000038 _write_r
0800d340 g     O .rodata	00000010 ADC1_SQR4_fields
10000000 g       .ccmram	00000000 _eccmram
08016420 g     O .rodata	00000028 ADC1_SQR3_fields
080059b8  w    F .text	00000002 DMA1_Channel3_IRQHandler
08016950 g     O .rodata	00000080 DBGMCU_APB1FZ_fields
080120e0 g     O .rodata	00000060 SPI1_CR2_fields
08016468 g     O .rodata	00000010 ADC1_CALFACT_fields
08014c78 g     O .rodata	00000008 RTC_BKP28R_fields
080034a6  w    F .text	00000024 HAL_InitTick
0800d4e8 g     O .rodata	00000020 TIM1_CCR5_fields
0800563e g     F .text	0000000e USBD_LL_SetUSBAddress
0801aa94 g     O .parsetable	0000000c lcdCmdE
08015cb8 g     O .rodata	00000020 NVIC_IPR12_fields
08019cf0 g     O .rodata	00000010 LED_PIN
200005c8 g     O .data	00000004 _impure_ptr
080119a8 g     O .rodata	00000018 CAN_TDT2R_fields
08014240 g     O .rodata	00000008 ADC1_JDR4_fields
080141f8 g     O .rodata	00000040 TIM15_CR2_fields
080084c0 g     F .text	00000154 __sflush_r
0800c418 g     O .rodata	00000060 RCC_CFGR_fields
080034f0  w    F .text	00000010 HAL_IncTick
0800cd60 g     O .rodata	00000028 TIM17_EGR_fields
080055ee g     F .text	0000000e USBD_LL_CloseEP
080059b8  w    F .text	00000002 ADC4_IRQHandler
08014000 g     O .rodata	000000a0 RTC_CR_fields
080051b8 g     F .text	00000012 USBD_CtlContinueSendData
080157c8 g     O .rodata	000000e0 DMA1_ISR_fields
0800d948 g     O .rodata	00000100 CAN_F6R1_fields
08001ca4 g     F .text	0000007c cmdDisplay
080059b8  w    F .text	00000002 WWDG_IRQHandler
0800bc50 g     O .rodata	00000100 EXTI_EMR1_fields
0800ff60 g     O .rodata	00000020 NVIC_IPR6_fields
08016b98 g     O .rodata	00000010 TIM2_CCR3_fields
08014660 g     O .rodata	00000060 DMA1_CCR6_fields
08011340 g     O .rodata	00000080 GPIOA_MODER_fields
08014710 g     O .rodata	00000080 OPAMP_OPAMP2_CR_fields
08012928 g     O .rodata	00000078 TIM1_CR2_fields
08001738 g     F .text	00000050 Task2
0800ef58 g     O .rodata	00000010 RTC_PRER_fields
08001954 g     F .text	0000000a Delay
0800564c g     F .text	0000000e USBD_LL_Transmit
080059b8  w    F .text	00000002 TIM2_IRQHandler
08000210 g     F .text	00000004 my_Loop
08015e28 g     O .rodata	00000020 TIM16_CCER_fields
08003796 g     F .text	0000009a HAL_PCD_Init
200000e4 g     O .data	00000043 USBD_CDC_CfgHSDesc
0801aa7c g     O .parsetable	0000000c CmdDecodeE
0800e088 g     O .rodata	00000100 CAN_F26R2_fields
0801a9e0 g     O .parsetable	0000000c CmdTaskAddE
080124b8 g     O .rodata	00000100 CAN_F6R2_fields
20000000 g       .data	00000000 myTickCount
0800e2c0 g     O .rodata	00000100 CAN_F16R1_fields
0800be78 g     O .rodata	00000008 RTC_BKP27R_fields
08011a50 g     O .rodata	00000010 EXTI_RTSR2_fields
080047e8 g     F .text	0000008c TIM_OC2_SetConfig
08016570 g     O .rodata	00000028 TIM16_CR2_fields
0800d7a8 g     O .rodata	00000070 RTC_ALRMAR_fields
08014960 g     O .rodata	00000008 TIM1_ARR_fields
08005162 g     F .text	0000003a USBD_GetString
080058a4 g     F .text	0000001c BSP_LED_Toggle
0800db20 g     O .rodata	00000100 CAN_F22R2_fields
0800bab8 g     O .rodata	00000100 CAN_F24R1_fields
080054f8 g     F .text	0000000e HAL_PCD_SetupStageCallback
08019704 g     O .rodata	00000100 CAN_F5R1_fields
080059b8  w    F .text	00000002 COMP7_IRQHandler
20008000 g       *ABS*	00000000 _estack
08001e64 g     F .text	00000104 parse
08013088 g     O .rodata	00000008 RTC_BKP2R_fields
080059b8  w    F .text	00000002 COMP1_2_3_IRQHandler
08012298 g     O .rodata	00000100 CAN_F17R1_fields
080059b8  w    F .text	00000002 EXTI1_IRQHandler
0800d508 g     O .rodata	00000060 TIM8_BDTR_fields
08000b94 g     F .text	00000012 .hidden __aeabi_dcmpeq
08012898 g     O .rodata	00000050 USB_FS_USB_EP1R_fields
0800b888 g     O .rodata	000000b0 ADC1_2_CSR_fields
08012748 g     O .rodata	00000008 FPU_FPCAR_fields
20000a3c g       .data	00000000 _edata
08010dd0 g     O .rodata	000001a0 TIM8_registers
0800f0d0 g     O .rodata	00000008 RTC_BKP30R_fields
080125b8 g     O .rodata	00000018 TIM17_CCMR1_Input_fields
10000000 g       .ccmram	00000000 _sccmram
08011d98 g     O .rodata	00000038 TIM16_CR1_fields
08019924 g     O .rodata	00000100 CAN_F17R2_fields
0800da60 g     O .rodata	00000038 TIM15_CR1_fields
0800a298 g     F .text	000000b0 __fputwc
08002850 g     F .text	00000278 CmdDecode
08004980 g     F .text	0000004c HAL_TIM_PWM_Start
080119c0 g     O .rodata	00000008 TIM15_RCR_fields
0800f540 g     O .rodata	00000080 GPIOB_IDR_fields
0800466c  w    F .text	00000002 HAL_TIM_Base_MspInit
0800ba10 g     O .rodata	00000050 TIM1_CCMR3_Output_fields
08011528 g     O .rodata	00000008 TIM8_DMAR_fields
0800c8f0 g     O .rodata	00000080 Flash_registers
08010730 g     O .rodata	00000010 TIM16_DCR_fields
0801969c g     O .rodata	00000040 RCC_APB2RSTR_fields
08002094 g     F .text	00000028 fetch_uint32_arg
08014950 g     O .rodata	00000010 RTC_ALRMBSSR_fields
08014798 g     O .rodata	00000040 SYSCFG_RCR_fields
080059b8  w    F .text	00000002 USART2_IRQHandler
08016150 g     O .rodata	00000038 TIM17_CR1_fields
08012d20 g     O .rodata	00000260 NVIC_registers
080059b8  w    F .text	00000002 COMP4_5_6_IRQHandler
08009f78 g     F .text	00000038 __swrite
08002b30 g     F .text	000005d4 HAL_RCC_OscConfig
20000a30 g     O .data	00000004 __malloc_trim_threshold
08011958 g     O .rodata	00000008 TIM17_CCR1_fields
0800e800 g     O .rodata	00000028 I2C1_TIMINGR_fields
08014d08 g     O .rodata	00000008 USB_FS_BTABLE_fields
080102c0 g     O .rodata	00000020 CAN_TDH1R_fields
08011f00 g     O .rodata	000000a8 I2C1_CR1_fields
08000000 g     O .isr_vector	00000000 g_pfnVectors
0800519c g     F .text	0000001c USBD_CtlSendData
080151e8 g     O .rodata	00000100 CAN_F15R1_fields
08014518 g     O .rodata	00000010 ADC1_2_CDR_fields
08008ce0 g     F .text	00000052 _fwalk_reent
08009924 g     F .text	000000d2 __mdiff
08016148 g     O .rodata	00000008 TIM6_PSC_fields
08000bf8 g     F .text	0000004e .hidden __aeabi_d2iz
08013dc0 g     O .rodata	00000008 RTC_BKP15R_fields
0800e6a8 g     O .rodata	00000020 PWR_registers
20001084 g     O .bss	00002800 stacks
080151c8 g     O .rodata	00000020 Flash_SR_fields
080167b0 g     O .rodata	00000008 ADC1_JDR2_fields
080015bc g     F .text	00000078 TaskSwitcher
080111e0 g     O .rodata	00000008 RTC_BKP20R_fields
2000019c g     O .data	00000004 __ctype_ptr__
0800f768 g     O .rodata	00000008 DMA1_CNDTR6_fields
0800bfe8 g     O .rodata	00000100 CAN_F19R2_fields
080059b8  w    F .text	00000002 I2C2_ER_IRQHandler
08010740 g     O .rodata	00000040 ADC1_2_CCR_fields
080059b8  w    F .text	00000002 DMA1_Channel2_IRQHandler
0800bf00 g     O .rodata	000000e0 DAC_registers
080168d0 g     O .rodata	00000080 GPIOA_OSPEEDR_fields
0801966c g     O .rodata	00000030 TIM8_CCMR2_Input_fields
0800874c g     F .text	00000002 __sfp_lock_release
0800be88 g     O .rodata	00000048 TIM17_BDTR_fields
08012d00 g     O .rodata	00000020 CAN_RDH1R_fields
080121b8 g     O .rodata	00000060 TIM2_CCER_fields
08015e48 g     O .rodata	00000010 DAC_DHR8RD_fields
080020bc g     F .text	00000020 fetch_string_arg
08005804 g     F .text	00000068 BSP_LED_Init
080109a8 g     O .rodata	00000080 GPIOB_MODER_fields
0801aa58 g     O .parsetable	0000000c CmdDumpE
08019c7c g     O .rodata	00000010 PLLMULFactorTable
0800ea58 g     O .rodata	00000098 USART1_CR3_fields
080026b8 g     F .text	0000004c DecodeField
08004874 g     F .text	0000008c TIM_OC3_SetConfig
08015a08 g     O .rodata	00000020 CAN_RI0R_fields
080059b8  w    F .text	00000002 TIM8_BRK_IRQHandler
0800d470 g     O .rodata	00000020 DBGMCU_APB2FZ_fields
0800cc40 g     O .rodata	00000008 TIM1_PSC_fields
080027b0 g     F .text	00000048 DecodePrintPeripherals
08010780 g     O .rodata	00000038 TIM15_CCER_fields
08019d00 g     O .rodata	00000101 _ctype_
08012a28 g     O .rodata	00000008 DMA1_CMAR7_fields
08000cd8  w    F .text	00000002 .hidden __aeabi_idiv0
08004968 g     F .text	00000018 TIM_CCxChannelCmd
0800f5d8 g     O .rodata	00000020 CAN_RI1R_fields
08016240 g     O .rodata	00000028 SYSCFG_CFGR2_fields
08010238 g     O .rodata	00000088 RCC_CIR_fields
0801aad0 g     O .parsetable	0000000c CmdStatsE
0801aa04 g     O .parsetable	0000000c cmdPWMtimerinitE
080059b8  w    F .text	00000002 FLASH_IRQHandler
08010578 g     O .rodata	00000008 TIM15_DMAR_fields
08016268 g     O .rodata	00000010 EXTI_FTSR2_fields
08010628 g     O .rodata	00000100 CAN_F10R2_fields
0800e7e0 g     O .rodata	00000020 NVIC_IPR3_fields
08016460 g     O .rodata	00000008 DMA1_CNDTR1_fields
0800d1b0 g     O .rodata	00000028 I2C1_TIMEOUTR_fields
0800c830 g     O .rodata	00000048 TIM15_BDTR_fields
0800568c g     F .text	0000000c USBD_VCP_LangIDStrDescriptor
20003cd8 g     O .bss	00000100 USBD_StrDesc
080023f8 g     F .text	000000e8 TerminalOutputBufferWrite
080059b8  w    F .text	00000002 BusFault_Handler
080059b8  w    F .text	00000002 USART1_IRQHandler
080107b8 g     O .rodata	00000050 COMP_COMP1_CSR_fields
08019a24 g     O .rodata	00000048 TIM8_EGR_fields
08008d50 g     F .text	000000e0 __smakebuf_r
08011080 g     O .rodata	00000040 TIM15_SR_fields
08005d54 g     F .text	0000005c strlen
0800e7a0 g     O .rodata	00000040 RCC_APB2ENR_fields
080059b8  w    F .text	00000002 SPI3_IRQHandler
08000b84 g     F .text	00000010 .hidden __aeabi_cdcmpeq
08000ae8 g     F .text	0000008a .hidden __gedf2
20004648 g     O .bss	0000003c TimHandle
08012690 g     O .rodata	00000060 DMA1_CCR3_fields
0800e040 g     O .rodata	00000048 TIM1_CR1_fields
08015468 g     O .rodata	00000018 IWDG_SR_fields
080161d0 g     O .rodata	00000050 USB_FS_USB_EP6R_fields
080133d0 g     O .rodata	00000110 TIM16_registers
0800466a  w    F .text	00000002 HAL_PCDEx_SetConnectionState
08010478 g     O .rodata	00000100 TIM17_registers
0800eeb0 g     O .rodata	00000098 TIM1_CCER_fields
20000a38 g     O .data	00000004 __wctomb
08011ab8 g     O .rodata	00000100 CAN_F3R2_fields
08000c78 g     F .text	0000002e .hidden __gnu_ldivmod_helper
0800d700 g     O .rodata	00000080 DAC_CR_fields
080059b8  w    F .text	00000002 I2C1_ER_IRQHandler
0800a050 g     F .text	00000018 __sprint_r
0800d2f0 g     O .rodata	00000050 USB_FS_USB_EP7R_fields
08010c48 g     O .rodata	00000088 I2C1_ISR_fields
0800bbe8 g     O .rodata	00000060 TIM1_CCMR2_Output_fields
0800ce28 g     O .rodata	00000020 NVIC_IPR8_fields
08019c6c g     O .rodata	00000010 PredivFactorTable
08016278 g     O .rodata	00000008 TSC_IOG3CR_fields
0800061c g     F .text	0000003a .hidden __aeabi_f2d
0800565a g     F .text	0000000e USBD_LL_PrepareReceive
0800f0f8 g     O .rodata	00000008 DMA1_CNDTR3_fields
20000e14 g     O .bss	0000003c tim1
0800c5c0 g     O .rodata	00000100 CAN_F27R1_fields
08011468 g     O .rodata	00000010 TSC_IER_fields
08010398 g     O .rodata	000000e0 CAN_FFA1R_fields
0800ef48 g     O .rodata	00000010 TIM8_CNT_fields
08010728 g     O .rodata	00000008 ADC1_AWD3CR_fields
00000000  w      *UND*	00000000 _Jv_RegisterClasses
08016448 g     O .rodata	00000008 RTC_BKP25R_fields
08011850 g     O .rodata	00000100 TSC_IOCCR_fields
08012428 g     O .rodata	00000080 OPAMP_OPAMP3_CR_fields
080053fa g     F .text	0000000c USBD_CDC_SetRxBuffer
0801959c g     O .rodata	000000d0 EXTI_SWIER1_fields
0800035c g     F .text	0000027a .hidden __subdf3
0800bde8 g     O .rodata	00000008 TIM16_ARR_fields
080111d0 g     O .rodata	00000010 DBGMCU_IDCODE_fields
08005f68 g     F .text	00001424 _vfprintf_r
080095ec g     F .text	0000005a __lo0bits
08013108 g     O .rodata	00000020 EXTI_IMR2_fields
08014708 g     O .rodata	00000008 TIM6_EGR_fields
08012a78 g     O .rodata	00000008 SPI1_RXCRCR_fields
0801988c g     O .rodata	00000008 I2C1_PECR_fields
08003d50 g     F .text	000000f4 HAL_PCD_EP_Receive
08019464 g     O .rodata	00000018 ADC1_OFR3_fields
0800df80 g     O .rodata	00000058 COMP_COMP6_CSR_fields
08011ce0 g     O .rodata	00000008 RTC_BKP1R_fields
08014358 g     O .rodata	00000060 TIM8_CCMR1_Output_fields
08013e80 g     O .rodata	000000b0 GPIOB_registers
08002704 g     F .text	0000005c DecodeRegister
080105e0 g     O .rodata	00000048 TIM8_SMCR_fields
0800260c g     F .text	00000058 DecodeReadRegister
00000000  w      *UND*	00000000 __register_frame_info
0800c198 g     O .rodata	00000050 CAN_MCR_fields
0800c228 g     O .rodata	00000008 DAC_DOR1_fields
08002380 g     F .text	0000004c TerminalRead
0800f008 g     O .rodata	00000060 TSC_CR_fields
0801aa34 g     O .parsetable	0000000c cmdDisplayE
0800d1a8 g     O .rodata	00000008 TIM2_DMAR_fields
0800bed0 g     O .rodata	00000030 TIM8_CCMR1_Input_fields
0800c6c8 g     O .rodata	00000100 CAN_F12R1_fields
080059b8  w    F .text	00000002 USBWakeUp_IRQHandler
0801980c g     O .rodata	00000008 TIM16_PSC_fields
0800e8c8 g     O .rodata	00000008 USART1_RDR_fields
08012a40 g     O .rodata	00000038 RCC_BDCR_fields
08014af0 g     O .rodata	00000010 TIM17_DCR_fields
08016b80 g     O .rodata	00000008 NVIC_ISPR1_fields
0800ca20 g     O .rodata	00000008 NVIC_ICPR2_fields
0801aa10 g     O .parsetable	0000000c CmdAccelE
08016280 g     O .rodata	00000100 CAN_F21R2_fields
080053ea g     F .text	00000010 USBD_CDC_SetTxBuffer
0800d350 g     O .rodata	00000070 SYSCFG_registers
08010a28 g     O .rodata	00000080 OPAMP_OPAMP4_CR_fields
080059b8  w    F .text	00000002 DMA2_Channel3_IRQHandler
08010f70 g     O .rodata	000000d0 EXTI_FTSR1_fields
08005754 g     F .text	0000001c USBD_VCP_InterfaceStrDescriptor
080108a8 g     O .rodata	00000100 CAN_F7R1_fields
08009528 g     F .text	00000082 __multadd
08004c8a g     F .text	0000005a USBD_LL_SetupStage
08009514 g     F .text	00000012 _Bfree
080012e8 g     F .text	0000000a Error_Handler
08015450 g     O .rodata	00000010 WWDG_CR_fields
080059b8  w    F .text	00000002 EXTI2_TSC_IRQHandler
0800d2e8 g     O .rodata	00000008 NVIC_STIR_fields
080059b8  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler
08013e30 g     O .rodata	00000050 TIM8_CCMR3_Output_fields



Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000a3c 	.word	0x20000a3c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a3dc 	.word	0x0800a3dc

080001ac <frame_dummy>:
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <frame_dummy+0x24>)
 80001ae:	b510      	push	{r4, lr}
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4808      	ldr	r0, [pc, #32]	; (80001d4 <frame_dummy+0x28>)
 80001b4:	4908      	ldr	r1, [pc, #32]	; (80001d8 <frame_dummy+0x2c>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4808      	ldr	r0, [pc, #32]	; (80001dc <frame_dummy+0x30>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b903      	cbnz	r3, 80001c2 <frame_dummy+0x16>
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <frame_dummy+0x34>)
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0fb      	beq.n	80001c0 <frame_dummy+0x14>
 80001c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001cc:	4718      	bx	r3
 80001ce:	bf00      	nop
 80001d0:	00000000 	.word	0x00000000
 80001d4:	0800a3dc 	.word	0x0800a3dc
 80001d8:	20000a40 	.word	0x20000a40
 80001dc:	20000a3c 	.word	0x20000a3c
 80001e0:	00000000 	.word	0x00000000

080001e4 <mytest>:
    .type   mytest, %function   @@ - symbol type (not req)
@@ Declaration : int mytest(int x)
@@ Uses r0 for param 0
@@   r0: x
mytest:
    push {lr}
 80001e4:	b500      	push	{lr}
    push {r1}
 80001e6:	b402      	push	{r1}
    push {r0-r7}
 80001e8:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    ldr  r0, =0
 80001ea:	480b      	ldr	r0, [pc, #44]	; (8000218 <my_Init+0x4>)
    bl   BSP_LED_Toggle           @@ call BSP function
 80001ec:	f005 fb5a 	bl	80058a4 <BSP_LED_Toggle>
    pop  {r0-r7}
 80001f0:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    ldr  r1, =myTickCount
 80001f2:	490a      	ldr	r1, [pc, #40]	; (800021c <my_Init+0x8>)
    ldr  r0, [r1]
 80001f4:	6808      	ldr	r0, [r1, #0]
    pop  {r1} 
 80001f6:	bc02      	pop	{r1}
    pop  {pc}
 80001f8:	bd00      	pop	{pc}
 80001fa:	bf00      	nop

080001fc <my_Tick>:
    .thumb_func             @@ /
    .type   my_Tick, %function   @@ - symbol type (not req)
@@ Declaration : void my_Tick( void )
@@ Uses nothing
my_Tick:
    push {lr}
 80001fc:	b500      	push	{lr}
    push {r0-r1}
 80001fe:	b403      	push	{r0, r1}

    ldr  r1, =myTickCount
 8000200:	4906      	ldr	r1, [pc, #24]	; (800021c <my_Init+0x8>)
    ldr  r0, [r1]
 8000202:	6808      	ldr	r0, [r1, #0]
    add  r0, r0, #1
 8000204:	f100 0001 	add.w	r0, r0, #1
    str  r0, [r1]
 8000208:	6008      	str	r0, [r1, #0]
    pop {r0-r1}
 800020a:	bc03      	pop	{r0, r1}
    pop  {pc}
 800020c:	bd00      	pop	{pc}
 800020e:	bf00      	nop

08000210 <my_Loop>:
    .thumb_func             @@ /
    .type   my_Loop, %function   @@ - symbol type (not req)
@@ Declaration : void my_Loop( void )
@@ Uses nothing
my_Loop:
    push {lr}
 8000210:	b500      	push	{lr}
    pop  {pc}
 8000212:	bd00      	pop	{pc}

08000214 <my_Init>:
    .thumb_func             @@ /
    .type   my_Init, %function   @@ - symbol type (not req)
@@ Declaration : void my_Init( void )
@@ Uses nothing
my_Init:
    push {lr}
 8000214:	b500      	push	{lr}
    pop  {pc}
 8000216:	bd00      	pop	{pc}
@@   r0: x
mytest:
    push {lr}
    push {r1}
    push {r0-r7}
    ldr  r0, =0
 8000218:	00000000 	.word	0x00000000
    bl   BSP_LED_Toggle           @@ call BSP function
    pop  {r0-r7}
    ldr  r1, =myTickCount
 800021c:	20000000 	.word	0x20000000

08000220 <memcpy>:
 8000220:	4684      	mov	ip, r0
 8000222:	ea41 0300 	orr.w	r3, r1, r0
 8000226:	f013 0303 	ands.w	r3, r3, #3
 800022a:	d16d      	bne.n	8000308 <memcpy+0xe8>
 800022c:	3a40      	subs	r2, #64	; 0x40
 800022e:	d341      	bcc.n	80002b4 <memcpy+0x94>
 8000230:	f851 3b04 	ldr.w	r3, [r1], #4
 8000234:	f840 3b04 	str.w	r3, [r0], #4
 8000238:	f851 3b04 	ldr.w	r3, [r1], #4
 800023c:	f840 3b04 	str.w	r3, [r0], #4
 8000240:	f851 3b04 	ldr.w	r3, [r1], #4
 8000244:	f840 3b04 	str.w	r3, [r0], #4
 8000248:	f851 3b04 	ldr.w	r3, [r1], #4
 800024c:	f840 3b04 	str.w	r3, [r0], #4
 8000250:	f851 3b04 	ldr.w	r3, [r1], #4
 8000254:	f840 3b04 	str.w	r3, [r0], #4
 8000258:	f851 3b04 	ldr.w	r3, [r1], #4
 800025c:	f840 3b04 	str.w	r3, [r0], #4
 8000260:	f851 3b04 	ldr.w	r3, [r1], #4
 8000264:	f840 3b04 	str.w	r3, [r0], #4
 8000268:	f851 3b04 	ldr.w	r3, [r1], #4
 800026c:	f840 3b04 	str.w	r3, [r0], #4
 8000270:	f851 3b04 	ldr.w	r3, [r1], #4
 8000274:	f840 3b04 	str.w	r3, [r0], #4
 8000278:	f851 3b04 	ldr.w	r3, [r1], #4
 800027c:	f840 3b04 	str.w	r3, [r0], #4
 8000280:	f851 3b04 	ldr.w	r3, [r1], #4
 8000284:	f840 3b04 	str.w	r3, [r0], #4
 8000288:	f851 3b04 	ldr.w	r3, [r1], #4
 800028c:	f840 3b04 	str.w	r3, [r0], #4
 8000290:	f851 3b04 	ldr.w	r3, [r1], #4
 8000294:	f840 3b04 	str.w	r3, [r0], #4
 8000298:	f851 3b04 	ldr.w	r3, [r1], #4
 800029c:	f840 3b04 	str.w	r3, [r0], #4
 80002a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a4:	f840 3b04 	str.w	r3, [r0], #4
 80002a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002ac:	f840 3b04 	str.w	r3, [r0], #4
 80002b0:	3a40      	subs	r2, #64	; 0x40
 80002b2:	d2bd      	bcs.n	8000230 <memcpy+0x10>
 80002b4:	3230      	adds	r2, #48	; 0x30
 80002b6:	d311      	bcc.n	80002dc <memcpy+0xbc>
 80002b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002bc:	f840 3b04 	str.w	r3, [r0], #4
 80002c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c4:	f840 3b04 	str.w	r3, [r0], #4
 80002c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002cc:	f840 3b04 	str.w	r3, [r0], #4
 80002d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d4:	f840 3b04 	str.w	r3, [r0], #4
 80002d8:	3a10      	subs	r2, #16
 80002da:	d2ed      	bcs.n	80002b8 <memcpy+0x98>
 80002dc:	320c      	adds	r2, #12
 80002de:	d305      	bcc.n	80002ec <memcpy+0xcc>
 80002e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e4:	f840 3b04 	str.w	r3, [r0], #4
 80002e8:	3a04      	subs	r2, #4
 80002ea:	d2f9      	bcs.n	80002e0 <memcpy+0xc0>
 80002ec:	3204      	adds	r2, #4
 80002ee:	d008      	beq.n	8000302 <memcpy+0xe2>
 80002f0:	07d2      	lsls	r2, r2, #31
 80002f2:	bf1c      	itt	ne
 80002f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002f8:	f800 3b01 	strbne.w	r3, [r0], #1
 80002fc:	d301      	bcc.n	8000302 <memcpy+0xe2>
 80002fe:	880b      	ldrh	r3, [r1, #0]
 8000300:	8003      	strh	r3, [r0, #0]
 8000302:	4660      	mov	r0, ip
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	2a08      	cmp	r2, #8
 800030a:	d313      	bcc.n	8000334 <memcpy+0x114>
 800030c:	078b      	lsls	r3, r1, #30
 800030e:	d08d      	beq.n	800022c <memcpy+0xc>
 8000310:	f010 0303 	ands.w	r3, r0, #3
 8000314:	d08a      	beq.n	800022c <memcpy+0xc>
 8000316:	f1c3 0304 	rsb	r3, r3, #4
 800031a:	1ad2      	subs	r2, r2, r3
 800031c:	07db      	lsls	r3, r3, #31
 800031e:	bf1c      	itt	ne
 8000320:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000324:	f800 3b01 	strbne.w	r3, [r0], #1
 8000328:	d380      	bcc.n	800022c <memcpy+0xc>
 800032a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800032e:	f820 3b02 	strh.w	r3, [r0], #2
 8000332:	e77b      	b.n	800022c <memcpy+0xc>
 8000334:	3a04      	subs	r2, #4
 8000336:	d3d9      	bcc.n	80002ec <memcpy+0xcc>
 8000338:	3a01      	subs	r2, #1
 800033a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800033e:	f800 3b01 	strb.w	r3, [r0], #1
 8000342:	d2f9      	bcs.n	8000338 <memcpy+0x118>
 8000344:	780b      	ldrb	r3, [r1, #0]
 8000346:	7003      	strb	r3, [r0, #0]
 8000348:	784b      	ldrb	r3, [r1, #1]
 800034a:	7043      	strb	r3, [r0, #1]
 800034c:	788b      	ldrb	r3, [r1, #2]
 800034e:	7083      	strb	r3, [r0, #2]
 8000350:	4660      	mov	r0, ip
 8000352:	4770      	bx	lr

08000354 <__aeabi_drsub>:
 8000354:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000358:	e002      	b.n	8000360 <__adddf3>
 800035a:	bf00      	nop

0800035c <__aeabi_dsub>:
 800035c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000360 <__adddf3>:
 8000360:	b530      	push	{r4, r5, lr}
 8000362:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000366:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800036a:	ea94 0f05 	teq	r4, r5
 800036e:	bf08      	it	eq
 8000370:	ea90 0f02 	teqeq	r0, r2
 8000374:	bf1f      	itttt	ne
 8000376:	ea54 0c00 	orrsne.w	ip, r4, r0
 800037a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800037e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000382:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000386:	f000 80e2 	beq.w	800054e <__adddf3+0x1ee>
 800038a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800038e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000392:	bfb8      	it	lt
 8000394:	426d      	neglt	r5, r5
 8000396:	dd0c      	ble.n	80003b2 <__adddf3+0x52>
 8000398:	442c      	add	r4, r5
 800039a:	ea80 0202 	eor.w	r2, r0, r2
 800039e:	ea81 0303 	eor.w	r3, r1, r3
 80003a2:	ea82 0000 	eor.w	r0, r2, r0
 80003a6:	ea83 0101 	eor.w	r1, r3, r1
 80003aa:	ea80 0202 	eor.w	r2, r0, r2
 80003ae:	ea81 0303 	eor.w	r3, r1, r3
 80003b2:	2d36      	cmp	r5, #54	; 0x36
 80003b4:	bf88      	it	hi
 80003b6:	bd30      	pophi	{r4, r5, pc}
 80003b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x70>
 80003ca:	4240      	negs	r0, r0
 80003cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003dc:	d002      	beq.n	80003e4 <__adddf3+0x84>
 80003de:	4252      	negs	r2, r2
 80003e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003e4:	ea94 0f05 	teq	r4, r5
 80003e8:	f000 80a7 	beq.w	800053a <__adddf3+0x1da>
 80003ec:	f1a4 0401 	sub.w	r4, r4, #1
 80003f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80003f4:	db0d      	blt.n	8000412 <__adddf3+0xb2>
 80003f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003fa:	fa22 f205 	lsr.w	r2, r2, r5
 80003fe:	1880      	adds	r0, r0, r2
 8000400:	f141 0100 	adc.w	r1, r1, #0
 8000404:	fa03 f20e 	lsl.w	r2, r3, lr
 8000408:	1880      	adds	r0, r0, r2
 800040a:	fa43 f305 	asr.w	r3, r3, r5
 800040e:	4159      	adcs	r1, r3
 8000410:	e00e      	b.n	8000430 <__adddf3+0xd0>
 8000412:	f1a5 0520 	sub.w	r5, r5, #32
 8000416:	f10e 0e20 	add.w	lr, lr, #32
 800041a:	2a01      	cmp	r2, #1
 800041c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000420:	bf28      	it	cs
 8000422:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000426:	fa43 f305 	asr.w	r3, r3, r5
 800042a:	18c0      	adds	r0, r0, r3
 800042c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	d507      	bpl.n	8000446 <__adddf3+0xe6>
 8000436:	f04f 0e00 	mov.w	lr, #0
 800043a:	f1dc 0c00 	rsbs	ip, ip, #0
 800043e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000442:	eb6e 0101 	sbc.w	r1, lr, r1
 8000446:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800044a:	d31b      	bcc.n	8000484 <__adddf3+0x124>
 800044c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000450:	d30c      	bcc.n	800046c <__adddf3+0x10c>
 8000452:	0849      	lsrs	r1, r1, #1
 8000454:	ea5f 0030 	movs.w	r0, r0, rrx
 8000458:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800045c:	f104 0401 	add.w	r4, r4, #1
 8000460:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000464:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000468:	f080 809a 	bcs.w	80005a0 <__adddf3+0x240>
 800046c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000470:	bf08      	it	eq
 8000472:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000476:	f150 0000 	adcs.w	r0, r0, #0
 800047a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800047e:	ea41 0105 	orr.w	r1, r1, r5
 8000482:	bd30      	pop	{r4, r5, pc}
 8000484:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000488:	4140      	adcs	r0, r0
 800048a:	eb41 0101 	adc.w	r1, r1, r1
 800048e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000492:	f1a4 0401 	sub.w	r4, r4, #1
 8000496:	d1e9      	bne.n	800046c <__adddf3+0x10c>
 8000498:	f091 0f00 	teq	r1, #0
 800049c:	bf04      	itt	eq
 800049e:	4601      	moveq	r1, r0
 80004a0:	2000      	moveq	r0, #0
 80004a2:	fab1 f381 	clz	r3, r1
 80004a6:	bf08      	it	eq
 80004a8:	3320      	addeq	r3, #32
 80004aa:	f1a3 030b 	sub.w	r3, r3, #11
 80004ae:	f1b3 0220 	subs.w	r2, r3, #32
 80004b2:	da0c      	bge.n	80004ce <__adddf3+0x16e>
 80004b4:	320c      	adds	r2, #12
 80004b6:	dd08      	ble.n	80004ca <__adddf3+0x16a>
 80004b8:	f102 0c14 	add.w	ip, r2, #20
 80004bc:	f1c2 020c 	rsb	r2, r2, #12
 80004c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80004c4:	fa21 f102 	lsr.w	r1, r1, r2
 80004c8:	e00c      	b.n	80004e4 <__adddf3+0x184>
 80004ca:	f102 0214 	add.w	r2, r2, #20
 80004ce:	bfd8      	it	le
 80004d0:	f1c2 0c20 	rsble	ip, r2, #32
 80004d4:	fa01 f102 	lsl.w	r1, r1, r2
 80004d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004dc:	bfdc      	itt	le
 80004de:	ea41 010c 	orrle.w	r1, r1, ip
 80004e2:	4090      	lslle	r0, r2
 80004e4:	1ae4      	subs	r4, r4, r3
 80004e6:	bfa2      	ittt	ge
 80004e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004ec:	4329      	orrge	r1, r5
 80004ee:	bd30      	popge	{r4, r5, pc}
 80004f0:	ea6f 0404 	mvn.w	r4, r4
 80004f4:	3c1f      	subs	r4, #31
 80004f6:	da1c      	bge.n	8000532 <__adddf3+0x1d2>
 80004f8:	340c      	adds	r4, #12
 80004fa:	dc0e      	bgt.n	800051a <__adddf3+0x1ba>
 80004fc:	f104 0414 	add.w	r4, r4, #20
 8000500:	f1c4 0220 	rsb	r2, r4, #32
 8000504:	fa20 f004 	lsr.w	r0, r0, r4
 8000508:	fa01 f302 	lsl.w	r3, r1, r2
 800050c:	ea40 0003 	orr.w	r0, r0, r3
 8000510:	fa21 f304 	lsr.w	r3, r1, r4
 8000514:	ea45 0103 	orr.w	r1, r5, r3
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	f1c4 040c 	rsb	r4, r4, #12
 800051e:	f1c4 0220 	rsb	r2, r4, #32
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 f304 	lsl.w	r3, r1, r4
 800052a:	ea40 0003 	orr.w	r0, r0, r3
 800052e:	4629      	mov	r1, r5
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	fa21 f004 	lsr.w	r0, r1, r4
 8000536:	4629      	mov	r1, r5
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	f094 0f00 	teq	r4, #0
 800053e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000542:	bf06      	itte	eq
 8000544:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000548:	3401      	addeq	r4, #1
 800054a:	3d01      	subne	r5, #1
 800054c:	e74e      	b.n	80003ec <__adddf3+0x8c>
 800054e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000552:	bf18      	it	ne
 8000554:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000558:	d029      	beq.n	80005ae <__adddf3+0x24e>
 800055a:	ea94 0f05 	teq	r4, r5
 800055e:	bf08      	it	eq
 8000560:	ea90 0f02 	teqeq	r0, r2
 8000564:	d005      	beq.n	8000572 <__adddf3+0x212>
 8000566:	ea54 0c00 	orrs.w	ip, r4, r0
 800056a:	bf04      	itt	eq
 800056c:	4619      	moveq	r1, r3
 800056e:	4610      	moveq	r0, r2
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	ea91 0f03 	teq	r1, r3
 8000576:	bf1e      	ittt	ne
 8000578:	2100      	movne	r1, #0
 800057a:	2000      	movne	r0, #0
 800057c:	bd30      	popne	{r4, r5, pc}
 800057e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000582:	d105      	bne.n	8000590 <__adddf3+0x230>
 8000584:	0040      	lsls	r0, r0, #1
 8000586:	4149      	adcs	r1, r1
 8000588:	bf28      	it	cs
 800058a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800058e:	bd30      	pop	{r4, r5, pc}
 8000590:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000594:	bf3c      	itt	cc
 8000596:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800059a:	bd30      	popcc	{r4, r5, pc}
 800059c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005a8:	f04f 0000 	mov.w	r0, #0
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf1a      	itte	ne
 80005b4:	4619      	movne	r1, r3
 80005b6:	4610      	movne	r0, r2
 80005b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005bc:	bf1c      	itt	ne
 80005be:	460b      	movne	r3, r1
 80005c0:	4602      	movne	r2, r0
 80005c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005c6:	bf06      	itte	eq
 80005c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005cc:	ea91 0f03 	teqeq	r1, r3
 80005d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005d4:	bd30      	pop	{r4, r5, pc}
 80005d6:	bf00      	nop

080005d8 <__aeabi_ui2d>:
 80005d8:	f090 0f00 	teq	r0, #0
 80005dc:	bf04      	itt	eq
 80005de:	2100      	moveq	r1, #0
 80005e0:	4770      	bxeq	lr
 80005e2:	b530      	push	{r4, r5, lr}
 80005e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ec:	f04f 0500 	mov.w	r5, #0
 80005f0:	f04f 0100 	mov.w	r1, #0
 80005f4:	e750      	b.n	8000498 <__adddf3+0x138>
 80005f6:	bf00      	nop

080005f8 <__aeabi_i2d>:
 80005f8:	f090 0f00 	teq	r0, #0
 80005fc:	bf04      	itt	eq
 80005fe:	2100      	moveq	r1, #0
 8000600:	4770      	bxeq	lr
 8000602:	b530      	push	{r4, r5, lr}
 8000604:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000608:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000610:	bf48      	it	mi
 8000612:	4240      	negmi	r0, r0
 8000614:	f04f 0100 	mov.w	r1, #0
 8000618:	e73e      	b.n	8000498 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_f2d>:
 800061c:	0042      	lsls	r2, r0, #1
 800061e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000622:	ea4f 0131 	mov.w	r1, r1, rrx
 8000626:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800062a:	bf1f      	itttt	ne
 800062c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000630:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000634:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000638:	4770      	bxne	lr
 800063a:	f092 0f00 	teq	r2, #0
 800063e:	bf14      	ite	ne
 8000640:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000644:	4770      	bxeq	lr
 8000646:	b530      	push	{r4, r5, lr}
 8000648:	f44f 7460 	mov.w	r4, #896	; 0x380
 800064c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	e720      	b.n	8000498 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_ul2d>:
 8000658:	ea50 0201 	orrs.w	r2, r0, r1
 800065c:	bf08      	it	eq
 800065e:	4770      	bxeq	lr
 8000660:	b530      	push	{r4, r5, lr}
 8000662:	f04f 0500 	mov.w	r5, #0
 8000666:	e00a      	b.n	800067e <__aeabi_l2d+0x16>

08000668 <__aeabi_l2d>:
 8000668:	ea50 0201 	orrs.w	r2, r0, r1
 800066c:	bf08      	it	eq
 800066e:	4770      	bxeq	lr
 8000670:	b530      	push	{r4, r5, lr}
 8000672:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000676:	d502      	bpl.n	800067e <__aeabi_l2d+0x16>
 8000678:	4240      	negs	r0, r0
 800067a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800067e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000682:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000686:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800068a:	f43f aedc 	beq.w	8000446 <__adddf3+0xe6>
 800068e:	f04f 0203 	mov.w	r2, #3
 8000692:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000696:	bf18      	it	ne
 8000698:	3203      	addne	r2, #3
 800069a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800069e:	bf18      	it	ne
 80006a0:	3203      	addne	r2, #3
 80006a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006a6:	f1c2 0320 	rsb	r3, r2, #32
 80006aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80006ae:	fa20 f002 	lsr.w	r0, r0, r2
 80006b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80006b6:	ea40 000e 	orr.w	r0, r0, lr
 80006ba:	fa21 f102 	lsr.w	r1, r1, r2
 80006be:	4414      	add	r4, r2
 80006c0:	e6c1      	b.n	8000446 <__adddf3+0xe6>
 80006c2:	bf00      	nop

080006c4 <__aeabi_dmul>:
 80006c4:	b570      	push	{r4, r5, r6, lr}
 80006c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006d2:	bf1d      	ittte	ne
 80006d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006d8:	ea94 0f0c 	teqne	r4, ip
 80006dc:	ea95 0f0c 	teqne	r5, ip
 80006e0:	f000 f8de 	bleq	80008a0 <__aeabi_dmul+0x1dc>
 80006e4:	442c      	add	r4, r5
 80006e6:	ea81 0603 	eor.w	r6, r1, r3
 80006ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006f6:	bf18      	it	ne
 80006f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000704:	d038      	beq.n	8000778 <__aeabi_dmul+0xb4>
 8000706:	fba0 ce02 	umull	ip, lr, r0, r2
 800070a:	f04f 0500 	mov.w	r5, #0
 800070e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000712:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000716:	fbe0 e503 	umlal	lr, r5, r0, r3
 800071a:	f04f 0600 	mov.w	r6, #0
 800071e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000722:	f09c 0f00 	teq	ip, #0
 8000726:	bf18      	it	ne
 8000728:	f04e 0e01 	orrne.w	lr, lr, #1
 800072c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000730:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000734:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000738:	d204      	bcs.n	8000744 <__aeabi_dmul+0x80>
 800073a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800073e:	416d      	adcs	r5, r5
 8000740:	eb46 0606 	adc.w	r6, r6, r6
 8000744:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000748:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800074c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000750:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000754:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000758:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800075c:	bf88      	it	hi
 800075e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000762:	d81e      	bhi.n	80007a2 <__aeabi_dmul+0xde>
 8000764:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000768:	bf08      	it	eq
 800076a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800076e:	f150 0000 	adcs.w	r0, r0, #0
 8000772:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800077c:	ea46 0101 	orr.w	r1, r6, r1
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800078c:	bfc2      	ittt	gt
 800078e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000792:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000796:	bd70      	popgt	{r4, r5, r6, pc}
 8000798:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800079c:	f04f 0e00 	mov.w	lr, #0
 80007a0:	3c01      	subs	r4, #1
 80007a2:	f300 80ab 	bgt.w	80008fc <__aeabi_dmul+0x238>
 80007a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007aa:	bfde      	ittt	le
 80007ac:	2000      	movle	r0, #0
 80007ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007b2:	bd70      	pople	{r4, r5, r6, pc}
 80007b4:	f1c4 0400 	rsb	r4, r4, #0
 80007b8:	3c20      	subs	r4, #32
 80007ba:	da35      	bge.n	8000828 <__aeabi_dmul+0x164>
 80007bc:	340c      	adds	r4, #12
 80007be:	dc1b      	bgt.n	80007f8 <__aeabi_dmul+0x134>
 80007c0:	f104 0414 	add.w	r4, r4, #20
 80007c4:	f1c4 0520 	rsb	r5, r4, #32
 80007c8:	fa00 f305 	lsl.w	r3, r0, r5
 80007cc:	fa20 f004 	lsr.w	r0, r0, r4
 80007d0:	fa01 f205 	lsl.w	r2, r1, r5
 80007d4:	ea40 0002 	orr.w	r0, r0, r2
 80007d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007e4:	fa21 f604 	lsr.w	r6, r1, r4
 80007e8:	eb42 0106 	adc.w	r1, r2, r6
 80007ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f0:	bf08      	it	eq
 80007f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f6:	bd70      	pop	{r4, r5, r6, pc}
 80007f8:	f1c4 040c 	rsb	r4, r4, #12
 80007fc:	f1c4 0520 	rsb	r5, r4, #32
 8000800:	fa00 f304 	lsl.w	r3, r0, r4
 8000804:	fa20 f005 	lsr.w	r0, r0, r5
 8000808:	fa01 f204 	lsl.w	r2, r1, r4
 800080c:	ea40 0002 	orr.w	r0, r0, r2
 8000810:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	f141 0100 	adc.w	r1, r1, #0
 800081c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000820:	bf08      	it	eq
 8000822:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000826:	bd70      	pop	{r4, r5, r6, pc}
 8000828:	f1c4 0520 	rsb	r5, r4, #32
 800082c:	fa00 f205 	lsl.w	r2, r0, r5
 8000830:	ea4e 0e02 	orr.w	lr, lr, r2
 8000834:	fa20 f304 	lsr.w	r3, r0, r4
 8000838:	fa01 f205 	lsl.w	r2, r1, r5
 800083c:	ea43 0302 	orr.w	r3, r3, r2
 8000840:	fa21 f004 	lsr.w	r0, r1, r4
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	fa21 f204 	lsr.w	r2, r1, r4
 800084c:	ea20 0002 	bic.w	r0, r0, r2
 8000850:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000854:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000858:	bf08      	it	eq
 800085a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f094 0f00 	teq	r4, #0
 8000864:	d10f      	bne.n	8000886 <__aeabi_dmul+0x1c2>
 8000866:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800086a:	0040      	lsls	r0, r0, #1
 800086c:	eb41 0101 	adc.w	r1, r1, r1
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf08      	it	eq
 8000876:	3c01      	subeq	r4, #1
 8000878:	d0f7      	beq.n	800086a <__aeabi_dmul+0x1a6>
 800087a:	ea41 0106 	orr.w	r1, r1, r6
 800087e:	f095 0f00 	teq	r5, #0
 8000882:	bf18      	it	ne
 8000884:	4770      	bxne	lr
 8000886:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800088a:	0052      	lsls	r2, r2, #1
 800088c:	eb43 0303 	adc.w	r3, r3, r3
 8000890:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000894:	bf08      	it	eq
 8000896:	3d01      	subeq	r5, #1
 8000898:	d0f7      	beq.n	800088a <__aeabi_dmul+0x1c6>
 800089a:	ea43 0306 	orr.w	r3, r3, r6
 800089e:	4770      	bx	lr
 80008a0:	ea94 0f0c 	teq	r4, ip
 80008a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008a8:	bf18      	it	ne
 80008aa:	ea95 0f0c 	teqne	r5, ip
 80008ae:	d00c      	beq.n	80008ca <__aeabi_dmul+0x206>
 80008b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b4:	bf18      	it	ne
 80008b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ba:	d1d1      	bne.n	8000860 <__aeabi_dmul+0x19c>
 80008bc:	ea81 0103 	eor.w	r1, r1, r3
 80008c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008c4:	f04f 0000 	mov.w	r0, #0
 80008c8:	bd70      	pop	{r4, r5, r6, pc}
 80008ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008ce:	bf06      	itte	eq
 80008d0:	4610      	moveq	r0, r2
 80008d2:	4619      	moveq	r1, r3
 80008d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d8:	d019      	beq.n	800090e <__aeabi_dmul+0x24a>
 80008da:	ea94 0f0c 	teq	r4, ip
 80008de:	d102      	bne.n	80008e6 <__aeabi_dmul+0x222>
 80008e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008e4:	d113      	bne.n	800090e <__aeabi_dmul+0x24a>
 80008e6:	ea95 0f0c 	teq	r5, ip
 80008ea:	d105      	bne.n	80008f8 <__aeabi_dmul+0x234>
 80008ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008f0:	bf1c      	itt	ne
 80008f2:	4610      	movne	r0, r2
 80008f4:	4619      	movne	r1, r3
 80008f6:	d10a      	bne.n	800090e <__aeabi_dmul+0x24a>
 80008f8:	ea81 0103 	eor.w	r1, r1, r3
 80008fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000900:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000904:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000908:	f04f 0000 	mov.w	r0, #0
 800090c:	bd70      	pop	{r4, r5, r6, pc}
 800090e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000912:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000916:	bd70      	pop	{r4, r5, r6, pc}

08000918 <__aeabi_ddiv>:
 8000918:	b570      	push	{r4, r5, r6, lr}
 800091a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800091e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000922:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000926:	bf1d      	ittte	ne
 8000928:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800092c:	ea94 0f0c 	teqne	r4, ip
 8000930:	ea95 0f0c 	teqne	r5, ip
 8000934:	f000 f8a7 	bleq	8000a86 <__aeabi_ddiv+0x16e>
 8000938:	eba4 0405 	sub.w	r4, r4, r5
 800093c:	ea81 0e03 	eor.w	lr, r1, r3
 8000940:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000944:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000948:	f000 8088 	beq.w	8000a5c <__aeabi_ddiv+0x144>
 800094c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000950:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000954:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000958:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800095c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000960:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000964:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000968:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800096c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000970:	429d      	cmp	r5, r3
 8000972:	bf08      	it	eq
 8000974:	4296      	cmpeq	r6, r2
 8000976:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800097a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800097e:	d202      	bcs.n	8000986 <__aeabi_ddiv+0x6e>
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	1ab6      	subs	r6, r6, r2
 8000988:	eb65 0503 	sbc.w	r5, r5, r3
 800098c:	085b      	lsrs	r3, r3, #1
 800098e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000992:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000996:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800099a:	ebb6 0e02 	subs.w	lr, r6, r2
 800099e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009a2:	bf22      	ittt	cs
 80009a4:	1ab6      	subcs	r6, r6, r2
 80009a6:	4675      	movcs	r5, lr
 80009a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80009ac:	085b      	lsrs	r3, r3, #1
 80009ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ba:	bf22      	ittt	cs
 80009bc:	1ab6      	subcs	r6, r6, r2
 80009be:	4675      	movcs	r5, lr
 80009c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009c4:	085b      	lsrs	r3, r3, #1
 80009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d2:	bf22      	ittt	cs
 80009d4:	1ab6      	subcs	r6, r6, r2
 80009d6:	4675      	movcs	r5, lr
 80009d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009dc:	085b      	lsrs	r3, r3, #1
 80009de:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80009e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ea:	bf22      	ittt	cs
 80009ec:	1ab6      	subcs	r6, r6, r2
 80009ee:	4675      	movcs	r5, lr
 80009f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80009f8:	d018      	beq.n	8000a2c <__aeabi_ddiv+0x114>
 80009fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a02:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a06:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a0a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a0e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a12:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a16:	d1c0      	bne.n	800099a <__aeabi_ddiv+0x82>
 8000a18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a1c:	d10b      	bne.n	8000a36 <__aeabi_ddiv+0x11e>
 8000a1e:	ea41 0100 	orr.w	r1, r1, r0
 8000a22:	f04f 0000 	mov.w	r0, #0
 8000a26:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a2a:	e7b6      	b.n	800099a <__aeabi_ddiv+0x82>
 8000a2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a30:	bf04      	itt	eq
 8000a32:	4301      	orreq	r1, r0
 8000a34:	2000      	moveq	r0, #0
 8000a36:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a3a:	bf88      	it	hi
 8000a3c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a40:	f63f aeaf 	bhi.w	80007a2 <__aeabi_dmul+0xde>
 8000a44:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a48:	bf04      	itt	eq
 8000a4a:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a4e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a52:	f150 0000 	adcs.w	r0, r0, #0
 8000a56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a5a:	bd70      	pop	{r4, r5, r6, pc}
 8000a5c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a60:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a64:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a68:	bfc2      	ittt	gt
 8000a6a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a6e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a72:	bd70      	popgt	{r4, r5, r6, pc}
 8000a74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a78:	f04f 0e00 	mov.w	lr, #0
 8000a7c:	3c01      	subs	r4, #1
 8000a7e:	e690      	b.n	80007a2 <__aeabi_dmul+0xde>
 8000a80:	ea45 0e06 	orr.w	lr, r5, r6
 8000a84:	e68d      	b.n	80007a2 <__aeabi_dmul+0xde>
 8000a86:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a8a:	ea94 0f0c 	teq	r4, ip
 8000a8e:	bf08      	it	eq
 8000a90:	ea95 0f0c 	teqeq	r5, ip
 8000a94:	f43f af3b 	beq.w	800090e <__aeabi_dmul+0x24a>
 8000a98:	ea94 0f0c 	teq	r4, ip
 8000a9c:	d10a      	bne.n	8000ab4 <__aeabi_ddiv+0x19c>
 8000a9e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000aa2:	f47f af34 	bne.w	800090e <__aeabi_dmul+0x24a>
 8000aa6:	ea95 0f0c 	teq	r5, ip
 8000aaa:	f47f af25 	bne.w	80008f8 <__aeabi_dmul+0x234>
 8000aae:	4610      	mov	r0, r2
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	e72c      	b.n	800090e <__aeabi_dmul+0x24a>
 8000ab4:	ea95 0f0c 	teq	r5, ip
 8000ab8:	d106      	bne.n	8000ac8 <__aeabi_ddiv+0x1b0>
 8000aba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000abe:	f43f aefd 	beq.w	80008bc <__aeabi_dmul+0x1f8>
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	e722      	b.n	800090e <__aeabi_dmul+0x24a>
 8000ac8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000acc:	bf18      	it	ne
 8000ace:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ad2:	f47f aec5 	bne.w	8000860 <__aeabi_dmul+0x19c>
 8000ad6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ada:	f47f af0d 	bne.w	80008f8 <__aeabi_dmul+0x234>
 8000ade:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ae2:	f47f aeeb 	bne.w	80008bc <__aeabi_dmul+0x1f8>
 8000ae6:	e712      	b.n	800090e <__aeabi_dmul+0x24a>

08000ae8 <__gedf2>:
 8000ae8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000aec:	e006      	b.n	8000afc <__cmpdf2+0x4>
 8000aee:	bf00      	nop

08000af0 <__ledf2>:
 8000af0:	f04f 0c01 	mov.w	ip, #1
 8000af4:	e002      	b.n	8000afc <__cmpdf2+0x4>
 8000af6:	bf00      	nop

08000af8 <__cmpdf2>:
 8000af8:	f04f 0c01 	mov.w	ip, #1
 8000afc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b0c:	bf18      	it	ne
 8000b0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b12:	d01b      	beq.n	8000b4c <__cmpdf2+0x54>
 8000b14:	b001      	add	sp, #4
 8000b16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b1a:	bf0c      	ite	eq
 8000b1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b20:	ea91 0f03 	teqne	r1, r3
 8000b24:	bf02      	ittt	eq
 8000b26:	ea90 0f02 	teqeq	r0, r2
 8000b2a:	2000      	moveq	r0, #0
 8000b2c:	4770      	bxeq	lr
 8000b2e:	f110 0f00 	cmn.w	r0, #0
 8000b32:	ea91 0f03 	teq	r1, r3
 8000b36:	bf58      	it	pl
 8000b38:	4299      	cmppl	r1, r3
 8000b3a:	bf08      	it	eq
 8000b3c:	4290      	cmpeq	r0, r2
 8000b3e:	bf2c      	ite	cs
 8000b40:	17d8      	asrcs	r0, r3, #31
 8000b42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b46:	f040 0001 	orr.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__cmpdf2+0x64>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d107      	bne.n	8000b6c <__cmpdf2+0x74>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d1d6      	bne.n	8000b14 <__cmpdf2+0x1c>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d0d3      	beq.n	8000b14 <__cmpdf2+0x1c>
 8000b6c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_cdrcmple>:
 8000b74:	4684      	mov	ip, r0
 8000b76:	4610      	mov	r0, r2
 8000b78:	4662      	mov	r2, ip
 8000b7a:	468c      	mov	ip, r1
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4663      	mov	r3, ip
 8000b80:	e000      	b.n	8000b84 <__aeabi_cdcmpeq>
 8000b82:	bf00      	nop

08000b84 <__aeabi_cdcmpeq>:
 8000b84:	b501      	push	{r0, lr}
 8000b86:	f7ff ffb7 	bl	8000af8 <__cmpdf2>
 8000b8a:	2800      	cmp	r0, #0
 8000b8c:	bf48      	it	mi
 8000b8e:	f110 0f00 	cmnmi.w	r0, #0
 8000b92:	bd01      	pop	{r0, pc}

08000b94 <__aeabi_dcmpeq>:
 8000b94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b98:	f7ff fff4 	bl	8000b84 <__aeabi_cdcmpeq>
 8000b9c:	bf0c      	ite	eq
 8000b9e:	2001      	moveq	r0, #1
 8000ba0:	2000      	movne	r0, #0
 8000ba2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_dcmplt>:
 8000ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bac:	f7ff ffea 	bl	8000b84 <__aeabi_cdcmpeq>
 8000bb0:	bf34      	ite	cc
 8000bb2:	2001      	movcc	r0, #1
 8000bb4:	2000      	movcs	r0, #0
 8000bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bba:	bf00      	nop

08000bbc <__aeabi_dcmple>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff ffe0 	bl	8000b84 <__aeabi_cdcmpeq>
 8000bc4:	bf94      	ite	ls
 8000bc6:	2001      	movls	r0, #1
 8000bc8:	2000      	movhi	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_dcmpge>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffce 	bl	8000b74 <__aeabi_cdrcmple>
 8000bd8:	bf94      	ite	ls
 8000bda:	2001      	movls	r0, #1
 8000bdc:	2000      	movhi	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_dcmpgt>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffc4 	bl	8000b74 <__aeabi_cdrcmple>
 8000bec:	bf34      	ite	cc
 8000bee:	2001      	movcc	r0, #1
 8000bf0:	2000      	movcs	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2iz>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d215      	bcs.n	8000c2e <__aeabi_d2iz+0x36>
 8000c02:	d511      	bpl.n	8000c28 <__aeabi_d2iz+0x30>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d912      	bls.n	8000c34 <__aeabi_d2iz+0x3c>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c22:	bf18      	it	ne
 8000c24:	4240      	negne	r0, r0
 8000c26:	4770      	bx	lr
 8000c28:	f04f 0000 	mov.w	r0, #0
 8000c2c:	4770      	bx	lr
 8000c2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c32:	d105      	bne.n	8000c40 <__aeabi_d2iz+0x48>
 8000c34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	bf08      	it	eq
 8000c3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b83c 	b.w	8000cd8 <__aeabi_idiv0>
 8000c60:	b082      	sub	sp, #8
 8000c62:	46ec      	mov	ip, sp
 8000c64:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c68:	f000 f81e 	bl	8000ca8 <__gnu_uldivmod_helper>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	b002      	add	sp, #8
 8000c72:	bc0c      	pop	{r2, r3}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__gnu_ldivmod_helper>:
 8000c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c7c:	9c06      	ldr	r4, [sp, #24]
 8000c7e:	4615      	mov	r5, r2
 8000c80:	4606      	mov	r6, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	4698      	mov	r8, r3
 8000c86:	f000 f829 	bl	8000cdc <__divdi3>
 8000c8a:	fb05 f301 	mul.w	r3, r5, r1
 8000c8e:	fb00 3808 	mla	r8, r0, r8, r3
 8000c92:	fba5 2300 	umull	r2, r3, r5, r0
 8000c96:	1ab2      	subs	r2, r6, r2
 8000c98:	4443      	add	r3, r8
 8000c9a:	eb67 0303 	sbc.w	r3, r7, r3
 8000c9e:	e9c4 2300 	strd	r2, r3, [r4]
 8000ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ca6:	bf00      	nop

08000ca8 <__gnu_uldivmod_helper>:
 8000ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cac:	9c06      	ldr	r4, [sp, #24]
 8000cae:	4690      	mov	r8, r2
 8000cb0:	4606      	mov	r6, r0
 8000cb2:	460f      	mov	r7, r1
 8000cb4:	461d      	mov	r5, r3
 8000cb6:	f000 f95f 	bl	8000f78 <__udivdi3>
 8000cba:	fb00 f505 	mul.w	r5, r0, r5
 8000cbe:	fba0 2308 	umull	r2, r3, r0, r8
 8000cc2:	fb08 5501 	mla	r5, r8, r1, r5
 8000cc6:	1ab2      	subs	r2, r6, r2
 8000cc8:	442b      	add	r3, r5
 8000cca:	eb67 0303 	sbc.w	r3, r7, r3
 8000cce:	e9c4 2300 	strd	r2, r3, [r4]
 8000cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_idiv0>:
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop

08000cdc <__divdi3>:
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ce2:	f2c0 80a6 	blt.w	8000e32 <__divdi3+0x156>
 8000ce6:	2600      	movs	r6, #0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	f2c0 809c 	blt.w	8000e26 <__divdi3+0x14a>
 8000cee:	4688      	mov	r8, r1
 8000cf0:	4694      	mov	ip, r2
 8000cf2:	469e      	mov	lr, r3
 8000cf4:	4615      	mov	r5, r2
 8000cf6:	4604      	mov	r4, r0
 8000cf8:	460f      	mov	r7, r1
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d13d      	bne.n	8000d7a <__divdi3+0x9e>
 8000cfe:	428a      	cmp	r2, r1
 8000d00:	d959      	bls.n	8000db6 <__divdi3+0xda>
 8000d02:	fab2 f382 	clz	r3, r2
 8000d06:	b13b      	cbz	r3, 8000d18 <__divdi3+0x3c>
 8000d08:	f1c3 0220 	rsb	r2, r3, #32
 8000d0c:	409f      	lsls	r7, r3
 8000d0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d12:	409d      	lsls	r5, r3
 8000d14:	4317      	orrs	r7, r2
 8000d16:	409c      	lsls	r4, r3
 8000d18:	0c29      	lsrs	r1, r5, #16
 8000d1a:	0c22      	lsrs	r2, r4, #16
 8000d1c:	fbb7 fef1 	udiv	lr, r7, r1
 8000d20:	b2a8      	uxth	r0, r5
 8000d22:	fb01 771e 	mls	r7, r1, lr, r7
 8000d26:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8000d2a:	fb00 f30e 	mul.w	r3, r0, lr
 8000d2e:	42bb      	cmp	r3, r7
 8000d30:	d90a      	bls.n	8000d48 <__divdi3+0x6c>
 8000d32:	197f      	adds	r7, r7, r5
 8000d34:	f10e 32ff 	add.w	r2, lr, #4294967295	; 0xffffffff
 8000d38:	f080 8105 	bcs.w	8000f46 <__divdi3+0x26a>
 8000d3c:	42bb      	cmp	r3, r7
 8000d3e:	f240 8102 	bls.w	8000f46 <__divdi3+0x26a>
 8000d42:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d46:	442f      	add	r7, r5
 8000d48:	1aff      	subs	r7, r7, r3
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb7 f3f1 	udiv	r3, r7, r1
 8000d50:	fb01 7713 	mls	r7, r1, r3, r7
 8000d54:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8000d58:	fb00 f003 	mul.w	r0, r0, r3
 8000d5c:	42b8      	cmp	r0, r7
 8000d5e:	d908      	bls.n	8000d72 <__divdi3+0x96>
 8000d60:	197f      	adds	r7, r7, r5
 8000d62:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8000d66:	f080 80f0 	bcs.w	8000f4a <__divdi3+0x26e>
 8000d6a:	42b8      	cmp	r0, r7
 8000d6c:	f240 80ed 	bls.w	8000f4a <__divdi3+0x26e>
 8000d70:	3b02      	subs	r3, #2
 8000d72:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000d76:	2200      	movs	r2, #0
 8000d78:	e003      	b.n	8000d82 <__divdi3+0xa6>
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d90f      	bls.n	8000d9e <__divdi3+0xc2>
 8000d7e:	2200      	movs	r2, #0
 8000d80:	4613      	mov	r3, r2
 8000d82:	1c34      	adds	r4, r6, #0
 8000d84:	bf18      	it	ne
 8000d86:	2401      	movne	r4, #1
 8000d88:	4260      	negs	r0, r4
 8000d8a:	f04f 0500 	mov.w	r5, #0
 8000d8e:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 8000d92:	4058      	eors	r0, r3
 8000d94:	4051      	eors	r1, r2
 8000d96:	1900      	adds	r0, r0, r4
 8000d98:	4169      	adcs	r1, r5
 8000d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d9e:	fab3 f283 	clz	r2, r3
 8000da2:	2a00      	cmp	r2, #0
 8000da4:	f040 8086 	bne.w	8000eb4 <__divdi3+0x1d8>
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d302      	bcc.n	8000db2 <__divdi3+0xd6>
 8000dac:	4584      	cmp	ip, r0
 8000dae:	f200 80db 	bhi.w	8000f68 <__divdi3+0x28c>
 8000db2:	2301      	movs	r3, #1
 8000db4:	e7e5      	b.n	8000d82 <__divdi3+0xa6>
 8000db6:	b912      	cbnz	r2, 8000dbe <__divdi3+0xe2>
 8000db8:	2301      	movs	r3, #1
 8000dba:	fbb3 f5f2 	udiv	r5, r3, r2
 8000dbe:	fab5 f085 	clz	r0, r5
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	d13b      	bne.n	8000e3e <__divdi3+0x162>
 8000dc6:	1b78      	subs	r0, r7, r5
 8000dc8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dcc:	fa1f fc85 	uxth.w	ip, r5
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	fbb0 f8fe 	udiv	r8, r0, lr
 8000dd6:	0c21      	lsrs	r1, r4, #16
 8000dd8:	fb0e 0718 	mls	r7, lr, r8, r0
 8000ddc:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 8000de0:	fb0c f308 	mul.w	r3, ip, r8
 8000de4:	42bb      	cmp	r3, r7
 8000de6:	d907      	bls.n	8000df8 <__divdi3+0x11c>
 8000de8:	197f      	adds	r7, r7, r5
 8000dea:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8000dee:	d202      	bcs.n	8000df6 <__divdi3+0x11a>
 8000df0:	42bb      	cmp	r3, r7
 8000df2:	f200 80bd 	bhi.w	8000f70 <__divdi3+0x294>
 8000df6:	4688      	mov	r8, r1
 8000df8:	1aff      	subs	r7, r7, r3
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb7 f3fe 	udiv	r3, r7, lr
 8000e00:	fb0e 7713 	mls	r7, lr, r3, r7
 8000e04:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8000e08:	fb0c fc03 	mul.w	ip, ip, r3
 8000e0c:	45bc      	cmp	ip, r7
 8000e0e:	d907      	bls.n	8000e20 <__divdi3+0x144>
 8000e10:	197f      	adds	r7, r7, r5
 8000e12:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8000e16:	d202      	bcs.n	8000e1e <__divdi3+0x142>
 8000e18:	45bc      	cmp	ip, r7
 8000e1a:	f200 80a7 	bhi.w	8000f6c <__divdi3+0x290>
 8000e1e:	460b      	mov	r3, r1
 8000e20:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e24:	e7ad      	b.n	8000d82 <__divdi3+0xa6>
 8000e26:	4252      	negs	r2, r2
 8000e28:	ea6f 0606 	mvn.w	r6, r6
 8000e2c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e30:	e75d      	b.n	8000cee <__divdi3+0x12>
 8000e32:	4240      	negs	r0, r0
 8000e34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e38:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000e3c:	e754      	b.n	8000ce8 <__divdi3+0xc>
 8000e3e:	f1c0 0220 	rsb	r2, r0, #32
 8000e42:	fa24 f102 	lsr.w	r1, r4, r2
 8000e46:	fa07 f300 	lsl.w	r3, r7, r0
 8000e4a:	4085      	lsls	r5, r0
 8000e4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e50:	40d7      	lsrs	r7, r2
 8000e52:	4319      	orrs	r1, r3
 8000e54:	fbb7 f2fe 	udiv	r2, r7, lr
 8000e58:	0c0b      	lsrs	r3, r1, #16
 8000e5a:	fb0e 7712 	mls	r7, lr, r2, r7
 8000e5e:	fa1f fc85 	uxth.w	ip, r5
 8000e62:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8000e66:	fb0c f702 	mul.w	r7, ip, r2
 8000e6a:	429f      	cmp	r7, r3
 8000e6c:	fa04 f400 	lsl.w	r4, r4, r0
 8000e70:	d907      	bls.n	8000e82 <__divdi3+0x1a6>
 8000e72:	195b      	adds	r3, r3, r5
 8000e74:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 8000e78:	d274      	bcs.n	8000f64 <__divdi3+0x288>
 8000e7a:	429f      	cmp	r7, r3
 8000e7c:	d972      	bls.n	8000f64 <__divdi3+0x288>
 8000e7e:	3a02      	subs	r2, #2
 8000e80:	442b      	add	r3, r5
 8000e82:	1bdf      	subs	r7, r3, r7
 8000e84:	b289      	uxth	r1, r1
 8000e86:	fbb7 f8fe 	udiv	r8, r7, lr
 8000e8a:	fb0e 7318 	mls	r3, lr, r8, r7
 8000e8e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e92:	fb0c f708 	mul.w	r7, ip, r8
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__divdi3+0x1d0>
 8000e9a:	195b      	adds	r3, r3, r5
 8000e9c:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8000ea0:	d25c      	bcs.n	8000f5c <__divdi3+0x280>
 8000ea2:	429f      	cmp	r7, r3
 8000ea4:	d95a      	bls.n	8000f5c <__divdi3+0x280>
 8000ea6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eaa:	442b      	add	r3, r5
 8000eac:	1bd8      	subs	r0, r3, r7
 8000eae:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8000eb2:	e78e      	b.n	8000dd2 <__divdi3+0xf6>
 8000eb4:	f1c2 0320 	rsb	r3, r2, #32
 8000eb8:	fa2c f103 	lsr.w	r1, ip, r3
 8000ebc:	fa0e fe02 	lsl.w	lr, lr, r2
 8000ec0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ec4:	ea41 0e0e 	orr.w	lr, r1, lr
 8000ec8:	fa08 f002 	lsl.w	r0, r8, r2
 8000ecc:	fa28 f103 	lsr.w	r1, r8, r3
 8000ed0:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8000ed4:	4338      	orrs	r0, r7
 8000ed6:	fbb1 f8f5 	udiv	r8, r1, r5
 8000eda:	0c03      	lsrs	r3, r0, #16
 8000edc:	fb05 1118 	mls	r1, r5, r8, r1
 8000ee0:	fa1f f78e 	uxth.w	r7, lr
 8000ee4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ee8:	fb07 f308 	mul.w	r3, r7, r8
 8000eec:	428b      	cmp	r3, r1
 8000eee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef2:	d909      	bls.n	8000f08 <__divdi3+0x22c>
 8000ef4:	eb11 010e 	adds.w	r1, r1, lr
 8000ef8:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 8000efc:	d230      	bcs.n	8000f60 <__divdi3+0x284>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d92e      	bls.n	8000f60 <__divdi3+0x284>
 8000f02:	f1a8 0802 	sub.w	r8, r8, #2
 8000f06:	4471      	add	r1, lr
 8000f08:	1ac9      	subs	r1, r1, r3
 8000f0a:	b280      	uxth	r0, r0
 8000f0c:	fbb1 f3f5 	udiv	r3, r1, r5
 8000f10:	fb05 1113 	mls	r1, r5, r3, r1
 8000f14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f18:	fb07 f703 	mul.w	r7, r7, r3
 8000f1c:	428f      	cmp	r7, r1
 8000f1e:	d908      	bls.n	8000f32 <__divdi3+0x256>
 8000f20:	eb11 010e 	adds.w	r1, r1, lr
 8000f24:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000f28:	d216      	bcs.n	8000f58 <__divdi3+0x27c>
 8000f2a:	428f      	cmp	r7, r1
 8000f2c:	d914      	bls.n	8000f58 <__divdi3+0x27c>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	4471      	add	r1, lr
 8000f32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f36:	1bc9      	subs	r1, r1, r7
 8000f38:	fba3 890c 	umull	r8, r9, r3, ip
 8000f3c:	4549      	cmp	r1, r9
 8000f3e:	d309      	bcc.n	8000f54 <__divdi3+0x278>
 8000f40:	d005      	beq.n	8000f4e <__divdi3+0x272>
 8000f42:	2200      	movs	r2, #0
 8000f44:	e71d      	b.n	8000d82 <__divdi3+0xa6>
 8000f46:	4696      	mov	lr, r2
 8000f48:	e6fe      	b.n	8000d48 <__divdi3+0x6c>
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	e711      	b.n	8000d72 <__divdi3+0x96>
 8000f4e:	4094      	lsls	r4, r2
 8000f50:	4544      	cmp	r4, r8
 8000f52:	d2f6      	bcs.n	8000f42 <__divdi3+0x266>
 8000f54:	3b01      	subs	r3, #1
 8000f56:	e7f4      	b.n	8000f42 <__divdi3+0x266>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	e7ea      	b.n	8000f32 <__divdi3+0x256>
 8000f5c:	4688      	mov	r8, r1
 8000f5e:	e7a5      	b.n	8000eac <__divdi3+0x1d0>
 8000f60:	46c8      	mov	r8, r9
 8000f62:	e7d1      	b.n	8000f08 <__divdi3+0x22c>
 8000f64:	4602      	mov	r2, r0
 8000f66:	e78c      	b.n	8000e82 <__divdi3+0x1a6>
 8000f68:	4613      	mov	r3, r2
 8000f6a:	e70a      	b.n	8000d82 <__divdi3+0xa6>
 8000f6c:	3b02      	subs	r3, #2
 8000f6e:	e757      	b.n	8000e20 <__divdi3+0x144>
 8000f70:	f1a8 0802 	sub.w	r8, r8, #2
 8000f74:	442f      	add	r7, r5
 8000f76:	e73f      	b.n	8000df8 <__divdi3+0x11c>

08000f78 <__udivdi3>:
 8000f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d144      	bne.n	800100a <__udivdi3+0x92>
 8000f80:	428a      	cmp	r2, r1
 8000f82:	4615      	mov	r5, r2
 8000f84:	4604      	mov	r4, r0
 8000f86:	d94f      	bls.n	8001028 <__udivdi3+0xb0>
 8000f88:	fab2 f782 	clz	r7, r2
 8000f8c:	460e      	mov	r6, r1
 8000f8e:	b14f      	cbz	r7, 8000fa4 <__udivdi3+0x2c>
 8000f90:	f1c7 0320 	rsb	r3, r7, #32
 8000f94:	40b9      	lsls	r1, r7
 8000f96:	fa20 f603 	lsr.w	r6, r0, r3
 8000f9a:	fa02 f507 	lsl.w	r5, r2, r7
 8000f9e:	430e      	orrs	r6, r1
 8000fa0:	fa00 f407 	lsl.w	r4, r0, r7
 8000fa4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000fa8:	0c23      	lsrs	r3, r4, #16
 8000faa:	fbb6 f0fe 	udiv	r0, r6, lr
 8000fae:	b2af      	uxth	r7, r5
 8000fb0:	fb0e 6110 	mls	r1, lr, r0, r6
 8000fb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fb8:	fb07 f100 	mul.w	r1, r7, r0
 8000fbc:	4299      	cmp	r1, r3
 8000fbe:	d909      	bls.n	8000fd4 <__udivdi3+0x5c>
 8000fc0:	195b      	adds	r3, r3, r5
 8000fc2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000fc6:	f080 80ec 	bcs.w	80011a2 <__udivdi3+0x22a>
 8000fca:	4299      	cmp	r1, r3
 8000fcc:	f240 80e9 	bls.w	80011a2 <__udivdi3+0x22a>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	442b      	add	r3, r5
 8000fd4:	1a5a      	subs	r2, r3, r1
 8000fd6:	b2a4      	uxth	r4, r4
 8000fd8:	fbb2 f3fe 	udiv	r3, r2, lr
 8000fdc:	fb0e 2213 	mls	r2, lr, r3, r2
 8000fe0:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8000fe4:	fb07 f703 	mul.w	r7, r7, r3
 8000fe8:	4297      	cmp	r7, r2
 8000fea:	d908      	bls.n	8000ffe <__udivdi3+0x86>
 8000fec:	1952      	adds	r2, r2, r5
 8000fee:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8000ff2:	f080 80d8 	bcs.w	80011a6 <__udivdi3+0x22e>
 8000ff6:	4297      	cmp	r7, r2
 8000ff8:	f240 80d5 	bls.w	80011a6 <__udivdi3+0x22e>
 8000ffc:	3b02      	subs	r3, #2
 8000ffe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001002:	2600      	movs	r6, #0
 8001004:	4631      	mov	r1, r6
 8001006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800100a:	428b      	cmp	r3, r1
 800100c:	d847      	bhi.n	800109e <__udivdi3+0x126>
 800100e:	fab3 f683 	clz	r6, r3
 8001012:	2e00      	cmp	r6, #0
 8001014:	d148      	bne.n	80010a8 <__udivdi3+0x130>
 8001016:	428b      	cmp	r3, r1
 8001018:	d302      	bcc.n	8001020 <__udivdi3+0xa8>
 800101a:	4282      	cmp	r2, r0
 800101c:	f200 80cd 	bhi.w	80011ba <__udivdi3+0x242>
 8001020:	2001      	movs	r0, #1
 8001022:	4631      	mov	r1, r6
 8001024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001028:	b912      	cbnz	r2, 8001030 <__udivdi3+0xb8>
 800102a:	2501      	movs	r5, #1
 800102c:	fbb5 f5f2 	udiv	r5, r5, r2
 8001030:	fab5 f885 	clz	r8, r5
 8001034:	f1b8 0f00 	cmp.w	r8, #0
 8001038:	d177      	bne.n	800112a <__udivdi3+0x1b2>
 800103a:	1b4a      	subs	r2, r1, r5
 800103c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001040:	b2af      	uxth	r7, r5
 8001042:	2601      	movs	r6, #1
 8001044:	fbb2 f0fe 	udiv	r0, r2, lr
 8001048:	0c23      	lsrs	r3, r4, #16
 800104a:	fb0e 2110 	mls	r1, lr, r0, r2
 800104e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001052:	fb07 f300 	mul.w	r3, r7, r0
 8001056:	428b      	cmp	r3, r1
 8001058:	d907      	bls.n	800106a <__udivdi3+0xf2>
 800105a:	1949      	adds	r1, r1, r5
 800105c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001060:	d202      	bcs.n	8001068 <__udivdi3+0xf0>
 8001062:	428b      	cmp	r3, r1
 8001064:	f200 80ba 	bhi.w	80011dc <__udivdi3+0x264>
 8001068:	4610      	mov	r0, r2
 800106a:	1ac9      	subs	r1, r1, r3
 800106c:	b2a4      	uxth	r4, r4
 800106e:	fbb1 f3fe 	udiv	r3, r1, lr
 8001072:	fb0e 1113 	mls	r1, lr, r3, r1
 8001076:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800107a:	fb07 f703 	mul.w	r7, r7, r3
 800107e:	42a7      	cmp	r7, r4
 8001080:	d908      	bls.n	8001094 <__udivdi3+0x11c>
 8001082:	1964      	adds	r4, r4, r5
 8001084:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8001088:	f080 808f 	bcs.w	80011aa <__udivdi3+0x232>
 800108c:	42a7      	cmp	r7, r4
 800108e:	f240 808c 	bls.w	80011aa <__udivdi3+0x232>
 8001092:	3b02      	subs	r3, #2
 8001094:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001098:	4631      	mov	r1, r6
 800109a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800109e:	2600      	movs	r6, #0
 80010a0:	4630      	mov	r0, r6
 80010a2:	4631      	mov	r1, r6
 80010a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010a8:	f1c6 0420 	rsb	r4, r6, #32
 80010ac:	fa22 f504 	lsr.w	r5, r2, r4
 80010b0:	40b3      	lsls	r3, r6
 80010b2:	432b      	orrs	r3, r5
 80010b4:	fa20 fc04 	lsr.w	ip, r0, r4
 80010b8:	fa01 f706 	lsl.w	r7, r1, r6
 80010bc:	fa21 f504 	lsr.w	r5, r1, r4
 80010c0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80010c4:	ea4c 0707 	orr.w	r7, ip, r7
 80010c8:	fbb5 f8fe 	udiv	r8, r5, lr
 80010cc:	0c39      	lsrs	r1, r7, #16
 80010ce:	fb0e 5518 	mls	r5, lr, r8, r5
 80010d2:	fa1f fc83 	uxth.w	ip, r3
 80010d6:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 80010da:	fb0c f108 	mul.w	r1, ip, r8
 80010de:	42a9      	cmp	r1, r5
 80010e0:	fa02 f206 	lsl.w	r2, r2, r6
 80010e4:	d904      	bls.n	80010f0 <__udivdi3+0x178>
 80010e6:	18ed      	adds	r5, r5, r3
 80010e8:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 80010ec:	d367      	bcc.n	80011be <__udivdi3+0x246>
 80010ee:	46a0      	mov	r8, r4
 80010f0:	1a6d      	subs	r5, r5, r1
 80010f2:	b2bf      	uxth	r7, r7
 80010f4:	fbb5 f4fe 	udiv	r4, r5, lr
 80010f8:	fb0e 5514 	mls	r5, lr, r4, r5
 80010fc:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 8001100:	fb0c fc04 	mul.w	ip, ip, r4
 8001104:	458c      	cmp	ip, r1
 8001106:	d904      	bls.n	8001112 <__udivdi3+0x19a>
 8001108:	18c9      	adds	r1, r1, r3
 800110a:	f104 35ff 	add.w	r5, r4, #4294967295	; 0xffffffff
 800110e:	d35c      	bcc.n	80011ca <__udivdi3+0x252>
 8001110:	462c      	mov	r4, r5
 8001112:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8001116:	ebcc 0101 	rsb	r1, ip, r1
 800111a:	fba4 2302 	umull	r2, r3, r4, r2
 800111e:	4299      	cmp	r1, r3
 8001120:	d348      	bcc.n	80011b4 <__udivdi3+0x23c>
 8001122:	d044      	beq.n	80011ae <__udivdi3+0x236>
 8001124:	4620      	mov	r0, r4
 8001126:	2600      	movs	r6, #0
 8001128:	e76c      	b.n	8001004 <__udivdi3+0x8c>
 800112a:	f1c8 0420 	rsb	r4, r8, #32
 800112e:	fa01 f308 	lsl.w	r3, r1, r8
 8001132:	fa05 f508 	lsl.w	r5, r5, r8
 8001136:	fa20 f704 	lsr.w	r7, r0, r4
 800113a:	40e1      	lsrs	r1, r4
 800113c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001140:	431f      	orrs	r7, r3
 8001142:	fbb1 f6fe 	udiv	r6, r1, lr
 8001146:	0c3a      	lsrs	r2, r7, #16
 8001148:	fb0e 1116 	mls	r1, lr, r6, r1
 800114c:	fa1f fc85 	uxth.w	ip, r5
 8001150:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 8001154:	fb0c f206 	mul.w	r2, ip, r6
 8001158:	429a      	cmp	r2, r3
 800115a:	fa00 f408 	lsl.w	r4, r0, r8
 800115e:	d907      	bls.n	8001170 <__udivdi3+0x1f8>
 8001160:	195b      	adds	r3, r3, r5
 8001162:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
 8001166:	d237      	bcs.n	80011d8 <__udivdi3+0x260>
 8001168:	429a      	cmp	r2, r3
 800116a:	d935      	bls.n	80011d8 <__udivdi3+0x260>
 800116c:	3e02      	subs	r6, #2
 800116e:	442b      	add	r3, r5
 8001170:	1a9b      	subs	r3, r3, r2
 8001172:	b2bf      	uxth	r7, r7
 8001174:	fbb3 f0fe 	udiv	r0, r3, lr
 8001178:	fb0e 3310 	mls	r3, lr, r0, r3
 800117c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8001180:	fb0c f100 	mul.w	r1, ip, r0
 8001184:	4299      	cmp	r1, r3
 8001186:	d907      	bls.n	8001198 <__udivdi3+0x220>
 8001188:	195b      	adds	r3, r3, r5
 800118a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800118e:	d221      	bcs.n	80011d4 <__udivdi3+0x25c>
 8001190:	4299      	cmp	r1, r3
 8001192:	d91f      	bls.n	80011d4 <__udivdi3+0x25c>
 8001194:	3802      	subs	r0, #2
 8001196:	442b      	add	r3, r5
 8001198:	1a5a      	subs	r2, r3, r1
 800119a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800119e:	4667      	mov	r7, ip
 80011a0:	e750      	b.n	8001044 <__udivdi3+0xcc>
 80011a2:	4610      	mov	r0, r2
 80011a4:	e716      	b.n	8000fd4 <__udivdi3+0x5c>
 80011a6:	460b      	mov	r3, r1
 80011a8:	e729      	b.n	8000ffe <__udivdi3+0x86>
 80011aa:	4613      	mov	r3, r2
 80011ac:	e772      	b.n	8001094 <__udivdi3+0x11c>
 80011ae:	40b0      	lsls	r0, r6
 80011b0:	4290      	cmp	r0, r2
 80011b2:	d2b7      	bcs.n	8001124 <__udivdi3+0x1ac>
 80011b4:	1e60      	subs	r0, r4, #1
 80011b6:	2600      	movs	r6, #0
 80011b8:	e724      	b.n	8001004 <__udivdi3+0x8c>
 80011ba:	4630      	mov	r0, r6
 80011bc:	e722      	b.n	8001004 <__udivdi3+0x8c>
 80011be:	42a9      	cmp	r1, r5
 80011c0:	d995      	bls.n	80010ee <__udivdi3+0x176>
 80011c2:	f1a8 0802 	sub.w	r8, r8, #2
 80011c6:	441d      	add	r5, r3
 80011c8:	e792      	b.n	80010f0 <__udivdi3+0x178>
 80011ca:	458c      	cmp	ip, r1
 80011cc:	d9a0      	bls.n	8001110 <__udivdi3+0x198>
 80011ce:	3c02      	subs	r4, #2
 80011d0:	4419      	add	r1, r3
 80011d2:	e79e      	b.n	8001112 <__udivdi3+0x19a>
 80011d4:	4610      	mov	r0, r2
 80011d6:	e7df      	b.n	8001198 <__udivdi3+0x220>
 80011d8:	460e      	mov	r6, r1
 80011da:	e7c9      	b.n	8001170 <__udivdi3+0x1f8>
 80011dc:	3802      	subs	r0, #2
 80011de:	4429      	add	r1, r5
 80011e0:	e743      	b.n	800106a <__udivdi3+0xf2>
 80011e2:	bf00      	nop

080011e4 <CmdLED>:
    HAL_IncTick();
    my_Tick();
}

void CmdLED(int mode)
{
 80011e4:	b507      	push	{r0, r1, r2, lr}
  uint32_t led,val;
  int rc;
  if(mode != CMD_INTERACTIVE) {
 80011e6:	b9f8      	cbnz	r0, 8001228 <CmdLED+0x44>
    return;
  }

  rc = fetch_uint32_arg(&led);
 80011e8:	4668      	mov	r0, sp
 80011ea:	f000 ff53 	bl	8002094 <fetch_uint32_arg>
  if(rc) {
 80011ee:	b108      	cbz	r0, 80011f4 <CmdLED+0x10>
    printf("Missing LED index\n");
 80011f0:	480f      	ldr	r0, [pc, #60]	; (8001230 <CmdLED+0x4c>)
 80011f2:	e004      	b.n	80011fe <CmdLED+0x1a>
    return;
  }
    
  rc = fetch_uint32_arg(&val);
 80011f4:	a801      	add	r0, sp, #4
 80011f6:	f000 ff4d 	bl	8002094 <fetch_uint32_arg>
  if(rc) {
 80011fa:	b118      	cbz	r0, 8001204 <CmdLED+0x20>
    printf("Missing state value, 0 for Off, 1 for On\n");
 80011fc:	480d      	ldr	r0, [pc, #52]	; (8001234 <CmdLED+0x50>)
 80011fe:	f004 fca5 	bl	8005b4c <puts>
    return;
 8001202:	e011      	b.n	8001228 <CmdLED+0x44>
  }
  
  if((led < 3) || (led > 10)) {
 8001204:	9900      	ldr	r1, [sp, #0]
 8001206:	1ecb      	subs	r3, r1, #3
 8001208:	2b07      	cmp	r3, #7
 800120a:	d903      	bls.n	8001214 <CmdLED+0x30>
    printf("Led index of %u is out of the range (3..10)\n",
 800120c:	480a      	ldr	r0, [pc, #40]	; (8001238 <CmdLED+0x54>)
 800120e:	f004 fc51 	bl	8005ab4 <printf>
	   (unsigned int)led);
    return;
 8001212:	e009      	b.n	8001228 <CmdLED+0x44>
 8001214:	4a09      	ldr	r2, [pc, #36]	; (800123c <CmdLED+0x58>)
  }

  led -= 3;
  if(val) {
 8001216:	9901      	ldr	r1, [sp, #4]
    printf("Led index of %u is out of the range (3..10)\n",
	   (unsigned int)led);
    return;
  }

  led -= 3;
 8001218:	9300      	str	r3, [sp, #0]
  if(val) {
    BSP_LED_On(LEDs[led]);
 800121a:	5cd0      	ldrb	r0, [r2, r3]
	   (unsigned int)led);
    return;
  }

  led -= 3;
  if(val) {
 800121c:	b111      	cbz	r1, 8001224 <CmdLED+0x40>
    BSP_LED_On(LEDs[led]);
 800121e:	f004 fb25 	bl	800586c <BSP_LED_On>
 8001222:	e001      	b.n	8001228 <CmdLED+0x44>
  } else {
    BSP_LED_Off(LEDs[led]);
 8001224:	f004 fb30 	bl	8005888 <BSP_LED_Off>
  }

} 
 8001228:	b003      	add	sp, #12
 800122a:	f85d fb04 	ldr.w	pc, [sp], #4
 800122e:	bf00      	nop
 8001230:	0800a88c 	.word	0x0800a88c
 8001234:	0800a89e 	.word	0x0800a89e
 8001238:	0800a8c7 	.word	0x0800a8c7
 800123c:	0800aa1d 	.word	0x0800aa1d

08001240 <CmdAccel>:

ADD_CMD("led",CmdLED,"<index> <state> Turn off/on LED")

void CmdAccel(int mode)
{
 8001240:	b507      	push	{r0, r1, r2, lr}
  int16_t xyz[3];

  if(mode != CMD_INTERACTIVE) {
 8001242:	b958      	cbnz	r0, 800125c <CmdAccel+0x1c>
    return;
  }

  BSP_ACCELERO_GetXYZ(xyz);
 8001244:	4668      	mov	r0, sp
 8001246:	f004 fb7f 	bl	8005948 <BSP_ACCELERO_GetXYZ>

  printf("Accelerometer returns:\n"
 800124a:	4806      	ldr	r0, [pc, #24]	; (8001264 <CmdAccel+0x24>)
 800124c:	f9bd 1000 	ldrsh.w	r1, [sp]
 8001250:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8001254:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8001258:	f004 fc2c 	bl	8005ab4 <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 xyz[0],xyz[1],xyz[2]);


}
 800125c:	b003      	add	sp, #12
 800125e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001262:	bf00      	nop
 8001264:	0800a8f4 	.word	0x0800a8f4

08001268 <CmdGyro>:

ADD_CMD("accel", CmdAccel,"                Read Accelerometer");

void CmdGyro(int mode)
{
 8001268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  float xyz[3];

  if(mode != CMD_INTERACTIVE) {
 800126a:	b9f8      	cbnz	r0, 80012ac <CmdGyro+0x44>
    return;
  }

  BSP_GYRO_GetXYZ(xyz);
 800126c:	a801      	add	r0, sp, #4
 800126e:	f004 fb73 	bl	8005958 <BSP_GYRO_GetXYZ>

  printf("Gyroscope returns:\n"
	 "   X: %d\n"
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
 8001272:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80012b4 <CmdGyro+0x4c>
 8001276:	eddd 6a01 	vldr	s13, [sp, #4]
	 (int)(xyz[1]*256),
 800127a:	ed9d 7a02 	vldr	s14, [sp, #8]
	 (int)(xyz[2]*256));
 800127e:	eddd 7a03 	vldr	s15, [sp, #12]
    return;
  }

  BSP_GYRO_GetXYZ(xyz);

  printf("Gyroscope returns:\n"
 8001282:	480d      	ldr	r0, [pc, #52]	; (80012b8 <CmdGyro+0x50>)
	 "   X: %d\n"
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
 8001284:	ee66 6a86 	vmul.f32	s13, s13, s12
	 (int)(xyz[1]*256),
 8001288:	ee27 7a06 	vmul.f32	s14, s14, s12
	 (int)(xyz[2]*256));
 800128c:	ee67 7a86 	vmul.f32	s15, s15, s12
    return;
  }

  BSP_GYRO_GetXYZ(xyz);

  printf("Gyroscope returns:\n"
 8001290:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8001294:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8001298:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800129c:	ee16 1a90 	vmov	r1, s13
 80012a0:	ee17 2a10 	vmov	r2, s14
 80012a4:	ee17 3a90 	vmov	r3, s15
 80012a8:	f004 fc04 	bl	8005ab4 <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
	 (int)(xyz[1]*256),
	 (int)(xyz[2]*256));
}
 80012ac:	b005      	add	sp, #20
 80012ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80012b2:	bf00      	nop
 80012b4:	43800000 	.word	0x43800000
 80012b8:	0800a927 	.word	0x0800a927

080012bc <CmdButton>:

ADD_CMD("gyro", CmdGyro,"                Read Gyroscope");

void CmdButton(int mode)
{
 80012bc:	b508      	push	{r3, lr}
  uint32_t button;

  if(mode != CMD_INTERACTIVE) {
 80012be:	b958      	cbnz	r0, 80012d8 <CmdButton+0x1c>
    return;
  }

  button = BSP_PB_GetState(BUTTON_USER);
 80012c0:	f004 fb38 	bl	8005934 <BSP_PB_GetState>
  
  printf("Button is currently: %s\n",
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <CmdButton+0x20>)
 80012c6:	4906      	ldr	r1, [pc, #24]	; (80012e0 <CmdButton+0x24>)
 80012c8:	2800      	cmp	r0, #0
 80012ca:	bf18      	it	ne
 80012cc:	4619      	movne	r1, r3
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <CmdButton+0x28>)
	 button ? "Pressed" : "Released");

  return;
}
 80012d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return;
  }

  button = BSP_PB_GetState(BUTTON_USER);
  
  printf("Button is currently: %s\n",
 80012d4:	f004 bbee 	b.w	8005ab4 <printf>
 80012d8:	bd08      	pop	{r3, pc}
 80012da:	bf00      	nop
 80012dc:	0800a956 	.word	0x0800a956
 80012e0:	0800a95e 	.word	0x0800a95e
 80012e4:	0800a967 	.word	0x0800a967

080012e8 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80012e8:	b508      	push	{r3, lr}
  BSP_LED_On(LED6);
 80012ea:	2003      	movs	r0, #3
 80012ec:	f004 fabe 	bl	800586c <BSP_LED_On>
  /* Infinite loop */
  while(1)
  {
  }
 80012f0:	e7fe      	b.n	80012f0 <Error_Handler+0x8>
	...

080012f4 <main>:

/* Private function prototypes -----------------------------------------------*/
static void SystemClock_Config(void);

int main(int argc, char **argv)
{
 80012f4:	b510      	push	{r4, lr}
 80012f6:	b090      	sub	sp, #64	; 0x40
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012f8:	2301      	movs	r3, #1
 80012fa:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012fc:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012fe:	2300      	movs	r3, #0
 8001300:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001302:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001306:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001308:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 800130a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800130c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001310:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001312:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8001314:	f001 fc0c 	bl	8002b30 <HAL_RCC_OscConfig>
 8001318:	b108      	cbz	r0, 800131e <main+0x2a>
  {
    Error_Handler();
 800131a:	f7ff ffe5 	bl	80012e8 <Error_Handler>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800131e:	230f      	movs	r3, #15
 8001320:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001322:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 8001324:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001328:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 800132a:	4621      	mov	r1, r4
 800132c:	a801      	add	r0, sp, #4
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800132e:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 8001330:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 8001332:	f001 fee7 	bl	8003104 <HAL_RCC_ClockConfig>
 8001336:	4604      	mov	r4, r0
 8001338:	2800      	cmp	r0, #0
 800133a:	d1ee      	bne.n	800131a <main+0x26>
  uint32_t i;
 // uint8_t accelRc, gyroRc;
  /* Configure the system clock */
  SystemClock_Config();

  HAL_Init();
 800133c:	f002 f8c6 	bl	80034cc <HAL_Init>

  /* Start the Watchdog */


  TerminalInit();  /* Initialize UART and USB */
 8001340:	f000 ffe0 	bl	8002304 <TerminalInit>
  /* Configure the LEDs... */
  for(i=0; i<numLEDs; i++) {
    BSP_LED_Init(LEDs[i]);
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <main+0x74>)
 8001346:	5d18      	ldrb	r0, [r3, r4]
  /* Start the Watchdog */


  TerminalInit();  /* Initialize UART and USB */
  /* Configure the LEDs... */
  for(i=0; i<numLEDs; i++) {
 8001348:	3401      	adds	r4, #1
    BSP_LED_Init(LEDs[i]);
 800134a:	f004 fa5b 	bl	8005804 <BSP_LED_Init>
  /* Start the Watchdog */


  TerminalInit();  /* Initialize UART and USB */
  /* Configure the LEDs... */
  for(i=0; i<numLEDs; i++) {
 800134e:	2c08      	cmp	r4, #8
 8001350:	d1f8      	bne.n	8001344 <main+0x50>
    BSP_LED_Init(LEDs[i]);
  }

  /* Initialize the pushbutton */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8001352:	2000      	movs	r0, #0
 8001354:	4601      	mov	r1, r0
 8001356:	f004 fab3 	bl	80058c0 <BSP_PB_Init>
  if(gyroRc != GYRO_OK) {
    printf("Failed to initialize Gyroscope\n");
    Error_Handler();
  } */

  my_Init();
 800135a:	f7fe ff5b 	bl	8000214 <my_Init>
  
  while(1) {
    TaskInput();
 800135e:	f000 fe03 	bl	8001f68 <TaskInput>
    my_Loop();
 8001362:	f7fe ff55 	bl	8000210 <my_Loop>
    /* Tickle the watchdog */
  }
 8001366:	e7fa      	b.n	800135e <main+0x6a>
 8001368:	0800aa1d 	.word	0x0800aa1d

0800136c <SysTick_Handler>:
  {
  }
}

void SysTick_Handler(void)
{
 800136c:	b508      	push	{r3, lr}
    HAL_IncTick();
 800136e:	f002 f8bf 	bl	80034f0 <HAL_IncTick>
    my_Tick();
}
 8001372:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void SysTick_Handler(void)
{
    HAL_IncTick();
    my_Tick();
 8001376:	f7fe bf41 	b.w	80001fc <my_Tick>
	...

0800137c <cmdPWM>:
printf("GPIO and Timer initialized");

}

void cmdPWM(int mode)
{
 800137c:	b507      	push	{r0, r1, r2, lr}
	int rc;
	uint32_t channel,value;
	rc = fetch_uint32_arg(&channel);
 800137e:	4668      	mov	r0, sp
 8001380:	f000 fe88 	bl	8002094 <fetch_uint32_arg>
	if(rc) {
 8001384:	b110      	cbz	r0, 800138c <cmdPWM+0x10>
		printf("Missing channel");
 8001386:	481c      	ldr	r0, [pc, #112]	; (80013f8 <cmdPWM+0x7c>)
 8001388:	f004 fb94 	bl	8005ab4 <printf>
	}
	rc = fetch_uint32_arg(&value);
 800138c:	a801      	add	r0, sp, #4
 800138e:	f000 fe81 	bl	8002094 <fetch_uint32_arg>
	if(rc) {
 8001392:	b110      	cbz	r0, 800139a <cmdPWM+0x1e>
		printf("Missing value");
 8001394:	4819      	ldr	r0, [pc, #100]	; (80013fc <cmdPWM+0x80>)
 8001396:	f004 fb8d 	bl	8005ab4 <printf>
	}

	if(channel==1)
 800139a:	9900      	ldr	r1, [sp, #0]
 800139c:	2901      	cmp	r1, #1
 800139e:	d107      	bne.n	80013b0 <cmdPWM+0x34>
	{
		HAL_TIM_PWM_Start(&tim1,TIM_CHANNEL_1);
 80013a0:	4817      	ldr	r0, [pc, #92]	; (8001400 <cmdPWM+0x84>)
 80013a2:	2100      	movs	r1, #0
 80013a4:	f003 faec 	bl	8004980 <HAL_TIM_PWM_Start>
		TIM1->CCR1 = value;
 80013a8:	4b16      	ldr	r3, [pc, #88]	; (8001404 <cmdPWM+0x88>)
 80013aa:	9a01      	ldr	r2, [sp, #4]
 80013ac:	635a      	str	r2, [r3, #52]	; 0x34
 80013ae:	e01f      	b.n	80013f0 <cmdPWM+0x74>
	}
	else if(channel==2)
 80013b0:	2902      	cmp	r1, #2
 80013b2:	d107      	bne.n	80013c4 <cmdPWM+0x48>
	{
		HAL_TIM_PWM_Start(&tim1,TIM_CHANNEL_2);
 80013b4:	4812      	ldr	r0, [pc, #72]	; (8001400 <cmdPWM+0x84>)
 80013b6:	2104      	movs	r1, #4
 80013b8:	f003 fae2 	bl	8004980 <HAL_TIM_PWM_Start>
		TIM1->CCR2 = value;
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <cmdPWM+0x88>)
 80013be:	9a01      	ldr	r2, [sp, #4]
 80013c0:	639a      	str	r2, [r3, #56]	; 0x38
 80013c2:	e015      	b.n	80013f0 <cmdPWM+0x74>
	}
	else if(channel==3)
 80013c4:	2903      	cmp	r1, #3
 80013c6:	d107      	bne.n	80013d8 <cmdPWM+0x5c>
	{
		HAL_TIM_PWM_Start(&tim1,TIM_CHANNEL_3);
 80013c8:	480d      	ldr	r0, [pc, #52]	; (8001400 <cmdPWM+0x84>)
 80013ca:	2108      	movs	r1, #8
 80013cc:	f003 fad8 	bl	8004980 <HAL_TIM_PWM_Start>
		TIM1->CCR3 = value;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <cmdPWM+0x88>)
 80013d2:	9a01      	ldr	r2, [sp, #4]
 80013d4:	63da      	str	r2, [r3, #60]	; 0x3c
 80013d6:	e00b      	b.n	80013f0 <cmdPWM+0x74>
	}
	else if(channel==0)
 80013d8:	b951      	cbnz	r1, 80013f0 <cmdPWM+0x74>
	{
		HAL_TIM_PWM_Stop(&tim1,TIM_CHANNEL_1);
 80013da:	4809      	ldr	r0, [pc, #36]	; (8001400 <cmdPWM+0x84>)
 80013dc:	f003 faf6 	bl	80049cc <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&tim1,TIM_CHANNEL_2);
 80013e0:	2104      	movs	r1, #4
 80013e2:	4807      	ldr	r0, [pc, #28]	; (8001400 <cmdPWM+0x84>)
 80013e4:	f003 faf2 	bl	80049cc <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&tim1,TIM_CHANNEL_3);
 80013e8:	4805      	ldr	r0, [pc, #20]	; (8001400 <cmdPWM+0x84>)
 80013ea:	2108      	movs	r1, #8
 80013ec:	f003 faee 	bl	80049cc <HAL_TIM_PWM_Stop>
	}
}
 80013f0:	b003      	add	sp, #12
 80013f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80013f6:	bf00      	nop
 80013f8:	0800aa25 	.word	0x0800aa25
 80013fc:	0800aa35 	.word	0x0800aa35
 8001400:	20000e14 	.word	0x20000e14
 8001404:	40012c00 	.word	0x40012c00

08001408 <cmddcinit>:

void cmddcinit(int mode)
{
 8001408:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
if(mode != CMD_INTERACTIVE) 
 800140a:	b988      	cbnz	r0, 8001430 <cmddcinit+0x28>
	{
    	return;
	}
	__GPIOF_CLK_ENABLE();
 800140c:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <cmddcinit+0x30>)
 800140e:	6953      	ldr	r3, [r2, #20]
 8001410:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001414:	6153      	str	r3, [r2, #20]
	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_InitStruct.Pin = (GPIO_PIN_6| GPIO_PIN_9);
 8001416:	f44f 7310 	mov.w	r3, #576	; 0x240
 800141a:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	9003      	str	r0, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001422:	2303      	movs	r3, #3
	GPIO_InitStruct.Alternate = 0;
 8001424:	9005      	str	r0, [sp, #20]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001426:	a901      	add	r1, sp, #4
 8001428:	4804      	ldr	r0, [pc, #16]	; (800143c <cmddcinit+0x34>)
	__GPIOF_CLK_ENABLE();
	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_InitStruct.Pin = (GPIO_PIN_6| GPIO_PIN_9);
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800142a:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Alternate = 0;
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800142c:	f002 f8e0 	bl	80035f0 <HAL_GPIO_Init>
}
 8001430:	b007      	add	sp, #28
 8001432:	f85d fb04 	ldr.w	pc, [sp], #4
 8001436:	bf00      	nop
 8001438:	40021000 	.word	0x40021000
 800143c:	48001400 	.word	0x48001400

08001440 <cmdPWMtimerinit>:


TIM_HandleTypeDef tim1;

void cmdPWMtimerinit(int mode)
{
 8001440:	b570      	push	{r4, r5, r6, lr}
if(mode != CMD_INTERACTIVE) 
 8001442:	4605      	mov	r5, r0


TIM_HandleTypeDef tim1;

void cmdPWMtimerinit(int mode)
{
 8001444:	b08c      	sub	sp, #48	; 0x30
if(mode != CMD_INTERACTIVE) 
 8001446:	2800      	cmp	r0, #0
 8001448:	d147      	bne.n	80014da <cmdPWMtimerinit+0x9a>
	{
    	return;
	}
	__GPIOA_CLK_ENABLE();
 800144a:	4c25      	ldr	r4, [pc, #148]	; (80014e0 <cmdPWMtimerinit+0xa0>)
 800144c:	6963      	ldr	r3, [r4, #20]
 800144e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001452:	6163      	str	r3, [r4, #20]
	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_InitStruct.Pin = (GPIO_PIN_8 | GPIO_PIN_9);
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001458:	2302      	movs	r3, #2
 800145a:	e88d 000c 	stmia.w	sp, {r2, r3}
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800145e:	2303      	movs	r3, #3
	GPIO_InitStruct.Alternate = 6;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001460:	4669      	mov	r1, sp
	}
	__GPIOA_CLK_ENABLE();
	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_InitStruct.Pin = (GPIO_PIN_8 | GPIO_PIN_9);
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	9002      	str	r0, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001464:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Alternate = 6;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_InitStruct.Pin = (GPIO_PIN_8 | GPIO_PIN_9);
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStruct.Alternate = 6;
 800146a:	2306      	movs	r3, #6
 800146c:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146e:	f002 f8bf 	bl	80035f0 <HAL_GPIO_Init>

/* Initialize PWM */
__TIM1_CLK_ENABLE();
 8001472:	69a3      	ldr	r3, [r4, #24]
 8001474:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001478:	61a3      	str	r3, [r4, #24]
tim1.Instance = TIM1;
 800147a:	4c1a      	ldr	r4, [pc, #104]	; (80014e4 <cmdPWMtimerinit+0xa4>)
 800147c:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <cmdPWMtimerinit+0xa8>)
 800147e:	6023      	str	r3, [r4, #0]
tim1.Init.Prescaler =
 HAL_RCC_GetPCLK2Freq()*2/1000000;
 8001480:	f001 fff8 	bl	8003474 <HAL_RCC_GetPCLK2Freq>
 8001484:	4b19      	ldr	r3, [pc, #100]	; (80014ec <cmdPWMtimerinit+0xac>)
tim1.Init.CounterMode   = TIM_COUNTERMODE_UP;
 8001486:	60a5      	str	r5, [r4, #8]

/* Initialize PWM */
__TIM1_CLK_ENABLE();
tim1.Instance = TIM1;
tim1.Init.Prescaler =
 HAL_RCC_GetPCLK2Freq()*2/1000000;
 8001488:	0040      	lsls	r0, r0, #1
 800148a:	fbb0 f0f3 	udiv	r0, r0, r3
tim1.Init.CounterMode   = TIM_COUNTERMODE_UP;
tim1.Init.Period        = 1000;
 800148e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

/* Initialize PWM */
__TIM1_CLK_ENABLE();
tim1.Instance = TIM1;
tim1.Init.Prescaler =
 8001492:	6060      	str	r0, [r4, #4]
 HAL_RCC_GetPCLK2Freq()*2/1000000;
tim1.Init.CounterMode   = TIM_COUNTERMODE_UP;
tim1.Init.Period        = 1000;
tim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
tim1.Init.RepetitionCounter = 0;
HAL_TIM_Base_Init(&tim1);
 8001494:	4620      	mov	r0, r4
__TIM1_CLK_ENABLE();
tim1.Instance = TIM1;
tim1.Init.Prescaler =
 HAL_RCC_GetPCLK2Freq()*2/1000000;
tim1.Init.CounterMode   = TIM_COUNTERMODE_UP;
tim1.Init.Period        = 1000;
 8001496:	60e3      	str	r3, [r4, #12]
tim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001498:	6125      	str	r5, [r4, #16]
tim1.Init.RepetitionCounter = 0;
 800149a:	6165      	str	r5, [r4, #20]
HAL_TIM_Base_Init(&tim1);
 800149c:	f003 f942 	bl	8004724 <HAL_TIM_Base_Init>

TIM_OC_InitTypeDef sConfig;
sConfig.OCMode       = TIM_OCMODE_PWM1;
 80014a0:	2360      	movs	r3, #96	; 0x60
 80014a2:	9305      	str	r3, [sp, #20]
sConfig.Pulse        = 500;
sConfig.OCPolarity   = TIM_OCPOLARITY_HIGH;
sConfig.OCNPolarity  = TIM_OCNPOLARITY_LOW;
 80014a4:	2608      	movs	r6, #8
tim1.Init.RepetitionCounter = 0;
HAL_TIM_Base_Init(&tim1);

TIM_OC_InitTypeDef sConfig;
sConfig.OCMode       = TIM_OCMODE_PWM1;
sConfig.Pulse        = 500;
 80014a6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
sConfig.OCPolarity   = TIM_OCPOLARITY_HIGH;
sConfig.OCNPolarity  = TIM_OCNPOLARITY_LOW;
sConfig.OCFastMode   = TIM_OCFAST_DISABLE;
sConfig.OCIdleState  = TIM_OCIDLESTATE_RESET;
sConfig.OCNIdleState =TIM_OCNIDLESTATE_RESET;
HAL_TIM_PWM_ConfigChannel(&tim1,&sConfig,TIM_CHANNEL_1);
 80014aa:	a905      	add	r1, sp, #20
 80014ac:	462a      	mov	r2, r5
 80014ae:	4620      	mov	r0, r4
tim1.Init.RepetitionCounter = 0;
HAL_TIM_Base_Init(&tim1);

TIM_OC_InitTypeDef sConfig;
sConfig.OCMode       = TIM_OCMODE_PWM1;
sConfig.Pulse        = 500;
 80014b0:	9306      	str	r3, [sp, #24]
sConfig.OCPolarity   = TIM_OCPOLARITY_HIGH;
 80014b2:	9507      	str	r5, [sp, #28]
sConfig.OCNPolarity  = TIM_OCNPOLARITY_LOW;
 80014b4:	9608      	str	r6, [sp, #32]
sConfig.OCFastMode   = TIM_OCFAST_DISABLE;
 80014b6:	9509      	str	r5, [sp, #36]	; 0x24
sConfig.OCIdleState  = TIM_OCIDLESTATE_RESET;
 80014b8:	950a      	str	r5, [sp, #40]	; 0x28
sConfig.OCNIdleState =TIM_OCNIDLESTATE_RESET;
 80014ba:	950b      	str	r5, [sp, #44]	; 0x2c
HAL_TIM_PWM_ConfigChannel(&tim1,&sConfig,TIM_CHANNEL_1);
 80014bc:	f003 fb2c 	bl	8004b18 <HAL_TIM_PWM_ConfigChannel>
HAL_TIM_PWM_ConfigChannel(&tim1,&sConfig,TIM_CHANNEL_2);  
 80014c0:	a905      	add	r1, sp, #20
 80014c2:	2204      	movs	r2, #4
 80014c4:	4620      	mov	r0, r4
 80014c6:	f003 fb27 	bl	8004b18 <HAL_TIM_PWM_ConfigChannel>
HAL_TIM_PWM_ConfigChannel(&tim1,&sConfig,TIM_CHANNEL_3);  
 80014ca:	4620      	mov	r0, r4
 80014cc:	a905      	add	r1, sp, #20
 80014ce:	4632      	mov	r2, r6
 80014d0:	f003 fb22 	bl	8004b18 <HAL_TIM_PWM_ConfigChannel>
printf("GPIO and Timer initialized");
 80014d4:	4806      	ldr	r0, [pc, #24]	; (80014f0 <cmdPWMtimerinit+0xb0>)
 80014d6:	f004 faed 	bl	8005ab4 <printf>

}
 80014da:	b00c      	add	sp, #48	; 0x30
 80014dc:	bd70      	pop	{r4, r5, r6, pc}
 80014de:	bf00      	nop
 80014e0:	40021000 	.word	0x40021000
 80014e4:	20000e14 	.word	0x20000e14
 80014e8:	40012c00 	.word	0x40012c00
 80014ec:	000f4240 	.word	0x000f4240
 80014f0:	0800aa43 	.word	0x0800aa43

080014f4 <cmddc>:
	GPIO_InitStruct.Alternate = 0;
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
}

void cmddc(int mode)
{
 80014f4:	b513      	push	{r0, r1, r4, lr}
  uint32_t dcDirection;
  	fetch_uint32_arg(&dcDirection);
 80014f6:	a801      	add	r0, sp, #4
 80014f8:	f000 fdcc 	bl	8002094 <fetch_uint32_arg>
  if(dcDirection== 1)
 80014fc:	9c01      	ldr	r4, [sp, #4]
 80014fe:	2c01      	cmp	r4, #1
 8001500:	d109      	bne.n	8001516 <cmddc+0x22>
	{
 	 HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,1);
 8001502:	4812      	ldr	r0, [pc, #72]	; (800154c <cmddc+0x58>)
 8001504:	2140      	movs	r1, #64	; 0x40
 8001506:	4622      	mov	r2, r4
 8001508:	f002 f93c 	bl	8003784 <HAL_GPIO_WritePin>
 	 HAL_GPIO_WritePin(GPIOF,GPIO_PIN_9,0);
 800150c:	480f      	ldr	r0, [pc, #60]	; (800154c <cmddc+0x58>)
 800150e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001512:	2200      	movs	r2, #0
 8001514:	e015      	b.n	8001542 <cmddc+0x4e>
	}
 else if(dcDirection == 2)
 8001516:	2c02      	cmp	r4, #2
 8001518:	d109      	bne.n	800152e <cmddc+0x3a>
	{
	HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,0);
 800151a:	480c      	ldr	r0, [pc, #48]	; (800154c <cmddc+0x58>)
 800151c:	2140      	movs	r1, #64	; 0x40
 800151e:	2200      	movs	r2, #0
 8001520:	f002 f930 	bl	8003784 <HAL_GPIO_WritePin>
 	HAL_GPIO_WritePin(GPIOF,GPIO_PIN_9,1);
 8001524:	4809      	ldr	r0, [pc, #36]	; (800154c <cmddc+0x58>)
 8001526:	f44f 7100 	mov.w	r1, #512	; 0x200
 800152a:	2201      	movs	r2, #1
 800152c:	e009      	b.n	8001542 <cmddc+0x4e>
	}
else if(dcDirection == 0)
 800152e:	b954      	cbnz	r4, 8001546 <cmddc+0x52>
	{
	HAL_GPIO_WritePin(GPIOF,GPIO_PIN_6,0);
 8001530:	4806      	ldr	r0, [pc, #24]	; (800154c <cmddc+0x58>)
 8001532:	2140      	movs	r1, #64	; 0x40
 8001534:	4622      	mov	r2, r4
 8001536:	f002 f925 	bl	8003784 <HAL_GPIO_WritePin>
 	HAL_GPIO_WritePin(GPIOF,GPIO_PIN_9,0);
 800153a:	4804      	ldr	r0, [pc, #16]	; (800154c <cmddc+0x58>)
 800153c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001540:	4622      	mov	r2, r4
 8001542:	f002 f91f 	bl	8003784 <HAL_GPIO_WritePin>
	}
}
 8001546:	b002      	add	sp, #8
 8001548:	bd10      	pop	{r4, pc}
 800154a:	bf00      	nop
 800154c:	48001400 	.word	0x48001400

08001550 <TaskNull>:

void TaskNull(void* data)
{
 while(1)
 {
 }
 8001550:	e7fe      	b.n	8001550 <TaskNull>
	...

08001554 <TaskKill>:
// RETURNS      : int32_t
//			 returns 1

 int32_t TaskKill(int32_t id)
{
 	if(( id < 0) || (id >= MAX_TASKS))
 8001554:	2809      	cmp	r0, #9
//                       Index at which the function pointer is saved in task_t array
// RETURNS      : int32_t
//			 returns 1

 int32_t TaskKill(int32_t id)
{
 8001556:	b510      	push	{r4, lr}
 	if(( id < 0) || (id >= MAX_TASKS))
 8001558:	d903      	bls.n	8001562 <TaskKill+0xe>
 	{
  		 printf("Out of Range \n");
 800155a:	480a      	ldr	r0, [pc, #40]	; (8001584 <TaskKill+0x30>)
 800155c:	f004 faf6 	bl	8005b4c <puts>
 8001560:	e008      	b.n	8001574 <TaskKill+0x20>
   		return -1 ;
   	}
   	if(tasks[id].f == NULL)
 8001562:	2338      	movs	r3, #56	; 0x38
 8001564:	4a08      	ldr	r2, [pc, #32]	; (8001588 <TaskKill+0x34>)
 8001566:	4343      	muls	r3, r0
 8001568:	18d4      	adds	r4, r2, r3
 800156a:	58d1      	ldr	r1, [r2, r3]
 800156c:	b929      	cbnz	r1, 800157a <TaskKill+0x26>
   	{
    		printf("\n ALready Dead");
 800156e:	4807      	ldr	r0, [pc, #28]	; (800158c <TaskKill+0x38>)
 8001570:	f004 faa0 	bl	8005ab4 <printf>
    		return -1;
 8001574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001578:	bd10      	pop	{r4, pc}
   	}
  	tasks[id].f = NULL;
 800157a:	2100      	movs	r1, #0
 800157c:	50d1      	str	r1, [r2, r3]
  	tasks[id].data =NULL;
 800157e:	6061      	str	r1, [r4, #4]
  	return id ;
}
 8001580:	bd10      	pop	{r4, pc}
 8001582:	bf00      	nop
 8001584:	0800aae8 	.word	0x0800aae8
 8001588:	20000e50 	.word	0x20000e50
 800158c:	0800aaf6 	.word	0x0800aaf6

08001590 <TaskInit>:
//      This function assings NULL to all the variables of all the indexes of task_t array and also adds the pointer to tasknull function at index 0
// PARAMETERS   : void
// RETURNS      : void

void TaskInit(void)
{
 8001590:	2300      	movs	r3, #0
	for(int i = 0 ; i<MAX_TASKS ; i++)
	{
	  	tasks[i].f    = NULL; //assigning NULL the variable
 8001592:	4907      	ldr	r1, [pc, #28]	; (80015b0 <TaskInit+0x20>)
 8001594:	2200      	movs	r2, #0
 8001596:	1858      	adds	r0, r3, r1
 8001598:	505a      	str	r2, [r3, r1]
 800159a:	3338      	adds	r3, #56	; 0x38
// PARAMETERS   : void
// RETURNS      : void

void TaskInit(void)
{
	for(int i = 0 ; i<MAX_TASKS ; i++)
 800159c:	f5b3 7f0c 	cmp.w	r3, #560	; 0x230
	{
	  	tasks[i].f    = NULL; //assigning NULL the variable
	  	tasks[i].data = NULL; //assigning NULL to the variable
 80015a0:	6042      	str	r2, [r0, #4]
// PARAMETERS   : void
// RETURNS      : void

void TaskInit(void)
{
	for(int i = 0 ; i<MAX_TASKS ; i++)
 80015a2:	d1f6      	bne.n	8001592 <TaskInit+0x2>
	{
	  	tasks[i].f    = NULL; //assigning NULL the variable
	  	tasks[i].data = NULL; //assigning NULL to the variable
	}
	tasks[0].f =TaskNull;  //assiassigning TaskNull function's pointer to the the variable
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <TaskInit+0x24>)
 80015a6:	600b      	str	r3, [r1, #0]
	tasks[0].data = NULL;  //assigning NULL to the variable
	currentTask = 0;
 80015a8:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <TaskInit+0x28>)
	{
	  	tasks[i].f    = NULL; //assigning NULL the variable
	  	tasks[i].data = NULL; //assigning NULL to the variable
	}
	tasks[0].f =TaskNull;  //assiassigning TaskNull function's pointer to the the variable
	tasks[0].data = NULL;  //assigning NULL to the variable
 80015aa:	604a      	str	r2, [r1, #4]
	currentTask = 0;
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	4770      	bx	lr
 80015b0:	20000e50 	.word	0x20000e50
 80015b4:	08001551 	.word	0x08001551
 80015b8:	20001080 	.word	0x20001080

080015bc <TaskSwitcher>:
static int32_t TaskNext(void)
{
	int32_t i;
	uint32_t count=0;   // to check if the next task is greater than maximum tasks
  
	i = currentTask - 1;    // to get current task index in to the i
 80015bc:	4a1a      	ldr	r2, [pc, #104]	; (8001628 <TaskSwitcher+0x6c>)
//      Then it returns to the function in the restored context
// PARAMETERS   : void
// RETURNS      : int32_t
//			 returns 1 when 
int32_t TaskSwitcher(void)
{
 80015be:	b538      	push	{r3, r4, r5, lr}
static int32_t TaskNext(void)
{
	int32_t i;
	uint32_t count=0;   // to check if the next task is greater than maximum tasks
  
	i = currentTask - 1;    // to get current task index in to the i
 80015c0:	6813      	ldr	r3, [r2, #0]
// RETURNS      : static int32_t
//			 returns index of next task to be executed
static int32_t TaskNext(void)
{
	int32_t i;
	uint32_t count=0;   // to check if the next task is greater than maximum tasks
 80015c2:	2100      	movs	r1, #0
  
	i = currentTask - 1;    // to get current task index in to the i
 80015c4:	3b01      	subs	r3, #1
 80015c6:	4615      	mov	r5, r2
	do 
	{
    		/* NOTE: for this expression to work correctly, MAX_TASKS must be an EVEN number */
    		i = ((i + 1) % (MAX_TASKS-1))+1;  // adds 1 to the i and divides it with 50 and ruturns remainder
 80015c8:	3301      	adds	r3, #1
 80015ca:	2209      	movs	r2, #9
 80015cc:	fb93 f2f2 	sdiv	r2, r3, r2
 80015d0:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 80015d4:	1a9b      	subs	r3, r3, r2
 80015d6:	3301      	adds	r3, #1
					       	  // this will change the next task to 0 if the current task is maximum i.e 10 
    		count++;
  	}while((tasks[i].f == NULL) && (count <= MAX_TASKS));   // repeats the loop only if count is less than or equal to MAXTASKS or equal to NULL
 80015d8:	2238      	movs	r2, #56	; 0x38
 80015da:	4c14      	ldr	r4, [pc, #80]	; (800162c <TaskSwitcher+0x70>)
 80015dc:	435a      	muls	r2, r3
	do 
	{
    		/* NOTE: for this expression to work correctly, MAX_TASKS must be an EVEN number */
    		i = ((i + 1) % (MAX_TASKS-1))+1;  // adds 1 to the i and divides it with 50 and ruturns remainder
					       	  // this will change the next task to 0 if the current task is maximum i.e 10 
    		count++;
 80015de:	3101      	adds	r1, #1
  	}while((tasks[i].f == NULL) && (count <= MAX_TASKS));   // repeats the loop only if count is less than or equal to MAXTASKS or equal to NULL
 80015e0:	58a2      	ldr	r2, [r4, r2]
 80015e2:	b912      	cbnz	r2, 80015ea <TaskSwitcher+0x2e>
 80015e4:	290b      	cmp	r1, #11
 80015e6:	d1ef      	bne.n	80015c8 <TaskSwitcher+0xc>
 80015e8:	e003      	b.n	80015f2 <TaskSwitcher+0x36>
  	return (count <= MAX_TASKS) ? i : -1;
 80015ea:	290b      	cmp	r1, #11
 80015ec:	d001      	beq.n	80015f2 <TaskSwitcher+0x36>
  	int32_t nextTask;
  	register uint32_t *currentPCB asm("r0");     //register int pointer that points to RO register
  	register uint32_t *nextPCB asm("r1");        //register int pointer that points to R1 register
  	//printf("Task switcher called\n\n");
  	nextTask = TaskNext();       // getting the id of next Task    
  	if(nextTask < 0)
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	da03      	bge.n	80015fa <TaskSwitcher+0x3e>
  	{
  		/* In the case of no tasks to run,return to the original thread */
  		  printf("TaskSwitcher(): No tasks to run!\n");
 80015f2:	480f      	ldr	r0, [pc, #60]	; (8001630 <TaskSwitcher+0x74>)
 80015f4:	f004 faaa 	bl	8005b4c <puts>
  		  nextTask = 0;
 80015f8:	2300      	movs	r3, #0
  	}
  	/* If the current task is the only one  to be running, just return */
  	if(nextTask == currentTask)
 80015fa:	6828      	ldr	r0, [r5, #0]
 80015fc:	4283      	cmp	r3, r0
 80015fe:	d010      	beq.n	8001622 <TaskSwitcher+0x66>
	{
        	return 0;
	}
  	currentPCB = &(tasks[currentTask].pcb.r4);   
 8001600:	2138      	movs	r1, #56	; 0x38
  	nextPCB = &(tasks[nextTask].pcb.r4);
  	currentTask = nextTask;     
 8001602:	4a09      	ldr	r2, [pc, #36]	; (8001628 <TaskSwitcher+0x6c>)
  	/* If the current task is the only one  to be running, just return */
  	if(nextTask == currentTask)
	{
        	return 0;
	}
  	currentPCB = &(tasks[currentTask].pcb.r4);   
 8001604:	fb01 4000 	mla	r0, r1, r0, r4
  	nextPCB = &(tasks[nextTask].pcb.r4);
 8001608:	fb01 4103 	mla	r1, r1, r3, r4
  	/* If the current task is the only one  to be running, just return */
  	if(nextTask == currentTask)
	{
        	return 0;
	}
  	currentPCB = &(tasks[currentTask].pcb.r4);   
 800160c:	300c      	adds	r0, #12
  	nextPCB = &(tasks[nextTask].pcb.r4);
 800160e:	310c      	adds	r1, #12
  	currentTask = nextTask;     
 8001610:	6013      	str	r3, [r2, #0]
  	asm volatile (                  //Inline assembly is used to save and restore the contexts.
 8001612:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8001616:	f8c0 d000 	str.w	sp, [r0]
 800161a:	e8b1 5ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 800161e:	f8d1 d000 	ldr.w	sp, [r1]
    	: /* No Outputs */
    	: [current] "r" (currentPCB), [next] "r"
   	 (nextPCB) /* Inputs */: /* 'No' Clobbers */);
    	/* We are now on the other context */
   	 return 0;
  }
 8001622:	2000      	movs	r0, #0
 8001624:	bd38      	pop	{r3, r4, r5, pc}
 8001626:	bf00      	nop
 8001628:	20001080 	.word	0x20001080
 800162c:	20000e50 	.word	0x20000e50
 8001630:	0800ab05 	.word	0x0800ab05

08001634 <TaskShell>:


__attribute__((naked)) static void TaskShell(void)
{
	/* call the appropriate Task Function */
	tasks[currentTask].f(tasks[currentTask].data);
 8001634:	4c06      	ldr	r4, [pc, #24]	; (8001650 <TaskShell+0x1c>)
 8001636:	4a07      	ldr	r2, [pc, #28]	; (8001654 <TaskShell+0x20>)
 8001638:	6821      	ldr	r1, [r4, #0]
 800163a:	2338      	movs	r3, #56	; 0x38
 800163c:	434b      	muls	r3, r1
 800163e:	18d1      	adds	r1, r2, r3
 8001640:	58d3      	ldr	r3, [r2, r3]
 8001642:	6848      	ldr	r0, [r1, #4]
 8001644:	4798      	blx	r3
	/* Terminate this task */
	TaskKill(currentTask);
 8001646:	6820      	ldr	r0, [r4, #0]
 8001648:	f7ff ff84 	bl	8001554 <TaskKill>
	/* Call scheduler, Never returns */
	TaskSwitcher();
 800164c:	f7ff bfb6 	b.w	80015bc <TaskSwitcher>
 8001650:	20001080 	.word	0x20001080
 8001654:	20000e50 	.word	0x20000e50

08001658 <TaskAdd>:
//                      void pointer pointing towards the data
// RETURNS      : 
//               int32_t
//		       returns the index of task_t array in which the function was added
int32_t TaskAdd(void (*f)(void *data), void *data)
{
 8001658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800165c:	4d15      	ldr	r5, [pc, #84]	; (80016b4 <TaskAdd+0x5c>)
 800165e:	4e16      	ldr	r6, [pc, #88]	; (80016b8 <TaskAdd+0x60>)
 8001660:	4607      	mov	r7, r0
 8001662:	4688      	mov	r8, r1
 	/* Fill in initial PCB */ 	/* for loop to find an empty slot */
 	for( int i=0; i<MAX_TASKS; i++) 
 8001664:	2400      	movs	r4, #0
 	{
 		memset(&(tasks[i].pcb),0,sizeof(tasks[i].pcb));
 8001666:	4628      	mov	r0, r5
 8001668:	2100      	movs	r1, #0
 800166a:	222c      	movs	r2, #44	; 0x2c
 800166c:	f004 f9d4 	bl	8005a18 <memset>
 		tasks[i].pcb.sp =(uint32_t)(&(stacks[i][TASK_STACK_SIZE-4]));
 		tasks[i].pcb.fp =(uint32_t)(&(stacks[i][TASK_STACK_SIZE-4]));
 		tasks[i].pcb.lr =(uint32_t)TaskShell;
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <TaskAdd+0x64>)
 8001672:	626b      	str	r3, [r5, #36]	; 0x24
 		/* Put an initial stack frame on too */
 		stacks[i][TASK_STACK_SIZE-1]=(uint32_t)(TaskShell);
 8001674:	60f3      	str	r3, [r6, #12]
 		if(tasks[i].f == NULL)
 8001676:	f855 3c0c 	ldr.w	r3, [r5, #-12]
{
 	/* Fill in initial PCB */ 	/* for loop to find an empty slot */
 	for( int i=0; i<MAX_TASKS; i++) 
 	{
 		memset(&(tasks[i].pcb),0,sizeof(tasks[i].pcb));
 		tasks[i].pcb.sp =(uint32_t)(&(stacks[i][TASK_STACK_SIZE-4]));
 800167a:	62ae      	str	r6, [r5, #40]	; 0x28
 		tasks[i].pcb.fp =(uint32_t)(&(stacks[i][TASK_STACK_SIZE-4]));
 800167c:	61ee      	str	r6, [r5, #28]
 		tasks[i].pcb.lr =(uint32_t)TaskShell;
 		/* Put an initial stack frame on too */
 		stacks[i][TASK_STACK_SIZE-1]=(uint32_t)(TaskShell);
 		if(tasks[i].f == NULL)
 800167e:	b96b      	cbnz	r3, 800169c <TaskAdd+0x44>
 		{
 			tasks[i].f = f;				// assign the passed function pointer to it
 8001680:	2338      	movs	r3, #56	; 0x38
 8001682:	4363      	muls	r3, r4
 8001684:	490e      	ldr	r1, [pc, #56]	; (80016c0 <TaskAdd+0x68>)
 8001686:	18ca      	adds	r2, r1, r3
 8001688:	50cf      	str	r7, [r1, r3]
 			tasks[i].data = data;			// assign the assoiciated data pointer to it
 			tasks[i].stack = stacks[i];		// assign the assoiciated stack to it
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <TaskAdd+0x6c>)
 		/* Put an initial stack frame on too */
 		stacks[i][TASK_STACK_SIZE-1]=(uint32_t)(TaskShell);
 		if(tasks[i].f == NULL)
 		{
 			tasks[i].f = f;				// assign the passed function pointer to it
 			tasks[i].data = data;			// assign the assoiciated data pointer to it
 800168c:	f8c2 8004 	str.w	r8, [r2, #4]
 			tasks[i].stack = stacks[i];		// assign the assoiciated stack to it
 8001690:	eb03 2384 	add.w	r3, r3, r4, lsl #10
 8001694:	6093      	str	r3, [r2, #8]
 			return i;				// return the index at whuch the function was added
 8001696:	4620      	mov	r0, r4
 8001698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
//               int32_t
//		       returns the index of task_t array in which the function was added
int32_t TaskAdd(void (*f)(void *data), void *data)
{
 	/* Fill in initial PCB */ 	/* for loop to find an empty slot */
 	for( int i=0; i<MAX_TASKS; i++) 
 800169c:	3401      	adds	r4, #1
 800169e:	2c0a      	cmp	r4, #10
 80016a0:	f105 0538 	add.w	r5, r5, #56	; 0x38
 80016a4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80016a8:	d1dd      	bne.n	8001666 <TaskAdd+0xe>
 			tasks[i].data = data;			// assign the assoiciated data pointer to it
 			tasks[i].stack = stacks[i];		// assign the assoiciated stack to it
 			return i;				// return the index at whuch the function was added
 		}
 	}
 	return -1;
 80016aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80016ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016b2:	bf00      	nop
 80016b4:	20000e5c 	.word	0x20000e5c
 80016b8:	20001474 	.word	0x20001474
 80016bc:	08001635 	.word	0x08001635
 80016c0:	20000e50 	.word	0x20000e50
 80016c4:	20001084 	.word	0x20001084

080016c8 <Task1>:
//      This function prints Task 1 on minicom
// PARAMETERS   : void *data
// RETURNS      : void

void Task1(void *data)
{
 80016c8:	b570      	push	{r4, r5, r6, lr}
	
	printf(" Task 1 starts \n");
 80016ca:	4818      	ldr	r0, [pc, #96]	; (800172c <Task1+0x64>)
 80016cc:	f004 fa3e 	bl	8005b4c <puts>
	//variable to save led numbers from 0 to 7
	//Initialized to zero for even numbered while loop
	int8_t ledIndex = 0 ;
 80016d0:	2500      	movs	r5, #0
	//While loop to turn on even numbered LEds (0,2,4,6)
	while(ledIndex <= 6)
 80016d2:	2d08      	cmp	r5, #8
 80016d4:	d00f      	beq.n	80016f6 <Task1+0x2e>
	{
		//Turn ON led stored in led index 
		BSP_LED_On(ledIndex);
 80016d6:	b2ec      	uxtb	r4, r5
		//if the timer register/variable value is more than 1 sencond then 
		if(myTickCount > DELAYOF1SECOND )
 80016d8:	4e15      	ldr	r6, [pc, #84]	; (8001730 <Task1+0x68>)
	int8_t ledIndex = 0 ;
	//While loop to turn on even numbered LEds (0,2,4,6)
	while(ledIndex <= 6)
	{
		//Turn ON led stored in led index 
		BSP_LED_On(ledIndex);
 80016da:	4620      	mov	r0, r4
 80016dc:	f004 f8c6 	bl	800586c <BSP_LED_On>
		//if the timer register/variable value is more than 1 sencond then 
		if(myTickCount > DELAYOF1SECOND )
 80016e0:	6833      	ldr	r3, [r6, #0]
 80016e2:	2b64      	cmp	r3, #100	; 0x64
 80016e4:	d9f5      	bls.n	80016d2 <Task1+0xa>
		{
			//Turn OFF led stored in led index 
			BSP_LED_Off(ledIndex);
 80016e6:	4620      	mov	r0, r4
 80016e8:	f004 f8ce 	bl	8005888 <BSP_LED_Off>
 80016ec:	3402      	adds	r4, #2
			//reset the timer variable to zero
			myTickCount = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	6033      	str	r3, [r6, #0]
 80016f2:	b2e5      	uxtb	r5, r4
 80016f4:	e7ed      	b.n	80016d2 <Task1+0xa>
 80016f6:	2507      	movs	r5, #7
	}

	//led index initialized to 7 for odd numbered while loop
	ledIndex = 7;
	//While loop to turn on odd numbered LEds (7,5,3,1) in deascending order
	while (ledIndex >= 1 )
 80016f8:	2dff      	cmp	r5, #255	; 0xff
 80016fa:	d00f      	beq.n	800171c <Task1+0x54>
	{
		//Turn ON led stored in led index 	
		BSP_LED_On(ledIndex);
 80016fc:	b2ec      	uxtb	r4, r5
		//if the timer register/variable value is more than 1 sencond then 
		if(myTickCount > DELAYOF1SECOND )
 80016fe:	4e0c      	ldr	r6, [pc, #48]	; (8001730 <Task1+0x68>)
	ledIndex = 7;
	//While loop to turn on odd numbered LEds (7,5,3,1) in deascending order
	while (ledIndex >= 1 )
	{
		//Turn ON led stored in led index 	
		BSP_LED_On(ledIndex);
 8001700:	4620      	mov	r0, r4
 8001702:	f004 f8b3 	bl	800586c <BSP_LED_On>
		//if the timer register/variable value is more than 1 sencond then 
		if(myTickCount > DELAYOF1SECOND )
 8001706:	6833      	ldr	r3, [r6, #0]
 8001708:	2b64      	cmp	r3, #100	; 0x64
 800170a:	d9f5      	bls.n	80016f8 <Task1+0x30>
		{
			//Turn OFF led stored in led index 
			BSP_LED_Off(ledIndex);
 800170c:	4620      	mov	r0, r4
 800170e:	f004 f8bb 	bl	8005888 <BSP_LED_Off>
 8001712:	3c02      	subs	r4, #2
			//reset the timer variable to zero
			myTickCount = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	6033      	str	r3, [r6, #0]
 8001718:	b2e5      	uxtb	r5, r4
 800171a:	e7ed      	b.n	80016f8 <Task1+0x30>
			//increment the ledindex by 2 so only even numbered leds will be turned on
			ledIndex -= 2;
		}
	}	
	TaskSwitcher();   // task yields
 800171c:	f7ff ff4e 	bl	80015bc <TaskSwitcher>
	printf(" Task 1 ends \n");
 8001720:	4804      	ldr	r0, [pc, #16]	; (8001734 <Task1+0x6c>)
}
 8001722:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			//increment the ledindex by 2 so only even numbered leds will be turned on
			ledIndex -= 2;
		}
	}	
	TaskSwitcher();   // task yields
	printf(" Task 1 ends \n");
 8001726:	f004 ba11 	b.w	8005b4c <puts>
 800172a:	bf00      	nop
 800172c:	0800ab26 	.word	0x0800ab26
 8001730:	20000000 	.word	0x20000000
 8001734:	0800ab36 	.word	0x0800ab36

08001738 <Task2>:
// DESCRIPTION  :
//      This function prints Task 2 on minicom
// PARAMETERS   : void *data
// RETURNS      : void
void Task2(void *data)
{
 8001738:	b538      	push	{r3, r4, r5, lr}
	printf(" Task 2 starts \n");
 800173a:	4810      	ldr	r0, [pc, #64]	; (800177c <Task2+0x44>)
 800173c:	f004 fa06 	bl	8005b4c <puts>
	int ledIndex = 0;            // ledIndex
	for(ledIndex = 0; ledIndex < 8; ledIndex++)  // for loop to turn on all the leds
 8001740:	2400      	movs	r4, #0
	{
		BSP_LED_On(ledIndex);
 8001742:	b2e0      	uxtb	r0, r4
// RETURNS      : void
void Task2(void *data)
{
	printf(" Task 2 starts \n");
	int ledIndex = 0;            // ledIndex
	for(ledIndex = 0; ledIndex < 8; ledIndex++)  // for loop to turn on all the leds
 8001744:	3401      	adds	r4, #1
	{
		BSP_LED_On(ledIndex);
 8001746:	f004 f891 	bl	800586c <BSP_LED_On>
// RETURNS      : void
void Task2(void *data)
{
	printf(" Task 2 starts \n");
	int ledIndex = 0;            // ledIndex
	for(ledIndex = 0; ledIndex < 8; ledIndex++)  // for loop to turn on all the leds
 800174a:	2c08      	cmp	r4, #8
 800174c:	d1f9      	bne.n	8001742 <Task2+0xa>
	{
		BSP_LED_On(ledIndex);
	}
	ledIndex = 0;	
	if(myTickCount > DELAYOF1SECOND )
 800174e:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <Task2+0x48>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	2a64      	cmp	r2, #100	; 0x64
 8001754:	461c      	mov	r4, r3
 8001756:	d808      	bhi.n	800176a <Task2+0x32>
	for(int ledIndex = 0; ledIndex < 8; ledIndex++) // for loop to turn off all the leds
	{
		BSP_LED_Off(ledIndex);
	}
	ledIndex = 0;
	myTickCount=0; //resetting timer
 8001758:	2300      	movs	r3, #0
 800175a:	6023      	str	r3, [r4, #0]
	TaskSwitcher(); // task yields
 800175c:	f7ff ff2e 	bl	80015bc <TaskSwitcher>
	printf(" Task 2 ends \n");
 8001760:	4808      	ldr	r0, [pc, #32]	; (8001784 <Task2+0x4c>)
}
 8001762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BSP_LED_Off(ledIndex);
	}
	ledIndex = 0;
	myTickCount=0; //resetting timer
	TaskSwitcher(); // task yields
	printf(" Task 2 ends \n");
 8001766:	f004 b9f1 	b.w	8005b4c <puts>
 800176a:	2500      	movs	r5, #0
	}
	ledIndex = 0;	
	if(myTickCount > DELAYOF1SECOND )
	for(int ledIndex = 0; ledIndex < 8; ledIndex++) // for loop to turn off all the leds
	{
		BSP_LED_Off(ledIndex);
 800176c:	b2e8      	uxtb	r0, r5
	{
		BSP_LED_On(ledIndex);
	}
	ledIndex = 0;	
	if(myTickCount > DELAYOF1SECOND )
	for(int ledIndex = 0; ledIndex < 8; ledIndex++) // for loop to turn off all the leds
 800176e:	3501      	adds	r5, #1
	{
		BSP_LED_Off(ledIndex);
 8001770:	f004 f88a 	bl	8005888 <BSP_LED_Off>
	{
		BSP_LED_On(ledIndex);
	}
	ledIndex = 0;	
	if(myTickCount > DELAYOF1SECOND )
	for(int ledIndex = 0; ledIndex < 8; ledIndex++) // for loop to turn off all the leds
 8001774:	2d08      	cmp	r5, #8
 8001776:	d1f9      	bne.n	800176c <Task2+0x34>
 8001778:	e7ee      	b.n	8001758 <Task2+0x20>
 800177a:	bf00      	nop
 800177c:	0800ab44 	.word	0x0800ab44
 8001780:	20000000 	.word	0x20000000
 8001784:	0800ab54 	.word	0x0800ab54

08001788 <Task3>:
// DESCRIPTION  :
//      This function prints Task 3 on minicom
// PARAMETERS   : void *data
// RETURNS      : void
void Task3(void *data)
{
 8001788:	b508      	push	{r3, lr}
	printf(" Task 3 starts \n");
 800178a:	4805      	ldr	r0, [pc, #20]	; (80017a0 <Task3+0x18>)
 800178c:	f004 f9de 	bl	8005b4c <puts>
	TaskSwitcher();  // task yields
 8001790:	f7ff ff14 	bl	80015bc <TaskSwitcher>
	printf(" Task 3 ends \n");
 8001794:	4803      	ldr	r0, [pc, #12]	; (80017a4 <Task3+0x1c>)
}
 8001796:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
// RETURNS      : void
void Task3(void *data)
{
	printf(" Task 3 starts \n");
	TaskSwitcher();  // task yields
	printf(" Task 3 ends \n");
 800179a:	f004 b9d7 	b.w	8005b4c <puts>
 800179e:	bf00      	nop
 80017a0:	0800ab62 	.word	0x0800ab62
 80017a4:	0800ab72 	.word	0x0800ab72

080017a8 <Task4>:
// DESCRIPTION  :
//      This function prints Task 4 on minicom
// PARAMETERS   : void *data
// RETURNS      : void
void Task4(void *data)
{
 80017a8:	b508      	push	{r3, lr}
	printf(" Task 4 starts \n");
 80017aa:	4805      	ldr	r0, [pc, #20]	; (80017c0 <Task4+0x18>)
 80017ac:	f004 f9ce 	bl	8005b4c <puts>
	TaskSwitcher();  // task yields
 80017b0:	f7ff ff04 	bl	80015bc <TaskSwitcher>
	printf(" Task 4 ends \n");
 80017b4:	4803      	ldr	r0, [pc, #12]	; (80017c4 <Task4+0x1c>)
}
 80017b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
// RETURNS      : void
void Task4(void *data)
{
	printf(" Task 4 starts \n");
	TaskSwitcher();  // task yields
	printf(" Task 4 ends \n");
 80017ba:	f004 b9c7 	b.w	8005b4c <puts>
 80017be:	bf00      	nop
 80017c0:	0800ab80 	.word	0x0800ab80
 80017c4:	0800ab90 	.word	0x0800ab90

080017c8 <Task5>:
// DESCRIPTION  :
//      This function prints Task 5 on minicom
// PARAMETERS   : void *data
// RETURNS      : void
void Task5(void *data)
{
 80017c8:	b508      	push	{r3, lr}
	printf(" Task 5 starts \n");
 80017ca:	4805      	ldr	r0, [pc, #20]	; (80017e0 <Task5+0x18>)
 80017cc:	f004 f9be 	bl	8005b4c <puts>
	TaskSwitcher();  // task yields
 80017d0:	f7ff fef4 	bl	80015bc <TaskSwitcher>
	printf(" Task 5 ends \n");
 80017d4:	4803      	ldr	r0, [pc, #12]	; (80017e4 <Task5+0x1c>)
}
 80017d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
// RETURNS      : void
void Task5(void *data)
{
	printf(" Task 5 starts \n");
	TaskSwitcher();  // task yields
	printf(" Task 5 ends \n");
 80017da:	f004 b9b7 	b.w	8005b4c <puts>
 80017de:	bf00      	nop
 80017e0:	0800ab9e 	.word	0x0800ab9e
 80017e4:	0800abae 	.word	0x0800abae

080017e8 <TaskInitialise1>:
}
/*Initialisising Task*/
void TaskInitialise1(int mode)
{
 	TaskInit();
 80017e8:	f7ff bed2 	b.w	8001590 <TaskInit>

080017ec <CmdTaskAdd>:
//      This function will add tasks to the tasks array so that task switcher will execute them.
// PARAMETERS   : void
// RETURNS      : void

void CmdTaskAdd(int mode)
{
 80017ec:	b507      	push	{r0, r1, r2, lr}
	if(mode != CMD_INTERACTIVE) 
 80017ee:	2800      	cmp	r0, #0
 80017f0:	d131      	bne.n	8001856 <CmdTaskAdd+0x6a>
	{
    		return;
  	}
	uint32_t rc,functionNumber;
	rc = fetch_uint32_arg(&functionNumber);   // to fetch integer argument from minicom
 80017f2:	a801      	add	r0, sp, #4
 80017f4:	f000 fc4e 	bl	8002094 <fetch_uint32_arg>
  	if(rc) // if user does not enter the integer argument then
 80017f8:	b108      	cbz	r0, 80017fe <CmdTaskAdd+0x12>
	{
    		printf("missing function Number\n");
 80017fa:	4818      	ldr	r0, [pc, #96]	; (800185c <CmdTaskAdd+0x70>)
 80017fc:	e025      	b.n	800184a <CmdTaskAdd+0x5e>
    	return;
	}
	switch(functionNumber)  // switch statement to add functions depending upon the integer argument
 80017fe:	9b01      	ldr	r3, [sp, #4]
 8001800:	3b01      	subs	r3, #1
 8001802:	2b04      	cmp	r3, #4
 8001804:	d824      	bhi.n	8001850 <CmdTaskAdd+0x64>
 8001806:	e8df f003 	tbb	[pc, r3]
 800180a:	0903      	.short	0x0903
 800180c:	150f      	.short	0x150f
 800180e:	1b          	.byte	0x1b
 800180f:	00          	.byte	0x00
	{
		case 1: 
		{
			TaskAdd(Task1,(void *)NULL);
 8001810:	4813      	ldr	r0, [pc, #76]	; (8001860 <CmdTaskAdd+0x74>)
 8001812:	2100      	movs	r1, #0
 8001814:	f7ff ff20 	bl	8001658 <TaskAdd>
			printf("(led pattern)function 1 added \n");
 8001818:	4812      	ldr	r0, [pc, #72]	; (8001864 <CmdTaskAdd+0x78>)
 800181a:	e016      	b.n	800184a <CmdTaskAdd+0x5e>
			break;
		}
		case 2: 
		{
			TaskAdd(Task2,(void *)NULL);
 800181c:	4812      	ldr	r0, [pc, #72]	; (8001868 <CmdTaskAdd+0x7c>)
 800181e:	2100      	movs	r1, #0
 8001820:	f7ff ff1a 	bl	8001658 <TaskAdd>
			printf("(all leds at once)function 2 added \n");
 8001824:	4811      	ldr	r0, [pc, #68]	; (800186c <CmdTaskAdd+0x80>)
 8001826:	e010      	b.n	800184a <CmdTaskAdd+0x5e>
			break;
		}
		case 3: 
		{
			TaskAdd(Task3,(void *)NULL);
 8001828:	4811      	ldr	r0, [pc, #68]	; (8001870 <CmdTaskAdd+0x84>)
 800182a:	2100      	movs	r1, #0
 800182c:	f7ff ff14 	bl	8001658 <TaskAdd>
			printf("Task 3 added \n");
 8001830:	4810      	ldr	r0, [pc, #64]	; (8001874 <CmdTaskAdd+0x88>)
 8001832:	e00a      	b.n	800184a <CmdTaskAdd+0x5e>
			break;
		}
		case 4: 
		{
			TaskAdd(Task4,(void *)NULL);
 8001834:	4810      	ldr	r0, [pc, #64]	; (8001878 <CmdTaskAdd+0x8c>)
 8001836:	2100      	movs	r1, #0
 8001838:	f7ff ff0e 	bl	8001658 <TaskAdd>
			printf("task 4 added \n");
 800183c:	480f      	ldr	r0, [pc, #60]	; (800187c <CmdTaskAdd+0x90>)
 800183e:	e004      	b.n	800184a <CmdTaskAdd+0x5e>
			break;
		}
		case 5: 
		{
			TaskAdd(Task5,(void *)NULL);
 8001840:	480f      	ldr	r0, [pc, #60]	; (8001880 <CmdTaskAdd+0x94>)
 8001842:	2100      	movs	r1, #0
 8001844:	f7ff ff08 	bl	8001658 <TaskAdd>
			printf("task 5 added \n");
 8001848:	480e      	ldr	r0, [pc, #56]	; (8001884 <CmdTaskAdd+0x98>)
 800184a:	f004 f97f 	bl	8005b4c <puts>
			break;
 800184e:	e002      	b.n	8001856 <CmdTaskAdd+0x6a>
		}
		default:
		{
			printf("wrong function number,try again");
 8001850:	480d      	ldr	r0, [pc, #52]	; (8001888 <CmdTaskAdd+0x9c>)
 8001852:	f004 f92f 	bl	8005ab4 <printf>
		}
	}
}
 8001856:	b003      	add	sp, #12
 8001858:	f85d fb04 	ldr.w	pc, [sp], #4
 800185c:	0800abbc 	.word	0x0800abbc
 8001860:	080016c9 	.word	0x080016c9
 8001864:	0800abd4 	.word	0x0800abd4
 8001868:	08001739 	.word	0x08001739
 800186c:	0800abf3 	.word	0x0800abf3
 8001870:	08001789 	.word	0x08001789
 8001874:	0800ac17 	.word	0x0800ac17
 8001878:	080017a9 	.word	0x080017a9
 800187c:	0800ac25 	.word	0x0800ac25
 8001880:	080017c9 	.word	0x080017c9
 8001884:	0800ac33 	.word	0x0800ac33
 8001888:	0800ac41 	.word	0x0800ac41

0800188c <CmdCooperativeSwitcher>:
// DESCRIPTION  :
//      This function will call the taskSwitcher() function to starts the co-operative task switching
// PARAMETERS   : void
// RETURNS      : void
void CmdCooperativeSwitcher(int mode)
 {
 800188c:	b508      	push	{r3, lr}
 	if(mode!= CMD_INTERACTIVE)
 800188e:	b948      	cbnz	r0, 80018a4 <CmdCooperativeSwitcher+0x18>
 	{
     		return;
 	}
 printf("Tasks Initialised \n");
 8001890:	4805      	ldr	r0, [pc, #20]	; (80018a8 <CmdCooperativeSwitcher+0x1c>)
 8001892:	f004 f95b 	bl	8005b4c <puts>
 TaskSwitcher();
 8001896:	f7ff fe91 	bl	80015bc <TaskSwitcher>
 printf("Task Switcher in action\n");
 800189a:	4804      	ldr	r0, [pc, #16]	; (80018ac <CmdCooperativeSwitcher+0x20>)
   
 }
 800189c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 	{
     		return;
 	}
 printf("Tasks Initialised \n");
 TaskSwitcher();
 printf("Task Switcher in action\n");
 80018a0:	f004 b954 	b.w	8005b4c <puts>
 80018a4:	bd08      	pop	{r3, pc}
 80018a6:	bf00      	nop
 80018a8:	0800ac61 	.word	0x0800ac61
 80018ac:	0800ac74 	.word	0x0800ac74

080018b0 <CmdTest>:
int mytest( int x );

void CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return;
 80018b0:	2801      	cmp	r0, #1
#include "common.h"

int mytest( int x );

void CmdTest(int action)
{
 80018b2:	b508      	push	{r3, lr}

  if(action==CMD_SHORT_HELP) return;
 80018b4:	d00f      	beq.n	80018d6 <CmdTest+0x26>
  if(action==CMD_LONG_HELP) {
 80018b6:	2802      	cmp	r0, #2
 80018b8:	d104      	bne.n	80018c4 <CmdTest+0x14>
    printf("testasm\n\n"
 80018ba:	4807      	ldr	r0, [pc, #28]	; (80018d8 <CmdTest+0x28>)
	   );

    return;
  }
  printf("ret val = %d\n", mytest( 77  ) );
}
 80018bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return;
  if(action==CMD_LONG_HELP) {
    printf("testasm\n\n"
 80018c0:	f004 b944 	b.w	8005b4c <puts>
	   "This command tests the C to assembler interface\n"
	   );

    return;
  }
  printf("ret val = %d\n", mytest( 77  ) );
 80018c4:	204d      	movs	r0, #77	; 0x4d
 80018c6:	f7fe fc8d 	bl	80001e4 <mytest>
}
 80018ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	   "This command tests the C to assembler interface\n"
	   );

    return;
  }
  printf("ret val = %d\n", mytest( 77  ) );
 80018ce:	4601      	mov	r1, r0
 80018d0:	4802      	ldr	r0, [pc, #8]	; (80018dc <CmdTest+0x2c>)
 80018d2:	f004 b8ef 	b.w	8005ab4 <printf>
 80018d6:	bd08      	pop	{r3, pc}
 80018d8:	0800acfd 	.word	0x0800acfd
 80018dc:	0800ad36 	.word	0x0800ad36

080018e0 <lcdinit>:




void lcdinit(int mode)
{
 80018e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
if(mode != CMD_INTERACTIVE) {
 80018e4:	4605      	mov	r5, r0
 80018e6:	bb68      	cbnz	r0, 8001944 <lcdinit+0x64>
    return;
  }
__GPIOD_CLK_ENABLE();
 80018e8:	4e17      	ldr	r6, [pc, #92]	; (8001948 <lcdinit+0x68>)

//GPIO_InitTypeDef  GPIO_InitStruct;
GPIO_InitStruct.Pin = (GPIO_PIN_7 |GPIO_PIN_5 |GPIO_PIN_6 |GPIO_PIN_8 | GPIO_PIN_9 
 80018ea:	4c18      	ldr	r4, [pc, #96]	; (800194c <lcdinit+0x6c>)
void lcdinit(int mode)
{
if(mode != CMD_INTERACTIVE) {
    return;
  }
__GPIOD_CLK_ENABLE();
 80018ec:	6973      	ldr	r3, [r6, #20]
 80018ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018f2:	6173      	str	r3, [r6, #20]

//GPIO_InitTypeDef  GPIO_InitStruct;
GPIO_InitStruct.Pin = (GPIO_PIN_7 |GPIO_PIN_5 |GPIO_PIN_6 |GPIO_PIN_8 | GPIO_PIN_9 
| GPIO_PIN_10|GPIO_PIN_0 | GPIO_PIN_1 |GPIO_PIN_2 | GPIO_PIN_3 |GPIO_PIN_4);
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f4:	2701      	movs	r7, #1
 80018f6:	f240 73ff 	movw	r3, #2047	; 0x7ff
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	60a0      	str	r0, [r4, #8]
GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80018fc:	f04f 0803 	mov.w	r8, #3
GPIO_InitStruct.Alternate = 0;
 8001900:	6120      	str	r0, [r4, #16]
HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001902:	4621      	mov	r1, r4
 8001904:	4812      	ldr	r0, [pc, #72]	; (8001950 <lcdinit+0x70>)
//GPIO_InitTypeDef  GPIO_InitStruct;
GPIO_InitStruct.Pin = (GPIO_PIN_7 |GPIO_PIN_5 |GPIO_PIN_6 |GPIO_PIN_8 | GPIO_PIN_9 
| GPIO_PIN_10|GPIO_PIN_0 | GPIO_PIN_1 |GPIO_PIN_2 | GPIO_PIN_3 |GPIO_PIN_4);
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
GPIO_InitStruct.Pull = GPIO_NOPULL;
GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001906:	f8c4 800c 	str.w	r8, [r4, #12]
__GPIOD_CLK_ENABLE();

//GPIO_InitTypeDef  GPIO_InitStruct;
GPIO_InitStruct.Pin = (GPIO_PIN_7 |GPIO_PIN_5 |GPIO_PIN_6 |GPIO_PIN_8 | GPIO_PIN_9 
| GPIO_PIN_10|GPIO_PIN_0 | GPIO_PIN_1 |GPIO_PIN_2 | GPIO_PIN_3 |GPIO_PIN_4);
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190a:	e884 0088 	stmia.w	r4, {r3, r7}
GPIO_InitStruct.Pull = GPIO_NOPULL;
GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
GPIO_InitStruct.Alternate = 0;
HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800190e:	f001 fe6f 	bl	80035f0 <HAL_GPIO_Init>



__GPIOA_CLK_ENABLE();
 8001912:	6973      	ldr	r3, [r6, #20]
 8001914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001918:	6173      	str	r3, [r6, #20]
GPIO_InitStruct.Pin = (GPIO_PIN_10);
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
GPIO_InitStruct.Pull = GPIO_NOPULL;
GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
GPIO_InitStruct.Alternate = 0;
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191a:	4621      	mov	r1, r4


__GPIOA_CLK_ENABLE();

//GPIO_InitTypeDef  GPIO_InitStruct;
GPIO_InitStruct.Pin = (GPIO_PIN_10);
 800191c:	f44f 6680 	mov.w	r6, #1024	; 0x400
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
GPIO_InitStruct.Pull = GPIO_NOPULL;
GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
GPIO_InitStruct.Alternate = 0;
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

__GPIOA_CLK_ENABLE();

//GPIO_InitTypeDef  GPIO_InitStruct;
GPIO_InitStruct.Pin = (GPIO_PIN_10);
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001924:	e884 00c0 	stmia.w	r4, {r6, r7}
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	60a5      	str	r5, [r4, #8]
GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800192a:	f8c4 800c 	str.w	r8, [r4, #12]
GPIO_InitStruct.Alternate = 0;
 800192e:	6125      	str	r5, [r4, #16]
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001930:	f001 fe5e 	bl	80035f0 <HAL_GPIO_Init>


HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,1);
 8001934:	4631      	mov	r1, r6
 8001936:	463a      	mov	r2, r7
 8001938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
s_init(); 

return;*/

}
 800193c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
GPIO_InitStruct.Alternate = 0;
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);


HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,1);
 8001940:	f001 bf20 	b.w	8003784 <HAL_GPIO_WritePin>
 8001944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001948:	40021000 	.word	0x40021000
 800194c:	20003884 	.word	0x20003884
 8001950:	48000c00 	.word	0x48000c00

08001954 <Delay>:



void Delay(uint32_t nTime)
{
uint32_t counter = 0;
 8001954:	2300      	movs	r3, #0
while(counter <= nTime)
{
counter++;
 8001956:	3301      	adds	r3, #1


void Delay(uint32_t nTime)
{
uint32_t counter = 0;
while(counter <= nTime)
 8001958:	4283      	cmp	r3, r0
 800195a:	d9fc      	bls.n	8001956 <Delay+0x2>
{
counter++;
}
}
 800195c:	4770      	bx	lr
	...

08001960 <functionCmd>:




void functionCmd(uint32_t pin, uint32_t state)
{
 8001960:	460a      	mov	r2, r1
switch(pin)
 8001962:	280a      	cmp	r0, #10
 8001964:	d829      	bhi.n	80019ba <functionCmd+0x5a>
 8001966:	e8df f000 	tbb	[pc, r0]
 800196a:	0906      	.short	0x0906
 800196c:	1714110e 	.word	0x1714110e
 8001970:	20281d1a 	.word	0x20281d1a
 8001974:	24          	.byte	0x24
 8001975:	00          	.byte	0x00
{
case 0:
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0,state);
 8001976:	4812      	ldr	r0, [pc, #72]	; (80019c0 <functionCmd+0x60>)
 8001978:	2101      	movs	r1, #1
 800197a:	e001      	b.n	8001980 <functionCmd+0x20>
break;

case 1:
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_1,state);
 800197c:	4810      	ldr	r0, [pc, #64]	; (80019c0 <functionCmd+0x60>)
 800197e:	2102      	movs	r1, #2
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	f001 beff 	b.w	8003784 <HAL_GPIO_WritePin>
break;

case 2:
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,state);
 8001986:	480e      	ldr	r0, [pc, #56]	; (80019c0 <functionCmd+0x60>)
 8001988:	2104      	movs	r1, #4
 800198a:	e7f9      	b.n	8001980 <functionCmd+0x20>
break;

case 3:
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_3,state);
 800198c:	480c      	ldr	r0, [pc, #48]	; (80019c0 <functionCmd+0x60>)
 800198e:	2108      	movs	r1, #8
 8001990:	e7f6      	b.n	8001980 <functionCmd+0x20>
break;

case 4:
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_4,state);
 8001992:	480b      	ldr	r0, [pc, #44]	; (80019c0 <functionCmd+0x60>)
 8001994:	2110      	movs	r1, #16
 8001996:	e7f3      	b.n	8001980 <functionCmd+0x20>
break;

case 5:
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,state);
 8001998:	4809      	ldr	r0, [pc, #36]	; (80019c0 <functionCmd+0x60>)
 800199a:	2120      	movs	r1, #32
 800199c:	e7f0      	b.n	8001980 <functionCmd+0x20>
break;

case 6:
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_6,state);
 800199e:	4808      	ldr	r0, [pc, #32]	; (80019c0 <functionCmd+0x60>)
 80019a0:	2140      	movs	r1, #64	; 0x40
 80019a2:	e7ed      	b.n	8001980 <functionCmd+0x20>
break;

case 7:
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_7,state);
 80019a4:	4806      	ldr	r0, [pc, #24]	; (80019c0 <functionCmd+0x60>)
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	e7ea      	b.n	8001980 <functionCmd+0x20>
break;

case 9:
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,state);
 80019aa:	4805      	ldr	r0, [pc, #20]	; (80019c0 <functionCmd+0x60>)
 80019ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019b0:	e7e6      	b.n	8001980 <functionCmd+0x20>
break;

case 10:
HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10,state);
 80019b2:	4803      	ldr	r0, [pc, #12]	; (80019c0 <functionCmd+0x60>)
 80019b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019b8:	e7e2      	b.n	8001980 <functionCmd+0x20>
break;

default:
printf("wrong gpio");
 80019ba:	4802      	ldr	r0, [pc, #8]	; (80019c4 <functionCmd+0x64>)
 80019bc:	f004 b87a 	b.w	8005ab4 <printf>
 80019c0:	48000c00 	.word	0x48000c00
 80019c4:	0800ad5a 	.word	0x0800ad5a

080019c8 <enable>:
}

void enable(uint32_t state)
{

HAL_GPIO_WritePin(GPIOD,GPIO_PIN_9,state);
 80019c8:	b2c2      	uxtb	r2, r0
 80019ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019ce:	4801      	ldr	r0, [pc, #4]	; (80019d4 <enable+0xc>)
 80019d0:	f001 bed8 	b.w	8003784 <HAL_GPIO_WritePin>
 80019d4:	48000c00 	.word	0x48000c00

080019d8 <lcdCmd>:




void lcdCmd(int mode)
{
 80019d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
if(mode != CMD_INTERACTIVE) {
 80019dc:	4604      	mov	r4, r0
 80019de:	2800      	cmp	r0, #0
 80019e0:	f040 8156 	bne.w	8001c90 <lcdCmd+0x2b8>
fetch_string_arg(&b);

int k=0; 


__GPIOD_CLK_ENABLE();
 80019e4:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8001ca0 <lcdCmd+0x2c8>
//GPIO_InitTypeDef  GPIO_InitStruct;
GPIO_InitStruct.Pin = (GPIO_PIN_7 |GPIO_PIN_5 |GPIO_PIN_6 |GPIO_PIN_8 | GPIO_PIN_9 
 80019e8:	4eab      	ldr	r6, [pc, #684]	; (8001c98 <lcdCmd+0x2c0>)
{
if(mode != CMD_INTERACTIVE) {
    return;
  }
char* b;
fetch_string_arg(&b);
 80019ea:	a801      	add	r0, sp, #4
 80019ec:	f000 fb66 	bl	80020bc <fetch_string_arg>

int k=0; 


__GPIOD_CLK_ENABLE();
 80019f0:	f8d8 3014 	ldr.w	r3, [r8, #20]
| GPIO_PIN_10|GPIO_PIN_0 | GPIO_PIN_1 |GPIO_PIN_2 | GPIO_PIN_3 |GPIO_PIN_4);
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
GPIO_InitStruct.Pull = GPIO_NOPULL;
GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
GPIO_InitStruct.Alternate = 0;
HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019f4:	48a9      	ldr	r0, [pc, #676]	; (8001c9c <lcdCmd+0x2c4>)
fetch_string_arg(&b);

int k=0; 


__GPIOD_CLK_ENABLE();
 80019f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
//GPIO_InitTypeDef  GPIO_InitStruct;
GPIO_InitStruct.Pin = (GPIO_PIN_7 |GPIO_PIN_5 |GPIO_PIN_6 |GPIO_PIN_8 | GPIO_PIN_9 
| GPIO_PIN_10|GPIO_PIN_0 | GPIO_PIN_1 |GPIO_PIN_2 | GPIO_PIN_3 |GPIO_PIN_4);
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fa:	2501      	movs	r5, #1
fetch_string_arg(&b);

int k=0; 


__GPIOD_CLK_ENABLE();
 80019fc:	f8c8 3014 	str.w	r3, [r8, #20]
//GPIO_InitTypeDef  GPIO_InitStruct;
GPIO_InitStruct.Pin = (GPIO_PIN_7 |GPIO_PIN_5 |GPIO_PIN_6 |GPIO_PIN_8 | GPIO_PIN_9 
| GPIO_PIN_10|GPIO_PIN_0 | GPIO_PIN_1 |GPIO_PIN_2 | GPIO_PIN_3 |GPIO_PIN_4);
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
GPIO_InitStruct.Pull = GPIO_NOPULL;
GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001a00:	2703      	movs	r7, #3

__GPIOD_CLK_ENABLE();
//GPIO_InitTypeDef  GPIO_InitStruct;
GPIO_InitStruct.Pin = (GPIO_PIN_7 |GPIO_PIN_5 |GPIO_PIN_6 |GPIO_PIN_8 | GPIO_PIN_9 
| GPIO_PIN_10|GPIO_PIN_0 | GPIO_PIN_1 |GPIO_PIN_2 | GPIO_PIN_3 |GPIO_PIN_4);
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a02:	f240 73ff 	movw	r3, #2047	; 0x7ff
GPIO_InitStruct.Pull = GPIO_NOPULL;
GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
GPIO_InitStruct.Alternate = 0;
HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a06:	4631      	mov	r1, r6

__GPIOD_CLK_ENABLE();
//GPIO_InitTypeDef  GPIO_InitStruct;
GPIO_InitStruct.Pin = (GPIO_PIN_7 |GPIO_PIN_5 |GPIO_PIN_6 |GPIO_PIN_8 | GPIO_PIN_9 
| GPIO_PIN_10|GPIO_PIN_0 | GPIO_PIN_1 |GPIO_PIN_2 | GPIO_PIN_3 |GPIO_PIN_4);
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a08:	e886 0028 	stmia.w	r6, {r3, r5}
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	60b4      	str	r4, [r6, #8]
GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001a0e:	60f7      	str	r7, [r6, #12]
GPIO_InitStruct.Alternate = 0;
 8001a10:	6134      	str	r4, [r6, #16]
HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a12:	f001 fded 	bl	80035f0 <HAL_GPIO_Init>



__GPIOA_CLK_ENABLE();
 8001a16:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8001a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a1e:	f8c8 3014 	str.w	r3, [r8, #20]
GPIO_InitStruct.Pin = (GPIO_PIN_10);
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
GPIO_InitStruct.Pull = GPIO_NOPULL;
GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
GPIO_InitStruct.Alternate = 0;
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000


__GPIOA_CLK_ENABLE();

//GPIO_InitTypeDef  GPIO_InitStruct;
GPIO_InitStruct.Pin = (GPIO_PIN_10);
 8001a26:	f44f 6880 	mov.w	r8, #1024	; 0x400
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
GPIO_InitStruct.Pull = GPIO_NOPULL;
GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
GPIO_InitStruct.Alternate = 0;
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2a:	4631      	mov	r1, r6


__GPIOA_CLK_ENABLE();

//GPIO_InitTypeDef  GPIO_InitStruct;
GPIO_InitStruct.Pin = (GPIO_PIN_10);
 8001a2c:	f8c6 8000 	str.w	r8, [r6]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a30:	6075      	str	r5, [r6, #4]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	60b4      	str	r4, [r6, #8]
GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001a34:	60f7      	str	r7, [r6, #12]
GPIO_InitStruct.Alternate = 0;
 8001a36:	6134      	str	r4, [r6, #16]
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a38:	f001 fdda 	bl	80035f0 <HAL_GPIO_Init>


HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,1);
 8001a3c:	462a      	mov	r2, r5
 8001a3e:	4641      	mov	r1, r8
 8001a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a44:	f001 fe9e 	bl	8003784 <HAL_GPIO_WritePin>

//Sets to 8-bit operation and selects 2-line display and 5 ×8 dot character font.
HAL_Delay(5);
 8001a48:	2005      	movs	r0, #5
 8001a4a:	f001 fd5f 	bl	800350c <HAL_Delay>

functionCmd(10,0);
 8001a4e:	200a      	movs	r0, #10
 8001a50:	4621      	mov	r1, r4
 8001a52:	f7ff ff85 	bl	8001960 <functionCmd>
functionCmd(9,0);
 8001a56:	4621      	mov	r1, r4
 8001a58:	2009      	movs	r0, #9
 8001a5a:	f7ff ff81 	bl	8001960 <functionCmd>
Delay(100);
 8001a5e:	2064      	movs	r0, #100	; 0x64
 8001a60:	f7ff ff78 	bl	8001954 <Delay>
enable(1);
 8001a64:	4628      	mov	r0, r5
 8001a66:	f7ff ffaf 	bl	80019c8 <enable>
Delay(250);
 8001a6a:	20fa      	movs	r0, #250	; 0xfa
 8001a6c:	f7ff ff72 	bl	8001954 <Delay>
functionCmd(7,0);
 8001a70:	2007      	movs	r0, #7
 8001a72:	4621      	mov	r1, r4
 8001a74:	f7ff ff74 	bl	8001960 <functionCmd>
functionCmd(6,0);
 8001a78:	2006      	movs	r0, #6
 8001a7a:	4621      	mov	r1, r4
 8001a7c:	f7ff ff70 	bl	8001960 <functionCmd>
functionCmd(5,1);
 8001a80:	2005      	movs	r0, #5
 8001a82:	4629      	mov	r1, r5
 8001a84:	f7ff ff6c 	bl	8001960 <functionCmd>
functionCmd(4,1);
 8001a88:	2004      	movs	r0, #4
 8001a8a:	4629      	mov	r1, r5
 8001a8c:	f7ff ff68 	bl	8001960 <functionCmd>
functionCmd(3,1);
 8001a90:	4638      	mov	r0, r7
 8001a92:	4629      	mov	r1, r5
 8001a94:	f7ff ff64 	bl	8001960 <functionCmd>
functionCmd(2,0);
 8001a98:	2002      	movs	r0, #2
 8001a9a:	4621      	mov	r1, r4
 8001a9c:	f7ff ff60 	bl	8001960 <functionCmd>
functionCmd(1,0);
 8001aa0:	4628      	mov	r0, r5
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	f7ff ff5c 	bl	8001960 <functionCmd>
functionCmd(0,0);
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	4620      	mov	r0, r4
 8001aac:	f7ff ff58 	bl	8001960 <functionCmd>
Delay(70);
 8001ab0:	2046      	movs	r0, #70	; 0x46
 8001ab2:	f7ff ff4f 	bl	8001954 <Delay>
enable(0);
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	f7ff ff86 	bl	80019c8 <enable>

//Turns on display and cursor. All display is in space mode because of initialization.
HAL_Delay(5);
 8001abc:	2005      	movs	r0, #5
 8001abe:	f001 fd25 	bl	800350c <HAL_Delay>
//enable(1);
functionCmd(10,0);
 8001ac2:	200a      	movs	r0, #10
 8001ac4:	4621      	mov	r1, r4
 8001ac6:	f7ff ff4b 	bl	8001960 <functionCmd>
functionCmd(9,0);
 8001aca:	4621      	mov	r1, r4
 8001acc:	2009      	movs	r0, #9
 8001ace:	f7ff ff47 	bl	8001960 <functionCmd>
Delay(100);
 8001ad2:	2064      	movs	r0, #100	; 0x64
 8001ad4:	f7ff ff3e 	bl	8001954 <Delay>
enable(1);
 8001ad8:	4628      	mov	r0, r5
 8001ada:	f7ff ff75 	bl	80019c8 <enable>
Delay(250);
 8001ade:	20fa      	movs	r0, #250	; 0xfa
 8001ae0:	f7ff ff38 	bl	8001954 <Delay>
functionCmd(7,0);
 8001ae4:	2007      	movs	r0, #7
 8001ae6:	4621      	mov	r1, r4
 8001ae8:	f7ff ff3a 	bl	8001960 <functionCmd>
functionCmd(6,0);
 8001aec:	2006      	movs	r0, #6
 8001aee:	4621      	mov	r1, r4
 8001af0:	f7ff ff36 	bl	8001960 <functionCmd>
functionCmd(5,0);
 8001af4:	2005      	movs	r0, #5
 8001af6:	4621      	mov	r1, r4
 8001af8:	f7ff ff32 	bl	8001960 <functionCmd>
functionCmd(4,0);
 8001afc:	2004      	movs	r0, #4
 8001afe:	4621      	mov	r1, r4
 8001b00:	f7ff ff2e 	bl	8001960 <functionCmd>
functionCmd(3,1);
 8001b04:	4638      	mov	r0, r7
 8001b06:	4629      	mov	r1, r5
 8001b08:	f7ff ff2a 	bl	8001960 <functionCmd>
functionCmd(2,1);
 8001b0c:	2002      	movs	r0, #2
 8001b0e:	4629      	mov	r1, r5
 8001b10:	f7ff ff26 	bl	8001960 <functionCmd>
functionCmd(1,1);
 8001b14:	4628      	mov	r0, r5
 8001b16:	4629      	mov	r1, r5
 8001b18:	f7ff ff22 	bl	8001960 <functionCmd>
functionCmd(0,0);
 8001b1c:	4621      	mov	r1, r4
 8001b1e:	4620      	mov	r0, r4
 8001b20:	f7ff ff1e 	bl	8001960 <functionCmd>
Delay(70);
 8001b24:	2046      	movs	r0, #70	; 0x46
 8001b26:	f7ff ff15 	bl	8001954 <Delay>
enable(0);
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	f7ff ff4c 	bl	80019c8 <enable>


//Sets mode to increment the address by one and to shift the cursor to the 
//right at the time of write to the DD/CGRAM. Display is not shifted.
Delay(400);
 8001b30:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001b34:	f7ff ff0e 	bl	8001954 <Delay>
//enable(1);
functionCmd(10,0);
 8001b38:	200a      	movs	r0, #10
 8001b3a:	4621      	mov	r1, r4
 8001b3c:	f7ff ff10 	bl	8001960 <functionCmd>
functionCmd(9,0);
 8001b40:	4621      	mov	r1, r4
 8001b42:	2009      	movs	r0, #9
 8001b44:	f7ff ff0c 	bl	8001960 <functionCmd>
Delay(100);
 8001b48:	2064      	movs	r0, #100	; 0x64
 8001b4a:	f7ff ff03 	bl	8001954 <Delay>
enable(1);
 8001b4e:	4628      	mov	r0, r5
 8001b50:	f7ff ff3a 	bl	80019c8 <enable>
Delay(250);
 8001b54:	20fa      	movs	r0, #250	; 0xfa
 8001b56:	f7ff fefd 	bl	8001954 <Delay>
functionCmd(7,0);
 8001b5a:	2007      	movs	r0, #7
 8001b5c:	4621      	mov	r1, r4
 8001b5e:	f7ff feff 	bl	8001960 <functionCmd>
functionCmd(6,0);
 8001b62:	2006      	movs	r0, #6
 8001b64:	4621      	mov	r1, r4
 8001b66:	f7ff fefb 	bl	8001960 <functionCmd>
functionCmd(5,0);
 8001b6a:	2005      	movs	r0, #5
 8001b6c:	4621      	mov	r1, r4
 8001b6e:	f7ff fef7 	bl	8001960 <functionCmd>
functionCmd(4,0);
 8001b72:	2004      	movs	r0, #4
 8001b74:	4621      	mov	r1, r4
 8001b76:	f7ff fef3 	bl	8001960 <functionCmd>
functionCmd(3,0);
 8001b7a:	4638      	mov	r0, r7
 8001b7c:	4621      	mov	r1, r4
 8001b7e:	f7ff feef 	bl	8001960 <functionCmd>
functionCmd(2,1);
 8001b82:	2002      	movs	r0, #2
 8001b84:	4629      	mov	r1, r5
 8001b86:	f7ff feeb 	bl	8001960 <functionCmd>
functionCmd(1,1);
 8001b8a:	4628      	mov	r0, r5
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	f7ff fee7 	bl	8001960 <functionCmd>
functionCmd(0,0);
 8001b92:	4620      	mov	r0, r4
 8001b94:	4621      	mov	r1, r4
 8001b96:	f7ff fee3 	bl	8001960 <functionCmd>
Delay(70);
 8001b9a:	2046      	movs	r0, #70	; 0x46
 8001b9c:	f7ff feda 	bl	8001954 <Delay>
enable(0);
 8001ba0:	4620      	mov	r0, r4

GPIOD->ODR=b[k+1]; 


Delay(70);
enable(0);
 8001ba2:	f7ff ff11 	bl	80019c8 <enable>
Delay(70);
enable(0);



for(k=0;b[k];k++)
 8001ba6:	9b01      	ldr	r3, [sp, #4]
 8001ba8:	5d1d      	ldrb	r5, [r3, r4]
{
Delay(400);
 8001baa:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001bae:	3401      	adds	r4, #1
Delay(70);
enable(0);



for(k=0;b[k];k++)
 8001bb0:	b1dd      	cbz	r5, 8001bea <lcdCmd+0x212>
{
Delay(400);
 8001bb2:	f7ff fecf 	bl	8001954 <Delay>
functionCmd(10,1);
 8001bb6:	200a      	movs	r0, #10
 8001bb8:	2101      	movs	r1, #1
 8001bba:	f7ff fed1 	bl	8001960 <functionCmd>
functionCmd(9,0);
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	2009      	movs	r0, #9
 8001bc2:	f7ff fecd 	bl	8001960 <functionCmd>
Delay(100);
 8001bc6:	2064      	movs	r0, #100	; 0x64
 8001bc8:	f7ff fec4 	bl	8001954 <Delay>
enable(1);
 8001bcc:	2001      	movs	r0, #1
 8001bce:	f7ff fefb 	bl	80019c8 <enable>
Delay(250);
 8001bd2:	20fa      	movs	r0, #250	; 0xfa
 8001bd4:	f7ff febe 	bl	8001954 <Delay>


GPIOD->ODR=b[k+1]; 
 8001bd8:	9b01      	ldr	r3, [sp, #4]
 8001bda:	5d1a      	ldrb	r2, [r3, r4]
 8001bdc:	4b2f      	ldr	r3, [pc, #188]	; (8001c9c <lcdCmd+0x2c4>)


Delay(70);
 8001bde:	2046      	movs	r0, #70	; 0x46
Delay(100);
enable(1);
Delay(250);


GPIOD->ODR=b[k+1]; 
 8001be0:	615a      	str	r2, [r3, #20]


Delay(70);
 8001be2:	f7ff feb7 	bl	8001954 <Delay>
enable(0);
 8001be6:	2000      	movs	r0, #0
 8001be8:	e7db      	b.n	8001ba2 <lcdCmd+0x1ca>
}

Delay(400);
 8001bea:	f7ff feb3 	bl	8001954 <Delay>
//enable(1);
functionCmd(10,0);
 8001bee:	200a      	movs	r0, #10
 8001bf0:	4629      	mov	r1, r5
 8001bf2:	f7ff feb5 	bl	8001960 <functionCmd>
functionCmd(9,0);
 8001bf6:	4629      	mov	r1, r5
 8001bf8:	2009      	movs	r0, #9
 8001bfa:	f7ff feb1 	bl	8001960 <functionCmd>
Delay(100);
 8001bfe:	2064      	movs	r0, #100	; 0x64
 8001c00:	f7ff fea8 	bl	8001954 <Delay>
enable(1);
 8001c04:	2001      	movs	r0, #1
 8001c06:	f7ff fedf 	bl	80019c8 <enable>
Delay(250);
 8001c0a:	20fa      	movs	r0, #250	; 0xfa
 8001c0c:	f7ff fea2 	bl	8001954 <Delay>
functionCmd(7,1);
 8001c10:	2007      	movs	r0, #7
 8001c12:	2101      	movs	r1, #1
 8001c14:	f7ff fea4 	bl	8001960 <functionCmd>
functionCmd(6,1);
 8001c18:	2006      	movs	r0, #6
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	f7ff fea0 	bl	8001960 <functionCmd>
functionCmd(5,0);
 8001c20:	2005      	movs	r0, #5
 8001c22:	4629      	mov	r1, r5
 8001c24:	f7ff fe9c 	bl	8001960 <functionCmd>
functionCmd(4,0);
 8001c28:	2004      	movs	r0, #4
 8001c2a:	4629      	mov	r1, r5
 8001c2c:	f7ff fe98 	bl	8001960 <functionCmd>
functionCmd(3,0);//N= 1 chooses twolines 5*8
 8001c30:	2003      	movs	r0, #3
 8001c32:	4629      	mov	r1, r5
 8001c34:	f7ff fe94 	bl	8001960 <functionCmd>
functionCmd(2,0);//F =0
 8001c38:	2002      	movs	r0, #2
 8001c3a:	4629      	mov	r1, r5
 8001c3c:	f7ff fe90 	bl	8001960 <functionCmd>
functionCmd(1,0);
 8001c40:	2001      	movs	r0, #1
 8001c42:	4629      	mov	r1, r5
 8001c44:	f7ff fe8c 	bl	8001960 <functionCmd>
functionCmd(0,0);
 8001c48:	4628      	mov	r0, r5
 8001c4a:	4629      	mov	r1, r5
 8001c4c:	f7ff fe88 	bl	8001960 <functionCmd>
Delay(70);
 8001c50:	2046      	movs	r0, #70	; 0x46
 8001c52:	f7ff fe7f 	bl	8001954 <Delay>
enable(0);
 8001c56:	4628      	mov	r0, r5
//printf("ell\n");
GPIOD->ODR=b[k+1]; //It will send b[0]='E' as = '0x0044' on Port A.


Delay(70);
enable(0);
 8001c58:	f7ff feb6 	bl	80019c8 <enable>
functionCmd(0,0);
Delay(70);
enable(0);


for(k=0;b[k];k++)
 8001c5c:	9b01      	ldr	r3, [sp, #4]
 8001c5e:	5d5b      	ldrb	r3, [r3, r5]
 8001c60:	3501      	adds	r5, #1
 8001c62:	b1ab      	cbz	r3, 8001c90 <lcdCmd+0x2b8>
{
Delay(400);
 8001c64:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001c68:	f7ff fe74 	bl	8001954 <Delay>
//functionCmd(10,1);
//functionCmd(9,0);
Delay(100);
 8001c6c:	2064      	movs	r0, #100	; 0x64
 8001c6e:	f7ff fe71 	bl	8001954 <Delay>
enable(1);
 8001c72:	2001      	movs	r0, #1
 8001c74:	f7ff fea8 	bl	80019c8 <enable>
Delay(250);
 8001c78:	20fa      	movs	r0, #250	; 0xfa
 8001c7a:	f7ff fe6b 	bl	8001954 <Delay>

//printf("ell\n");
GPIOD->ODR=b[k+1]; //It will send b[0]='E' as = '0x0044' on Port A.
 8001c7e:	9b01      	ldr	r3, [sp, #4]
 8001c80:	5d5a      	ldrb	r2, [r3, r5]
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <lcdCmd+0x2c4>)


Delay(70);
 8001c84:	2046      	movs	r0, #70	; 0x46
Delay(100);
enable(1);
Delay(250);

//printf("ell\n");
GPIOD->ODR=b[k+1]; //It will send b[0]='E' as = '0x0044' on Port A.
 8001c86:	615a      	str	r2, [r3, #20]


Delay(70);
 8001c88:	f7ff fe64 	bl	8001954 <Delay>
enable(0);
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	e7e3      	b.n	8001c58 <lcdCmd+0x280>
}

}
 8001c90:	b002      	add	sp, #8
 8001c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c96:	bf00      	nop
 8001c98:	20003884 	.word	0x20003884
 8001c9c:	48000c00 	.word	0x48000c00
 8001ca0:	40021000 	.word	0x40021000

08001ca4 <cmdDisplay>:




void cmdDisplay(int mode)
{
 8001ca4:	b508      	push	{r3, lr}

Delay(400);
 8001ca6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001caa:	f7ff fe53 	bl	8001954 <Delay>
//enable(1);
functionCmd(10,0);
 8001cae:	200a      	movs	r0, #10
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	f7ff fe55 	bl	8001960 <functionCmd>
functionCmd(9,0);
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	2009      	movs	r0, #9
 8001cba:	f7ff fe51 	bl	8001960 <functionCmd>
Delay(100);
 8001cbe:	2064      	movs	r0, #100	; 0x64
 8001cc0:	f7ff fe48 	bl	8001954 <Delay>
enable(1);
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f7ff fe7f 	bl	80019c8 <enable>
Delay(250);
 8001cca:	20fa      	movs	r0, #250	; 0xfa
 8001ccc:	f7ff fe42 	bl	8001954 <Delay>
functionCmd(7,0);
 8001cd0:	2007      	movs	r0, #7
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	f7ff fe44 	bl	8001960 <functionCmd>
functionCmd(6,0);
 8001cd8:	2006      	movs	r0, #6
 8001cda:	2100      	movs	r1, #0
 8001cdc:	f7ff fe40 	bl	8001960 <functionCmd>
functionCmd(5,0);
 8001ce0:	2005      	movs	r0, #5
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	f7ff fe3c 	bl	8001960 <functionCmd>
functionCmd(4,0);
 8001ce8:	2004      	movs	r0, #4
 8001cea:	2100      	movs	r1, #0
 8001cec:	f7ff fe38 	bl	8001960 <functionCmd>
functionCmd(3,0);
 8001cf0:	2003      	movs	r0, #3
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	f7ff fe34 	bl	8001960 <functionCmd>
functionCmd(2,0);
 8001cf8:	2002      	movs	r0, #2
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	f7ff fe30 	bl	8001960 <functionCmd>
functionCmd(1,0);
 8001d00:	2001      	movs	r0, #1
 8001d02:	2100      	movs	r1, #0
 8001d04:	f7ff fe2c 	bl	8001960 <functionCmd>
functionCmd(0,1);
 8001d08:	2000      	movs	r0, #0
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	f7ff fe28 	bl	8001960 <functionCmd>
Delay(70);
 8001d10:	2046      	movs	r0, #70	; 0x46
 8001d12:	f7ff fe1f 	bl	8001954 <Delay>
enable(0);
 8001d16:	2000      	movs	r0, #0


}
 8001d18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
functionCmd(3,0);
functionCmd(2,0);
functionCmd(1,0);
functionCmd(0,1);
Delay(70);
enable(0);
 8001d1c:	f7ff be54 	b.w	80019c8 <enable>

08001d20 <cmdCursorblink>:
}



void cmdCursorblink(int mode)
{
 8001d20:	b507      	push	{r0, r1, r2, lr}
uint32_t state;
fetch_uint32_arg(&state);
 8001d22:	a801      	add	r0, sp, #4
 8001d24:	f000 f9b6 	bl	8002094 <fetch_uint32_arg>
Delay(400);
 8001d28:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001d2c:	f7ff fe12 	bl	8001954 <Delay>
//enable(1);
functionCmd(10,0);
 8001d30:	200a      	movs	r0, #10
 8001d32:	2100      	movs	r1, #0
 8001d34:	f7ff fe14 	bl	8001960 <functionCmd>
functionCmd(9,0);
 8001d38:	2100      	movs	r1, #0
 8001d3a:	2009      	movs	r0, #9
 8001d3c:	f7ff fe10 	bl	8001960 <functionCmd>
Delay(100);
 8001d40:	2064      	movs	r0, #100	; 0x64
 8001d42:	f7ff fe07 	bl	8001954 <Delay>
enable(1);
 8001d46:	2001      	movs	r0, #1
 8001d48:	f7ff fe3e 	bl	80019c8 <enable>
Delay(250);
 8001d4c:	20fa      	movs	r0, #250	; 0xfa
 8001d4e:	f7ff fe01 	bl	8001954 <Delay>
functionCmd(7,0);
 8001d52:	2007      	movs	r0, #7
 8001d54:	2100      	movs	r1, #0
 8001d56:	f7ff fe03 	bl	8001960 <functionCmd>
functionCmd(6,0);
 8001d5a:	2006      	movs	r0, #6
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	f7ff fdff 	bl	8001960 <functionCmd>
functionCmd(5,0);
 8001d62:	2005      	movs	r0, #5
 8001d64:	2100      	movs	r1, #0
 8001d66:	f7ff fdfb 	bl	8001960 <functionCmd>
functionCmd(4,0);
 8001d6a:	2004      	movs	r0, #4
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	f7ff fdf7 	bl	8001960 <functionCmd>
functionCmd(3,1);
 8001d72:	2003      	movs	r0, #3
 8001d74:	2101      	movs	r1, #1
 8001d76:	f7ff fdf3 	bl	8001960 <functionCmd>
functionCmd(2,0);
 8001d7a:	2002      	movs	r0, #2
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	f7ff fdef 	bl	8001960 <functionCmd>
functionCmd(1,0);
 8001d82:	2001      	movs	r0, #1
 8001d84:	2100      	movs	r1, #0
 8001d86:	f7ff fdeb 	bl	8001960 <functionCmd>
functionCmd(0,state);
 8001d8a:	9901      	ldr	r1, [sp, #4]
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f7ff fde7 	bl	8001960 <functionCmd>
Delay(70);
 8001d92:	2046      	movs	r0, #70	; 0x46
 8001d94:	f7ff fdde 	bl	8001954 <Delay>
enable(0);
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f7ff fe15 	bl	80019c8 <enable>


}
 8001d9e:	b003      	add	sp, #12
 8001da0:	f85d fb04 	ldr.w	pc, [sp], #4

08001da4 <cmdCursorOnOff>:


void cmdCursorOnOff(int mode)
{
 8001da4:	b507      	push	{r0, r1, r2, lr}
uint32_t state;
fetch_uint32_arg(&state);
 8001da6:	a801      	add	r0, sp, #4
 8001da8:	f000 f974 	bl	8002094 <fetch_uint32_arg>
Delay(400);
 8001dac:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001db0:	f7ff fdd0 	bl	8001954 <Delay>
//enable(1);
functionCmd(10,0);
 8001db4:	200a      	movs	r0, #10
 8001db6:	2100      	movs	r1, #0
 8001db8:	f7ff fdd2 	bl	8001960 <functionCmd>
functionCmd(9,0);
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	2009      	movs	r0, #9
 8001dc0:	f7ff fdce 	bl	8001960 <functionCmd>
Delay(100);
 8001dc4:	2064      	movs	r0, #100	; 0x64
 8001dc6:	f7ff fdc5 	bl	8001954 <Delay>
enable(1);
 8001dca:	2001      	movs	r0, #1
 8001dcc:	f7ff fdfc 	bl	80019c8 <enable>
Delay(250);
 8001dd0:	20fa      	movs	r0, #250	; 0xfa
 8001dd2:	f7ff fdbf 	bl	8001954 <Delay>
functionCmd(7,0);
 8001dd6:	2007      	movs	r0, #7
 8001dd8:	2100      	movs	r1, #0
 8001dda:	f7ff fdc1 	bl	8001960 <functionCmd>
functionCmd(6,0);
 8001dde:	2006      	movs	r0, #6
 8001de0:	2100      	movs	r1, #0
 8001de2:	f7ff fdbd 	bl	8001960 <functionCmd>
functionCmd(5,0);
 8001de6:	2005      	movs	r0, #5
 8001de8:	2100      	movs	r1, #0
 8001dea:	f7ff fdb9 	bl	8001960 <functionCmd>
functionCmd(4,0);
 8001dee:	2004      	movs	r0, #4
 8001df0:	2100      	movs	r1, #0
 8001df2:	f7ff fdb5 	bl	8001960 <functionCmd>
functionCmd(3,1);
 8001df6:	2003      	movs	r0, #3
 8001df8:	2101      	movs	r1, #1
 8001dfa:	f7ff fdb1 	bl	8001960 <functionCmd>
functionCmd(2,0);
 8001dfe:	2002      	movs	r0, #2
 8001e00:	2100      	movs	r1, #0
 8001e02:	f7ff fdad 	bl	8001960 <functionCmd>
functionCmd(1,state);
 8001e06:	9901      	ldr	r1, [sp, #4]
 8001e08:	2001      	movs	r0, #1
 8001e0a:	f7ff fda9 	bl	8001960 <functionCmd>
functionCmd(0,0);
 8001e0e:	2000      	movs	r0, #0
 8001e10:	4601      	mov	r1, r0
 8001e12:	f7ff fda5 	bl	8001960 <functionCmd>
Delay(70);
 8001e16:	2046      	movs	r0, #70	; 0x46
 8001e18:	f7ff fd9c 	bl	8001954 <Delay>
enable(0);
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f7ff fdd3 	bl	80019c8 <enable>


}
 8001e22:	b003      	add	sp, #12
 8001e24:	f85d fb04 	ldr.w	pc, [sp], #4

08001e28 <CmdW>:
	 (unsigned int)(*((uint32_t *)addr)));
}


void CmdW(int mode)
{
 8001e28:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr,data;

  if(mode != CMD_INTERACTIVE) return;
 8001e2a:	b940      	cbnz	r0, 8001e3e <CmdW+0x16>

  fetch_uint32_arg(&addr);
 8001e2c:	4668      	mov	r0, sp
 8001e2e:	f000 f931 	bl	8002094 <fetch_uint32_arg>
  fetch_uint32_arg(&data);
 8001e32:	a801      	add	r0, sp, #4
 8001e34:	f000 f92e 	bl	8002094 <fetch_uint32_arg>

  *((uint32_t *)addr) = data;
 8001e38:	9b00      	ldr	r3, [sp, #0]
 8001e3a:	9a01      	ldr	r2, [sp, #4]
 8001e3c:	601a      	str	r2, [r3, #0]
}
 8001e3e:	b003      	add	sp, #12
 8001e40:	f85d fb04 	ldr.w	pc, [sp], #4

08001e44 <CmdR>:
#include "common.h"



void CmdR(int mode)
{
 8001e44:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr;

  if(mode != CMD_INTERACTIVE) return;
 8001e46:	b938      	cbnz	r0, 8001e58 <CmdR+0x14>

  fetch_uint32_arg(&addr);
 8001e48:	a801      	add	r0, sp, #4
 8001e4a:	f000 f923 	bl	8002094 <fetch_uint32_arg>

  printf("0x%08X: 0x%08X\n",(unsigned int)addr, 
 8001e4e:	9901      	ldr	r1, [sp, #4]
 8001e50:	4803      	ldr	r0, [pc, #12]	; (8001e60 <CmdR+0x1c>)
 8001e52:	680a      	ldr	r2, [r1, #0]
 8001e54:	f003 fe2e 	bl	8005ab4 <printf>
	 (unsigned int)(*((uint32_t *)addr)));
}
 8001e58:	b003      	add	sp, #12
 8001e5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e5e:	bf00      	nop
 8001e60:	0800adac 	.word	0x0800adac

08001e64 <parse>:

#define SEPS " \t\n\v\f\r"

/* Parse the buffer and call commands */ 
int parse(char *buf, int len, const parse_table *table)
{
 8001e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e68:	4615      	mov	r5, r2
  char *p;
  int i,arg;
  const parse_table *t;
  
  /* Check for silly things */
  if(buf == NULL) {
 8001e6a:	b908      	cbnz	r0, 8001e70 <parse+0xc>
    printf("NULL buf pointer passed to %s()\n",__FUNCTION__);
 8001e6c:	4833      	ldr	r0, [pc, #204]	; (8001f3c <parse+0xd8>)
 8001e6e:	e020      	b.n	8001eb2 <parse+0x4e>
    return -1;
  }

  if(len==0) {
 8001e70:	b909      	cbnz	r1, 8001e76 <parse+0x12>
    printf("len == 0 in %s\n",__FUNCTION__);
 8001e72:	4833      	ldr	r0, [pc, #204]	; (8001f40 <parse+0xdc>)
 8001e74:	e01d      	b.n	8001eb2 <parse+0x4e>
    return -1;
  }

  if(table == NULL) {
 8001e76:	b122      	cbz	r2, 8001e82 <parse+0x1e>
  }


  /* Find the first word, by skiping over whitespace */
  i = len;
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 8001e78:	4b32      	ldr	r3, [pc, #200]	; (8001f44 <parse+0xe0>)
 8001e7a:	1e4c      	subs	r4, r1, #1
 8001e7c:	681e      	ldr	r6, [r3, #0]
 8001e7e:	4603      	mov	r3, r0
 8001e80:	e00a      	b.n	8001e98 <parse+0x34>
    printf("len == 0 in %s\n",__FUNCTION__);
    return -1;
  }

  if(table == NULL) {
    printf("NULL table pointer passed to %s()\n",__FUNCTION__);
 8001e82:	4831      	ldr	r0, [pc, #196]	; (8001f48 <parse+0xe4>)
 8001e84:	e015      	b.n	8001eb2 <parse+0x4e>
  }


  /* Find the first word, by skiping over whitespace */
  i = len;
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 8001e86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001e8a:	2a00      	cmp	r2, #0
 8001e8c:	d04d      	beq.n	8001f2a <parse+0xc6>
 8001e8e:	4432      	add	r2, r6
 8001e90:	3c01      	subs	r4, #1
 8001e92:	7852      	ldrb	r2, [r2, #1]
 8001e94:	0712      	lsls	r2, r2, #28
 8001e96:	d54b      	bpl.n	8001f30 <parse+0xcc>
 8001e98:	1c67      	adds	r7, r4, #1
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	4621      	mov	r1, r4
 8001e9e:	d1f2      	bne.n	8001e86 <parse+0x22>
  if((i==0) || (*buf==0)) {
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d047      	beq.n	8001f36 <parse+0xd2>
       __FUNCTION__);
#endif
    return -1;
  }
	
  p = strtok(buf,SEPS);
 8001ea6:	4929      	ldr	r1, [pc, #164]	; (8001f4c <parse+0xe8>)
 8001ea8:	f003 ff82 	bl	8005db0 <strtok>
  if(p==NULL) {
 8001eac:	4606      	mov	r6, r0
 8001eae:	b910      	cbnz	r0, 8001eb6 <parse+0x52>
    /* No token found */
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
 8001eb0:	4827      	ldr	r0, [pc, #156]	; (8001f50 <parse+0xec>)
 8001eb2:	4928      	ldr	r1, [pc, #160]	; (8001f54 <parse+0xf0>)
 8001eb4:	e037      	b.n	8001f26 <parse+0xc2>
    return -1;
  }

  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
  /* Check to see if the user is asking for help */
  if(strcasecmp(p,"help") == 0) {
 8001eb6:	4928      	ldr	r1, [pc, #160]	; (8001f58 <parse+0xf4>)
 8001eb8:	f003 fecc 	bl	8005c54 <strcasecmp>
 8001ebc:	4604      	mov	r4, r0
 8001ebe:	b9a0      	cbnz	r0, 8001eea <parse+0x86>
    /* Check to see if the user is asking for more help */
    p = strtok(NULL,SEPS);
 8001ec0:	4922      	ldr	r1, [pc, #136]	; (8001f4c <parse+0xe8>)
 8001ec2:	f003 ff75 	bl	8005db0 <strtok>
    if(p == NULL) {
 8001ec6:	4606      	mov	r6, r0
 8001ec8:	b990      	cbnz	r0, 8001ef0 <parse+0x8c>
 8001eca:	350c      	adds	r5, #12
      /* If we don't get any more tokens the user is asking for short
       * help */
      /* Loop over the commands defined and print help for them */
      for(t=table; t->cmdname!=NULL; t++) {
 8001ecc:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 8001ed0:	b389      	cbz	r1, 8001f36 <parse+0xd2>
	if(t->help != NULL) {
 8001ed2:	f855 2c04 	ldr.w	r2, [r5, #-4]
 8001ed6:	b11a      	cbz	r2, 8001ee0 <parse+0x7c>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 8001ed8:	4820      	ldr	r0, [pc, #128]	; (8001f5c <parse+0xf8>)
 8001eda:	f003 fdeb 	bl	8005ab4 <printf>
 8001ede:	e7f4      	b.n	8001eca <parse+0x66>
	} else {
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
 8001ee0:	f855 3c08 	ldr.w	r3, [r5, #-8]
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	4798      	blx	r3
 8001ee8:	e7ef      	b.n	8001eca <parse+0x66>
    /* No token found */
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
    return -1;
  }

  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
 8001eea:	f04f 0800 	mov.w	r8, #0
 8001eee:	e009      	b.n	8001f04 <parse+0xa0>
      }
      return 0;
    } else {
      /* The user has asked for long help, call the function
       * for help */
      arg = CMD_LONG_HELP;
 8001ef0:	f04f 0802 	mov.w	r8, #2
    }
  }

  /* Now search for token in the table */
  for(t=table; t->cmdname!=NULL; t++) {
 8001ef4:	e006      	b.n	8001f04 <parse+0xa0>
    if(strcasecmp(p,t->cmdname) == 0) {
 8001ef6:	4630      	mov	r0, r6
 8001ef8:	4639      	mov	r1, r7
 8001efa:	f003 feab 	bl	8005c54 <strcasecmp>
 8001efe:	4604      	mov	r4, r0
 8001f00:	b120      	cbz	r0, 8001f0c <parse+0xa8>
      arg = CMD_LONG_HELP;
    }
  }

  /* Now search for token in the table */
  for(t=table; t->cmdname!=NULL; t++) {
 8001f02:	350c      	adds	r5, #12
 8001f04:	682f      	ldr	r7, [r5, #0]
 8001f06:	2f00      	cmp	r7, #0
 8001f08:	d1f5      	bne.n	8001ef6 <parse+0x92>
 8001f0a:	e00a      	b.n	8001f22 <parse+0xbe>
    if(strcasecmp(p,t->cmdname) == 0) {
      /* Got a match, call the function */
      if(arg == CMD_LONG_HELP) {	
 8001f0c:	f1b8 0f00 	cmp.w	r8, #0
 8001f10:	d003      	beq.n	8001f1a <parse+0xb6>
	printf("%s:\n",t->cmdname);
 8001f12:	4813      	ldr	r0, [pc, #76]	; (8001f60 <parse+0xfc>)
 8001f14:	4639      	mov	r1, r7
 8001f16:	f003 fdcd 	bl	8005ab4 <printf>
      }
      t->func(arg);
 8001f1a:	686b      	ldr	r3, [r5, #4]
 8001f1c:	4640      	mov	r0, r8
 8001f1e:	4798      	blx	r3
      return 0;
 8001f20:	e009      	b.n	8001f36 <parse+0xd2>
    }
  }

  printf("Command `%s' not found. Type `help' for online help\n",p);
 8001f22:	4810      	ldr	r0, [pc, #64]	; (8001f64 <parse+0x100>)
 8001f24:	4631      	mov	r1, r6
 8001f26:	f003 fdc5 	bl	8005ab4 <printf>
  if((i==0) || (*buf==0)) {
#if 0
    printf("End of buffer reached while discarding whitespace in %s()\n",
       __FUNCTION__);
#endif
    return -1;
 8001f2a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001f2e:	e002      	b.n	8001f36 <parse+0xd2>


  /* Find the first word, by skiping over whitespace */
  i = len;
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
  if((i==0) || (*buf==0)) {
 8001f30:	2900      	cmp	r1, #0
 8001f32:	d1b8      	bne.n	8001ea6 <parse+0x42>
 8001f34:	e7f9      	b.n	8001f2a <parse+0xc6>
    }
  }

  printf("Command `%s' not found. Type `help' for online help\n",p);
  return -1;
}
 8001f36:	4620      	mov	r0, r4
 8001f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f3c:	0800adf7 	.word	0x0800adf7
 8001f40:	0800ae18 	.word	0x0800ae18
 8001f44:	2000019c 	.word	0x2000019c
 8001f48:	0800ae28 	.word	0x0800ae28
 8001f4c:	0800ae4b 	.word	0x0800ae4b
 8001f50:	0800ae52 	.word	0x0800ae52
 8001f54:	0800aed8 	.word	0x0800aed8
 8001f58:	0800ae82 	.word	0x0800ae82
 8001f5c:	0800ae87 	.word	0x0800ae87
 8001f60:	0800ae93 	.word	0x0800ae93
 8001f64:	0800ae98 	.word	0x0800ae98

08001f68 <TaskInput>:
char input[BUFFER_LEN];
char input_b[BUFFER_LEN];

/* Task to handle input */
void TaskInput(void)
{
 8001f68:	b573      	push	{r0, r1, r4, r5, r6, lr}
  static unsigned int saved = 0;
  static char *buf = input;
  static uint32_t printPrompt = 1;

  /* Do we have to print the prompt? */
  if(printPrompt) {
 8001f6a:	4d3f      	ldr	r5, [pc, #252]	; (8002068 <TaskInput+0x100>)
 8001f6c:	682b      	ldr	r3, [r5, #0]
 8001f6e:	b123      	cbz	r3, 8001f7a <TaskInput+0x12>
    printf("ARMON>");
 8001f70:	483e      	ldr	r0, [pc, #248]	; (800206c <TaskInput+0x104>)
 8001f72:	f003 fd9f 	bl	8005ab4 <printf>
    printPrompt = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	602b      	str	r3, [r5, #0]
  }

  /* Get the next character */
  rc = TerminalReadAnyNonBlock(&c);
 8001f7a:	f10d 0007 	add.w	r0, sp, #7
 8001f7e:	f000 fa32 	bl	80023e6 <TerminalReadAnyNonBlock>
  if(rc) {
 8001f82:	2800      	cmp	r0, #0
 8001f84:	d16e      	bne.n	8002064 <TaskInput+0xfc>
  }

  /* We have a character to process */
  /* printf("Got:'%c' %d\n",c,c); */
  /* Check for simple line control characters */
  if(((c == 010) || (c == 0x7f)) && count) {
 8001f86:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	d001      	beq.n	8001f92 <TaskInput+0x2a>
 8001f8e:	2b7f      	cmp	r3, #127	; 0x7f
 8001f90:	d10d      	bne.n	8001fae <TaskInput+0x46>
 8001f92:	4c37      	ldr	r4, [pc, #220]	; (8002070 <TaskInput+0x108>)
 8001f94:	6822      	ldr	r2, [r4, #0]
 8001f96:	b152      	cbz	r2, 8001fae <TaskInput+0x46>
    /* User pressed backspace */
    printf("\010 \010"); /* Obliterate character */
 8001f98:	4836      	ldr	r0, [pc, #216]	; (8002074 <TaskInput+0x10c>)
 8001f9a:	f003 fd8b 	bl	8005ab4 <printf>
    buf--;     /* Then remove it from the buffer */
 8001f9e:	4a36      	ldr	r2, [pc, #216]	; (8002078 <TaskInput+0x110>)
 8001fa0:	6813      	ldr	r3, [r2, #0]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	6013      	str	r3, [r2, #0]
    count--;   /* Then keep track of how many are left */
 8001fa6:	6823      	ldr	r3, [r4, #0]
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	6023      	str	r3, [r4, #0]
 8001fac:	e05a      	b.n	8002064 <TaskInput+0xfc>
  } else if(c == '!') { /* '!' repeats the last command */
 8001fae:	2b21      	cmp	r3, #33	; 0x21
 8001fb0:	d115      	bne.n	8001fde <TaskInput+0x76>
    if(saved) {  /* But only if we have something saved */
 8001fb2:	4b32      	ldr	r3, [pc, #200]	; (800207c <TaskInput+0x114>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d054      	beq.n	8002064 <TaskInput+0xfc>
      strcpy(input,input_b);  /* Restore the command */
 8001fba:	4c31      	ldr	r4, [pc, #196]	; (8002080 <TaskInput+0x118>)
 8001fbc:	4931      	ldr	r1, [pc, #196]	; (8002084 <TaskInput+0x11c>)
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	f003 fe6a 	bl	8005c98 <strcpy>
      printf("%s",input);
 8001fc4:	4621      	mov	r1, r4
 8001fc6:	4830      	ldr	r0, [pc, #192]	; (8002088 <TaskInput+0x120>)
 8001fc8:	f003 fd74 	bl	8005ab4 <printf>
      count = strlen(input);
 8001fcc:	4620      	mov	r0, r4
 8001fce:	f003 fec1 	bl	8005d54 <strlen>
 8001fd2:	4b27      	ldr	r3, [pc, #156]	; (8002070 <TaskInput+0x108>)
 8001fd4:	6018      	str	r0, [r3, #0]
      buf = input+count;
 8001fd6:	4b28      	ldr	r3, [pc, #160]	; (8002078 <TaskInput+0x110>)
 8001fd8:	4404      	add	r4, r0
 8001fda:	601c      	str	r4, [r3, #0]
      goto parseme;
 8001fdc:	e025      	b.n	800202a <TaskInput+0xc2>
    }
  } else if(isprint((unsigned int)c)) {
 8001fde:	4a2b      	ldr	r2, [pc, #172]	; (800208c <TaskInput+0x124>)
 8001fe0:	6812      	ldr	r2, [r2, #0]
 8001fe2:	441a      	add	r2, r3
 8001fe4:	7852      	ldrb	r2, [r2, #1]
 8001fe6:	f012 0297 	ands.w	r2, r2, #151	; 0x97
 8001fea:	d012      	beq.n	8002012 <TaskInput+0xaa>
    /* We are only going to save printable characters */
    if(count >= sizeof(input)) {
 8001fec:	4920      	ldr	r1, [pc, #128]	; (8002070 <TaskInput+0x108>)
 8001fee:	680a      	ldr	r2, [r1, #0]
 8001ff0:	2a4f      	cmp	r2, #79	; 0x4f
      /* We are out of space */
      printf("\x07"); /* Beep */
      return;
    } else {
      *buf++ = c;
 8001ff2:	bf9f      	itttt	ls
 8001ff4:	4c20      	ldrls	r4, [pc, #128]	; (8002078 <TaskInput+0x110>)
 8001ff6:	6820      	ldrls	r0, [r4, #0]
 8001ff8:	7003      	strbls	r3, [r0, #0]
 8001ffa:	1c45      	addls	r5, r0, #1
      count++;
 8001ffc:	bf97      	itett	ls
 8001ffe:	3201      	addls	r2, #1
    }
  } else if(isprint((unsigned int)c)) {
    /* We are only going to save printable characters */
    if(count >= sizeof(input)) {
      /* We are out of space */
      printf("\x07"); /* Beep */
 8002000:	2007      	movhi	r0, #7
      return;
    } else {
      *buf++ = c;
      count++;
      /* Echo it back to the user */
      printf("%c",c);
 8002002:	f89d 0007 	ldrbls.w	r0, [sp, #7]
    if(count >= sizeof(input)) {
      /* We are out of space */
      printf("\x07"); /* Beep */
      return;
    } else {
      *buf++ = c;
 8002006:	6025      	strls	r5, [r4, #0]
      count++;
 8002008:	bf98      	it	ls
 800200a:	600a      	strls	r2, [r1, #0]
      /* Echo it back to the user */
      printf("%c",c);
 800200c:	f003 fd66 	bl	8005adc <putchar>
 8002010:	e028      	b.n	8002064 <TaskInput+0xfc>
    }
  } else if(c == '\r') {
 8002012:	2b0d      	cmp	r3, #13
 8002014:	d126      	bne.n	8002064 <TaskInput+0xfc>
    /* NULL Terminate anything we have received */
    *buf = '\0';
 8002016:	4b18      	ldr	r3, [pc, #96]	; (8002078 <TaskInput+0x110>)
    /* save current buffer in case we want to re do the command */
    strcpy(input_b,input);
 8002018:	481a      	ldr	r0, [pc, #104]	; (8002084 <TaskInput+0x11c>)
      /* Echo it back to the user */
      printf("%c",c);
    }
  } else if(c == '\r') {
    /* NULL Terminate anything we have received */
    *buf = '\0';
 800201a:	681b      	ldr	r3, [r3, #0]
    /* save current buffer in case we want to re do the command */
    strcpy(input_b,input);
 800201c:	4918      	ldr	r1, [pc, #96]	; (8002080 <TaskInput+0x118>)
      /* Echo it back to the user */
      printf("%c",c);
    }
  } else if(c == '\r') {
    /* NULL Terminate anything we have received */
    *buf = '\0';
 800201e:	701a      	strb	r2, [r3, #0]
    /* save current buffer in case we want to re do the command */
    strcpy(input_b,input);
 8002020:	f003 fe3a 	bl	8005c98 <strcpy>
    saved = 1;
 8002024:	4b15      	ldr	r3, [pc, #84]	; (800207c <TaskInput+0x114>)
 8002026:	2201      	movs	r2, #1
 8002028:	601a      	str	r2, [r3, #0]
  parseme:
    /* The user pressed enter, parse the command */
    printf("\n");
 800202a:	200a      	movs	r0, #10
 800202c:	4c12      	ldr	r4, [pc, #72]	; (8002078 <TaskInput+0x110>)
 800202e:	f003 fd55 	bl	8005adc <putchar>
    /* Fill the rest of the buffer wil NUL */
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
 8002032:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <TaskInput+0x108>)
 8002034:	6820      	ldr	r0, [r4, #0]
 8002036:	681e      	ldr	r6, [r3, #0]
 8002038:	4602      	mov	r2, r0
 800203a:	1a31      	subs	r1, r6, r0
 800203c:	4411      	add	r1, r2
 800203e:	294f      	cmp	r1, #79	; 0x4f
 8002040:	f04f 0100 	mov.w	r1, #0
 8002044:	d802      	bhi.n	800204c <TaskInput+0xe4>
 8002046:	f802 1b01 	strb.w	r1, [r2], #1
 800204a:	e7f6      	b.n	800203a <TaskInput+0xd2>
    count = 0;
 800204c:	6019      	str	r1, [r3, #0]
    parse(input, sizeof(input), Commands);
 800204e:	4e0c      	ldr	r6, [pc, #48]	; (8002080 <TaskInput+0x118>)
 8002050:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <TaskInput+0x128>)
 8002052:	6022      	str	r2, [r4, #0]
 8002054:	4630      	mov	r0, r6
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	2150      	movs	r1, #80	; 0x50
 800205a:	f7ff ff03 	bl	8001e64 <parse>
    buf = input;
    printPrompt = 1;
 800205e:	2301      	movs	r3, #1
    printf("\n");
    /* Fill the rest of the buffer wil NUL */
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
    count = 0;
    parse(input, sizeof(input), Commands);
    buf = input;
 8002060:	6026      	str	r6, [r4, #0]
    printPrompt = 1;
 8002062:	602b      	str	r3, [r5, #0]
  }
}
 8002064:	b002      	add	sp, #8
 8002066:	bd70      	pop	{r4, r5, r6, pc}
 8002068:	20000004 	.word	0x20000004
 800206c:	0800aecd 	.word	0x0800aecd
 8002070:	20000a58 	.word	0x20000a58
 8002074:	0800aed4 	.word	0x0800aed4
 8002078:	20000008 	.word	0x20000008
 800207c:	20000a5c 	.word	0x20000a5c
 8002080:	200038e8 	.word	0x200038e8
 8002084:	20003898 	.word	0x20003898
 8002088:	0800b1c9 	.word	0x0800b1c9
 800208c:	2000019c 	.word	0x2000019c
 8002090:	2000000c 	.word	0x2000000c

08002094 <fetch_uint32_arg>:
  return 0;
}     

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 8002094:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 8002096:	4908      	ldr	r1, [pc, #32]	; (80020b8 <fetch_uint32_arg+0x24>)
  return 0;
}     

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 8002098:	4604      	mov	r4, r0
  char *p;
  p = strtok(NULL,SEPS);
 800209a:	2000      	movs	r0, #0
 800209c:	f003 fe88 	bl	8005db0 <strtok>
  if(p == NULL) {
 80020a0:	b130      	cbz	r0, 80020b0 <fetch_uint32_arg+0x1c>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
 80020a2:	2100      	movs	r1, #0
 80020a4:	460a      	mov	r2, r1
 80020a6:	f003 ff51 	bl	8005f4c <strtoul>
 80020aa:	6020      	str	r0, [r4, #0]
  return 0;
 80020ac:	2000      	movs	r0, #0
 80020ae:	bd10      	pop	{r4, pc}
{
  char *p;
  p = strtok(NULL,SEPS);
  if(p == NULL) {
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
 80020b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
  return 0;
}     
 80020b4:	bd10      	pop	{r4, pc}
 80020b6:	bf00      	nop
 80020b8:	0800ae4b 	.word	0x0800ae4b

080020bc <fetch_string_arg>:

/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 80020bc:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 80020be:	4906      	ldr	r1, [pc, #24]	; (80020d8 <fetch_string_arg+0x1c>)
  return 0;
}     

/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 80020c0:	4604      	mov	r4, r0
  char *p;
  p = strtok(NULL,SEPS);
 80020c2:	2000      	movs	r0, #0
 80020c4:	f003 fe74 	bl	8005db0 <strtok>
  if(p == NULL) {
 80020c8:	b110      	cbz	r0, 80020d0 <fetch_string_arg+0x14>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = p;
 80020ca:	6020      	str	r0, [r4, #0]
  return 0;
 80020cc:	2000      	movs	r0, #0
 80020ce:	bd10      	pop	{r4, pc}
{
  char *p;
  p = strtok(NULL,SEPS);
  if(p == NULL) {
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
 80020d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  
  *dest = p;
  return 0;
}
 80020d4:	bd10      	pop	{r4, pc}
 80020d6:	bf00      	nop
 80020d8:	0800ae4b 	.word	0x0800ae4b

080020dc <DumpBuffer>:

#define BYTES_PER_LINE 16

/* Dump a buffer in HEX with the address as given */
void DumpBuffer(uint8_t *buffer, uint32_t count, uint32_t address)
{
 80020dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020e0:	4680      	mov	r8, r0
 80020e2:	b089      	sub	sp, #36	; 0x24
 80020e4:	4692      	mov	sl, r2
  uint32_t i;
  uint8_t buf[BYTES_PER_LINE+1],*bufp;   /* Buffer to assemble printed chars */
  uint8_t *p,c;

  if(count == 0) return;
 80020e6:	460d      	mov	r5, r1
 80020e8:	2900      	cmp	r1, #0
 80020ea:	d044      	beq.n	8002176 <DumpBuffer+0x9a>
 80020ec:	ac03      	add	r4, sp, #12
 80020ee:	eb00 0901 	add.w	r9, r0, r1
 80020f2:	4606      	mov	r6, r0
 80020f4:	4627      	mov	r7, r4
 80020f6:	ebc8 010a 	rsb	r1, r8, sl

  p = buffer;
  bufp = buf;
  /* dump the requested number of bytes in hex. */
  for(i=0; i<count; i++) {
 80020fa:	454e      	cmp	r6, r9
 80020fc:	4431      	add	r1, r6
 80020fe:	ebc8 0306 	rsb	r3, r8, r6
 8002102:	d025      	beq.n	8002150 <DumpBuffer+0x74>
    if((i% BYTES_PER_LINE) == 0) {
 8002104:	f013 0b0f 	ands.w	fp, r3, #15
 8002108:	d103      	bne.n	8002112 <DumpBuffer+0x36>
      printf("%08x:",(unsigned int)address);
 800210a:	481c      	ldr	r0, [pc, #112]	; (800217c <DumpBuffer+0xa0>)
 800210c:	f003 fcd2 	bl	8005ab4 <printf>
      bufp = buf;
 8002110:	463c      	mov	r4, r7
    /* Read the value to print */
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 8002112:	4b1b      	ldr	r3, [pc, #108]	; (8002180 <DumpBuffer+0xa4>)
    if((i% BYTES_PER_LINE) == 0) {
      printf("%08x:",(unsigned int)address);
      bufp = buf;
    }
    /* Read the value to print */
    c = *p++;
 8002114:	f816 1b01 	ldrb.w	r1, [r6], #1
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 8002118:	681b      	ldr	r3, [r3, #0]
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
    }

    printf(" %02x",((unsigned int)c) & 0xff);
 800211a:	481a      	ldr	r0, [pc, #104]	; (8002184 <DumpBuffer+0xa8>)
    /* Read the value to print */
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 800211c:	440b      	add	r3, r1
 800211e:	785b      	ldrb	r3, [r3, #1]
 8002120:	f013 0f97 	tst.w	r3, #151	; 0x97
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
 8002124:	bf08      	it	eq
 8002126:	222e      	moveq	r2, #46	; 0x2e
 8002128:	f104 0301 	add.w	r3, r4, #1
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
      *bufp++ = c; /* Stick in the character */
 800212c:	bf14      	ite	ne
 800212e:	7021      	strbne	r1, [r4, #0]
    } else {
      *bufp++ = '.';
 8002130:	7022      	strbeq	r2, [r4, #0]
 8002132:	9301      	str	r3, [sp, #4]
 8002134:	461c      	mov	r4, r3
    }

    printf(" %02x",((unsigned int)c) & 0xff);
 8002136:	f003 fcbd 	bl	8005ab4 <printf>
    
    /* At end of line ? */
    if((i % BYTES_PER_LINE) == (BYTES_PER_LINE-1)) {
 800213a:	f1bb 0f0f 	cmp.w	fp, #15
 800213e:	9b01      	ldr	r3, [sp, #4]
 8002140:	d1d9      	bne.n	80020f6 <DumpBuffer+0x1a>
      *bufp = '\0';  /* NULL terminate buffer */
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]

      /* Yes, print buffer */
      printf("  %s\n",buf);
 8002146:	4639      	mov	r1, r7
 8002148:	480f      	ldr	r0, [pc, #60]	; (8002188 <DumpBuffer+0xac>)
 800214a:	f003 fcb3 	bl	8005ab4 <printf>
 800214e:	e7d2      	b.n	80020f6 <DumpBuffer+0x1a>
    }

  }

  /* dump out to EOL */
  *bufp='\0';
 8002150:	2300      	movs	r3, #0
  if(count % BYTES_PER_LINE) {
 8002152:	f015 050f 	ands.w	r5, r5, #15
    }

  }

  /* dump out to EOL */
  *bufp='\0';
 8002156:	7023      	strb	r3, [r4, #0]
  if(count % BYTES_PER_LINE) {
 8002158:	d00d      	beq.n	8002176 <DumpBuffer+0x9a>
 800215a:	461c      	mov	r4, r3
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 800215c:	f1c5 0310 	rsb	r3, r5, #16
 8002160:	429c      	cmp	r4, r3
 8002162:	d204      	bcs.n	800216e <DumpBuffer+0x92>
      printf("   ");
 8002164:	4809      	ldr	r0, [pc, #36]	; (800218c <DumpBuffer+0xb0>)
 8002166:	f003 fca5 	bl	8005ab4 <printf>
  }

  /* dump out to EOL */
  *bufp='\0';
  if(count % BYTES_PER_LINE) {
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 800216a:	3401      	adds	r4, #1
 800216c:	e7f6      	b.n	800215c <DumpBuffer+0x80>
      printf("   ");
    }
    /* Yes, print buffer */
    printf("  %s\n",buf);
 800216e:	4806      	ldr	r0, [pc, #24]	; (8002188 <DumpBuffer+0xac>)
 8002170:	4639      	mov	r1, r7
 8002172:	f003 fc9f 	bl	8005ab4 <printf>
  }



}
 8002176:	b009      	add	sp, #36	; 0x24
 8002178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800217c:	0800aede 	.word	0x0800aede
 8002180:	2000019c 	.word	0x2000019c
 8002184:	0800aee4 	.word	0x0800aee4
 8002188:	0800aeea 	.word	0x0800aeea
 800218c:	0800aef0 	.word	0x0800aef0

08002190 <CmdDump>:
void CmdDump(int action)
{
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return;
 8002190:	2801      	cmp	r0, #1


}

void CmdDump(int action)
{
 8002192:	b538      	push	{r3, r4, r5, lr}
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return;
 8002194:	d01d      	beq.n	80021d2 <CmdDump+0x42>
  if(action==CMD_LONG_HELP) {
 8002196:	2802      	cmp	r0, #2
 8002198:	4c0e      	ldr	r4, [pc, #56]	; (80021d4 <CmdDump+0x44>)
 800219a:	4d0f      	ldr	r5, [pc, #60]	; (80021d8 <CmdDump+0x48>)
 800219c:	d109      	bne.n	80021b2 <CmdDump+0x22>
    printf("dump {<address> {<count>}}\n\n"
 800219e:	480f      	ldr	r0, [pc, #60]	; (80021dc <CmdDump+0x4c>)
 80021a0:	f003 fcd4 	bl	8005b4c <puts>
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 80021a4:	6821      	ldr	r1, [r4, #0]
 80021a6:	682a      	ldr	r2, [r5, #0]
 80021a8:	480d      	ldr	r0, [pc, #52]	; (80021e0 <CmdDump+0x50>)
  }

  DumpBuffer((uint8_t *)address, count, address);
  /* Update parameters for next time */
  address = address+count;
}
 80021aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 80021ae:	f003 bc81 	b.w	8005ab4 <printf>
	   (unsigned int)address, (unsigned int)count);
    return;
  }

  /* Fetch address, defaut to last address if missing */
  rc = fetch_uint32_arg(&address);
 80021b2:	4620      	mov	r0, r4
 80021b4:	f7ff ff6e 	bl	8002094 <fetch_uint32_arg>
  if(rc == 0) {
 80021b8:	b910      	cbnz	r0, 80021c0 <CmdDump+0x30>
    /* Fetch count, default to last count if missing */
    fetch_uint32_arg(&count);
 80021ba:	4628      	mov	r0, r5
 80021bc:	f7ff ff6a 	bl	8002094 <fetch_uint32_arg>
  }

  DumpBuffer((uint8_t *)address, count, address);
 80021c0:	6820      	ldr	r0, [r4, #0]
 80021c2:	6829      	ldr	r1, [r5, #0]
 80021c4:	4602      	mov	r2, r0
 80021c6:	f7ff ff89 	bl	80020dc <DumpBuffer>
  /* Update parameters for next time */
  address = address+count;
 80021ca:	6823      	ldr	r3, [r4, #0]
 80021cc:	682a      	ldr	r2, [r5, #0]
 80021ce:	4413      	add	r3, r2
 80021d0:	6023      	str	r3, [r4, #0]
 80021d2:	bd38      	pop	{r3, r4, r5, pc}
 80021d4:	20000a60 	.word	0x20000a60
 80021d8:	20000010 	.word	0x20000010
 80021dc:	0800aef4 	.word	0x0800aef4
 80021e0:	0800b08c 	.word	0x0800b08c

080021e4 <_sbrk_r>:
#include <reent.h>

register char *stack_ptr asm("sp");

void *_sbrk_r(struct _reent *ptr, int incr)
{
 80021e4:	b508      	push	{r3, lr}
        extern char end asm("end");
        static char *heap_end;
        char *prev_heap_end;

        if (heap_end == 0)
 80021e6:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <_sbrk_r+0x2c>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	b90a      	cbnz	r2, 80021f0 <_sbrk_r+0xc>
                heap_end = &end;
 80021ec:	4a09      	ldr	r2, [pc, #36]	; (8002214 <_sbrk_r+0x30>)
 80021ee:	601a      	str	r2, [r3, #0]

        prev_heap_end = heap_end;
 80021f0:	6818      	ldr	r0, [r3, #0]
        if (heap_end + incr > stack_ptr)
 80021f2:	466b      	mov	r3, sp
 80021f4:	4401      	add	r1, r0
 80021f6:	4299      	cmp	r1, r3
 80021f8:	d906      	bls.n	8002208 <_sbrk_r+0x24>
        {
//              write(1, "Heap and stack collision\n", 25);
//              abort();
                errno = ENOMEM;
 80021fa:	f003 fbdf 	bl	80059bc <__errno>
 80021fe:	230c      	movs	r3, #12
 8002200:	6003      	str	r3, [r0, #0]
                return (caddr_t) -1;
 8002202:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002206:	bd08      	pop	{r3, pc}
        }

        heap_end += incr;
 8002208:	4b01      	ldr	r3, [pc, #4]	; (8002210 <_sbrk_r+0x2c>)
 800220a:	6019      	str	r1, [r3, #0]

        return (caddr_t) prev_heap_end;
}
 800220c:	bd08      	pop	{r3, pc}
 800220e:	bf00      	nop
 8002210:	20000a64 	.word	0x20000a64
 8002214:	20004684 	.word	0x20004684

08002218 <_close_r>:

int _close_r(struct _reent *ptr, int file)
{
        return -1;
}
 8002218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800221c:	4770      	bx	lr

0800221e <_fstat_r>:

int _fstat_r(struct _reent *ptr, int file, struct stat *st)
{
        st->st_mode = S_IFCHR;
 800221e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002222:	6053      	str	r3, [r2, #4]
        return 0;
}
 8002224:	2000      	movs	r0, #0
 8002226:	4770      	bx	lr

08002228 <_isatty_r>:
int _isatty_r(struct _reent *ptr, int file)
{
        return 1;
}
 8002228:	2001      	movs	r0, #1
 800222a:	4770      	bx	lr

0800222c <_lseek_r>:
_off_t _lseek_r(struct _reent *ptr, int i, off_t j, int p)
{
        return 0;
}
 800222c:	2000      	movs	r0, #0
 800222e:	4770      	bx	lr

08002230 <USBD_CDC_DataIn>:
{
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 8002230:	4b1c      	ldr	r3, [pc, #112]	; (80022a4 <USBD_CDC_DataIn+0x74>)
#endif

#ifdef USE_USB
/* USB IN endpoint Transmission complete Callback */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8002232:	b570      	push	{r4, r5, r6, lr}
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 8002234:	681b      	ldr	r3, [r3, #0]
#endif

#ifdef USE_USB
/* USB IN endpoint Transmission complete Callback */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8002236:	4604      	mov	r4, r0
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 8002238:	4798      	blx	r3

  if(pdev == &hUSBDDevice) {
 800223a:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <USBD_CDC_DataIn+0x78>)
 800223c:	429c      	cmp	r4, r3
{
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 800223e:	4606      	mov	r6, r0

  if(pdev == &hUSBDDevice) {
 8002240:	d12d      	bne.n	800229e <USBD_CDC_DataIn+0x6e>
    /* Update head and tail pointers, we just sent outSending bytes */
    tail = TerminalState[index].outTail;
 8002242:	4b1a      	ldr	r3, [pc, #104]	; (80022ac <USBD_CDC_DataIn+0x7c>)
 8002244:	f8b3 1108 	ldrh.w	r1, [r3, #264]	; 0x108
    count = TerminalState[index].outSending;
 8002248:	f8b3 210c 	ldrh.w	r2, [r3, #268]	; 0x10c
 800224c:	b292      	uxth	r2, r2
    TerminalState[index].outTail = TERMINALINCRBY(tail,count);
 800224e:	fa12 f181 	uxtah	r1, r2, r1
 8002252:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002256:	f8a3 1108 	strh.w	r1, [r3, #264]	; 0x108
    TerminalState[index].outCount -= count;
 800225a:	f8b3 110a 	ldrh.w	r1, [r3, #266]	; 0x10a
 800225e:	1a8a      	subs	r2, r1, r2
 8002260:	b292      	uxth	r2, r2
 8002262:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
    TerminalState[index].outSending = 0;
 8002266:	2200      	movs	r2, #0
 8002268:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

    /* Re - Trigger output from this buffer */
    tail = TerminalState[index].outTail;
 800226c:	f8b3 1108 	ldrh.w	r1, [r3, #264]	; 0x108
    count = TerminalState[index].outCount;
 8002270:	f8b3 210a 	ldrh.w	r2, [r3, #266]	; 0x10a
 8002274:	b292      	uxth	r2, r2
    TerminalState[index].outTail = TERMINALINCRBY(tail,count);
    TerminalState[index].outCount -= count;
    TerminalState[index].outSending = 0;

    /* Re - Trigger output from this buffer */
    tail = TerminalState[index].outTail;
 8002276:	b289      	uxth	r1, r1
 8002278:	461c      	mov	r4, r3
    count = TerminalState[index].outCount;
    if(count != 0) {
 800227a:	b182      	cbz	r2, 800229e <USBD_CDC_DataIn+0x6e>
      /* Only allow a transfer to the end of the buffer */
      if((count + tail) >= TERMINALBUFFERSIZE) {
 800227c:	188b      	adds	r3, r1, r2
 800227e:	2b7f      	cmp	r3, #127	; 0x7f
	count = TERMINALBUFFERSIZE - tail;
 8002280:	bf88      	it	hi
 8002282:	f1c1 0280 	rsbhi	r2, r1, #128	; 0x80
      }
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8002286:	b295      	uxth	r5, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 8002288:	4421      	add	r1, r4
    if(count != 0) {
      /* Only allow a transfer to the end of the buffer */
      if((count + tail) >= TERMINALBUFFERSIZE) {
	count = TERMINALBUFFERSIZE - tail;
      }
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 800228a:	3186      	adds	r1, #134	; 0x86
 800228c:	462a      	mov	r2, r5
 800228e:	4806      	ldr	r0, [pc, #24]	; (80022a8 <USBD_CDC_DataIn+0x78>)
 8002290:	f003 f8ab 	bl	80053ea <USBD_CDC_SetTxBuffer>
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
			   count);
      USBD_CDC_TransmitPacket(&hUSBDDevice);
 8002294:	4804      	ldr	r0, [pc, #16]	; (80022a8 <USBD_CDC_DataIn+0x78>)
 8002296:	f003 f8b6 	bl	8005406 <USBD_CDC_TransmitPacket>
      TerminalState[index].outSending = count;
 800229a:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
    }
  }
    
  return rc;
}
 800229e:	4630      	mov	r0, r6
 80022a0:	bd70      	pop	{r4, r5, r6, pc}
 80022a2:	bf00      	nop
 80022a4:	20003b5c 	.word	0x20003b5c
 80022a8:	20003938 	.word	0x20003938
 80022ac:	20000a68 	.word	0x20000a68

080022b0 <CmdStats>:

#endif

/* Dump the terminal statistics */
void CmdStats(int mode)
{
 80022b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t i;
  TerminalStats_t s[INDEX_MAX];

  if(mode != CMD_INTERACTIVE) return;
 80022b4:	4604      	mov	r4, r0

#endif

/* Dump the terminal statistics */
void CmdStats(int mode)
{
 80022b6:	b085      	sub	sp, #20
  uint32_t i;
  TerminalStats_t s[INDEX_MAX];

  if(mode != CMD_INTERACTIVE) return;
 80022b8:	b9e8      	cbnz	r0, 80022f6 <CmdStats+0x46>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022ba:	b672      	cpsid	i

  /* Copy terminal stats to local storage, and reset counters atomincally */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 80022bc:	480f      	ldr	r0, [pc, #60]	; (80022fc <CmdStats+0x4c>)
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 80022be:	4621      	mov	r1, r4
  if(mode != CMD_INTERACTIVE) return;

  /* Copy terminal stats to local storage, and reset counters atomincally */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 80022c0:	f8d0 6110 	ldr.w	r6, [r0, #272]	; 0x110
 80022c4:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
 80022c8:	f8d0 9118 	ldr.w	r9, [r0, #280]	; 0x118
 80022cc:	f8d0 811c 	ldr.w	r8, [r0, #284]	; 0x11c
 80022d0:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 80022d4:	2214      	movs	r2, #20
 80022d6:	f500 7088 	add.w	r0, r0, #272	; 0x110
 80022da:	f003 fb9d 	bl	8005a18 <memset>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80022de:	b662      	cpsie	i
  }
  __enable_irq();

  /* Display stats for the user */
  for(i=0; i<INDEX_MAX; i++) {
    printf("Terminal #%u:\n"
 80022e0:	4807      	ldr	r0, [pc, #28]	; (8002300 <CmdStats+0x50>)
 80022e2:	f8cd 9000 	str.w	r9, [sp]
 80022e6:	f8cd 8004 	str.w	r8, [sp, #4]
 80022ea:	9702      	str	r7, [sp, #8]
 80022ec:	4621      	mov	r1, r4
 80022ee:	4632      	mov	r2, r6
 80022f0:	462b      	mov	r3, r5
 80022f2:	f003 fbdf 	bl	8005ab4 <printf>
	   (unsigned int)(s[i].written),
	   (unsigned int)(s[i].receiveTooBig),
	   (unsigned int)(s[i].received));
  }

}
 80022f6:	b005      	add	sp, #20
 80022f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80022fc:	20000a68 	.word	0x20000a68
 8002300:	0800b0da 	.word	0x0800b0da

08002304 <TerminalInit>:
/* Private functions */
uint32_t TerminalOutputBufferWrite(uint32_t index, char *p, uint32_t len);
uint32_t TerminalInputBufferWrite(uint32_t index, char *p, uint32_t len);

void TerminalInit(void)
{
 8002304:	b510      	push	{r4, lr}
#ifdef USE_UART
  GPIO_InitTypeDef  GPIO_InitStruct;
#endif

  /* Set all stream I/O to non-buffered */
  setvbuf(stdin, NULL, _IONBF, 0);
 8002306:	4c17      	ldr	r4, [pc, #92]	; (8002364 <TerminalInit+0x60>)
 8002308:	6823      	ldr	r3, [r4, #0]
 800230a:	2100      	movs	r1, #0
 800230c:	6858      	ldr	r0, [r3, #4]
 800230e:	2202      	movs	r2, #2
 8002310:	460b      	mov	r3, r1
 8002312:	f003 fc23 	bl	8005b5c <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 8002316:	6823      	ldr	r3, [r4, #0]
 8002318:	2100      	movs	r1, #0
 800231a:	6898      	ldr	r0, [r3, #8]
 800231c:	2202      	movs	r2, #2
 800231e:	460b      	mov	r3, r1
 8002320:	f003 fc1c 	bl	8005b5c <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 8002324:	6823      	ldr	r3, [r4, #0]
#endif

#ifdef USE_USB
  /* Initialize USB interface */
  /* Init Device Library */
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 8002326:	4c10      	ldr	r4, [pc, #64]	; (8002368 <TerminalInit+0x64>)
#endif

  /* Set all stream I/O to non-buffered */
  setvbuf(stdin, NULL, _IONBF, 0);
  setvbuf(stdout, NULL, _IONBF, 0);
  setvbuf(stderr, NULL, _IONBF, 0);
 8002328:	68d8      	ldr	r0, [r3, #12]
 800232a:	2100      	movs	r1, #0
 800232c:	460b      	mov	r3, r1
 800232e:	2202      	movs	r2, #2
 8002330:	f003 fc14 	bl	8005b5c <setvbuf>
#endif

#ifdef USE_USB
  /* Initialize USB interface */
  /* Init Device Library */
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 8002334:	4620      	mov	r0, r4
 8002336:	490d      	ldr	r1, [pc, #52]	; (800236c <TerminalInit+0x68>)
 8002338:	2200      	movs	r2, #0
 800233a:	f002 fc73 	bl	8004c24 <USBD_Init>
  
  /* Add Supported Class */
  /* Save, and replace DataIn callback with our own...*/
  USBDDataIn = USBD_CDC.DataIn;
 800233e:	490c      	ldr	r1, [pc, #48]	; (8002370 <TerminalInit+0x6c>)
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <TerminalInit+0x70>)
 8002342:	694a      	ldr	r2, [r1, #20]
 8002344:	601a      	str	r2, [r3, #0]
  USBD_CDC.DataIn = USBD_CDC_DataIn;
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 8002346:	4620      	mov	r0, r4
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
  
  /* Add Supported Class */
  /* Save, and replace DataIn callback with our own...*/
  USBDDataIn = USBD_CDC.DataIn;
  USBD_CDC.DataIn = USBD_CDC_DataIn;
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <TerminalInit+0x74>)
 800234a:	614b      	str	r3, [r1, #20]
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 800234c:	f002 fc7f 	bl	8004c4e <USBD_RegisterClass>
  
  /* Add CDC Interface Class */
  USBD_CDC_RegisterInterface(&hUSBDDevice, &USBD_CDC_fops);
 8002350:	4620      	mov	r0, r4
 8002352:	490a      	ldr	r1, [pc, #40]	; (800237c <TerminalInit+0x78>)
 8002354:	f003 f842 	bl	80053dc <USBD_CDC_RegisterInterface>
  
  /* Start Device Process */
  USBD_Start(&hUSBDDevice);
 8002358:	4620      	mov	r0, r4
#endif

}
 800235a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  
  /* Add CDC Interface Class */
  USBD_CDC_RegisterInterface(&hUSBDDevice, &USBD_CDC_fops);
  
  /* Start Device Process */
  USBD_Start(&hUSBDDevice);
 800235e:	f002 bc7d 	b.w	8004c5c <USBD_Start>
 8002362:	bf00      	nop
 8002364:	200005c8 	.word	0x200005c8
 8002368:	20003938 	.word	0x20003938
 800236c:	20000128 	.word	0x20000128
 8002370:	2000005c 	.word	0x2000005c
 8002374:	20003b5c 	.word	0x20003b5c
 8002378:	08002231 	.word	0x08002231
 800237c:	20000168 	.word	0x20000168

08002380 <TerminalRead>:

/* Attempt to read a block of data from the Terminal buffer
 * return the actual number of bytes read.
 */
uint32_t TerminalRead(uint32_t index, uint8_t *ptr, uint32_t len)
{
 8002380:	b5f0      	push	{r4, r5, r6, r7, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002382:	b672      	cpsid	i
 8002384:	440a      	add	r2, r1
  /* try to read len characters from the input buffer */

  /* Crticial section begin */
  __disable_irq();
  count = 0;
  while(TerminalState[index].inCount && (count < len)) {
 8002386:	460e      	mov	r6, r1
 8002388:	4f0f      	ldr	r7, [pc, #60]	; (80023c8 <TerminalRead+0x48>)
 800238a:	f44f 7592 	mov.w	r5, #292	; 0x124
 800238e:	4345      	muls	r5, r0
 8002390:	197c      	adds	r4, r7, r5
 8002392:	3480      	adds	r4, #128	; 0x80
 8002394:	88a3      	ldrh	r3, [r4, #4]
 8002396:	b29b      	uxth	r3, r3
 8002398:	ebc1 0e06 	rsb	lr, r1, r6
 800239c:	b183      	cbz	r3, 80023c0 <TerminalRead+0x40>
 800239e:	4296      	cmp	r6, r2
 80023a0:	d00e      	beq.n	80023c0 <TerminalRead+0x40>
    tail   = TerminalState[index].inTail;
 80023a2:	8863      	ldrh	r3, [r4, #2]
 80023a4:	b29b      	uxth	r3, r3
    *ptr++ = TerminalState[index].inBuffer[tail];
 80023a6:	441d      	add	r5, r3
    TerminalState[index].inTail = TERMINALINCR(tail);
 80023a8:	3301      	adds	r3, #1
  /* Crticial section begin */
  __disable_irq();
  count = 0;
  while(TerminalState[index].inCount && (count < len)) {
    tail   = TerminalState[index].inTail;
    *ptr++ = TerminalState[index].inBuffer[tail];
 80023aa:	5d7d      	ldrb	r5, [r7, r5]
 80023ac:	f806 5b01 	strb.w	r5, [r6], #1
    TerminalState[index].inTail = TERMINALINCR(tail);
 80023b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023b4:	8063      	strh	r3, [r4, #2]
    TerminalState[index].inCount--;
 80023b6:	88a3      	ldrh	r3, [r4, #4]
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	80a3      	strh	r3, [r4, #4]
 80023be:	e7e3      	b.n	8002388 <TerminalRead+0x8>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80023c0:	b662      	cpsie	i
  /* Critical section end */
  __enable_irq();

  return count;

}
 80023c2:	4670      	mov	r0, lr
 80023c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000a68 	.word	0x20000a68

080023cc <_read_r>:
}

int _read_r( void *r, int fd, char *ptr, int len )
{
  uint32_t count;
  count = TerminalRead(0, (uint8_t *)ptr, len);
 80023cc:	4611      	mov	r1, r2
 80023ce:	2000      	movs	r0, #0
 80023d0:	461a      	mov	r2, r3
 80023d2:	f7ff bfd5 	b.w	8002380 <TerminalRead>

080023d6 <TerminalReadNonBlock>:

/* Attempt to read a single character from the Terminal buffer(s), return 1
 * if none are available. Return 0 if there is a character available.
 */
int TerminalReadNonBlock(uint32_t index, char *c)
{
 80023d6:	b508      	push	{r3, lr}
  /* Check for a character to be ready */
  if(TerminalRead(index,(uint8_t*)c,1) == 0) {
 80023d8:	2201      	movs	r2, #1
 80023da:	f7ff ffd1 	bl	8002380 <TerminalRead>
    /* Nope, just return */
    return 1;
  }
  return 0;
}
 80023de:	fab0 f080 	clz	r0, r0
 80023e2:	0940      	lsrs	r0, r0, #5
 80023e4:	bd08      	pop	{r3, pc}

080023e6 <TerminalReadAnyNonBlock>:

/* Scan through all possible terminal input buffers and return if
 * there is a character available.
 */
int TerminalReadAnyNonBlock(char *c)
{
 80023e6:	4601      	mov	r1, r0
 80023e8:	b508      	push	{r3, lr}
  uint32_t i;
  int rc;

  for(i=0; i<INDEX_MAX; i++) {
    rc = TerminalReadNonBlock(i, c);
 80023ea:	2000      	movs	r0, #0
 80023ec:	f7ff fff3 	bl	80023d6 <TerminalReadNonBlock>
    if(rc==0) {
      return rc;
    }
  }
  return 1;
}
 80023f0:	3000      	adds	r0, #0
 80023f2:	bf18      	it	ne
 80023f4:	2001      	movne	r0, #1
 80023f6:	bd08      	pop	{r3, pc}

080023f8 <TerminalOutputBufferWrite>:

/* Write a block to the given terminal buffer, assume interrupts can
 * be disabled.
 */
 uint32_t TerminalOutputBufferWrite(uint32_t index, char *p, uint32_t len)
{
 80023f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023fa:	4e37      	ldr	r6, [pc, #220]	; (80024d8 <TerminalOutputBufferWrite+0xe0>)
 80023fc:	f44f 7392 	mov.w	r3, #292	; 0x124
#ifdef USE_USB
  uint8_t cdcRc;
#endif
  uint32_t head, tail, count;
  /* Check that our block will ever fit, if not, return fail */
  if(len >= TERMINALBUFFERSIZE) {
 8002400:	2a7f      	cmp	r2, #127	; 0x7f
    /* Keep track of how many times this happens */
    TerminalState[index].stats.writeTooBig++;
 8002402:	fb03 6300 	mla	r3, r3, r0, r6
#ifdef USE_USB
  uint8_t cdcRc;
#endif
  uint32_t head, tail, count;
  /* Check that our block will ever fit, if not, return fail */
  if(len >= TERMINALBUFFERSIZE) {
 8002406:	d906      	bls.n	8002416 <TerminalOutputBufferWrite+0x1e>
    /* Keep track of how many times this happens */
    TerminalState[index].stats.writeTooBig++;
 8002408:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800240c:	3201      	adds	r2, #1
 800240e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    return 1;
 8002412:	2001      	movs	r0, #1
 8002414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }

  if((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 8002416:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 800241a:	fa12 f484 	uxtah	r4, r2, r4
 800241e:	2c7f      	cmp	r4, #127	; 0x7f
    /* Keep track of how many times we block */
    TerminalState[index].stats.writeBlocked++;
 8002420:	bf82      	ittt	hi
 8002422:	f8d3 4114 	ldrhi.w	r4, [r3, #276]	; 0x114
 8002426:	3401      	addhi	r4, #1
 8002428:	f8c3 4114 	strhi.w	r4, [r3, #276]	; 0x114
  }

  /* Block until there is room in the buffer */
  while((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {} 
 800242c:	f44f 7392 	mov.w	r3, #292	; 0x124
 8002430:	fb03 6300 	mla	r3, r3, r0, r6
 8002434:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 8002438:	fa12 f484 	uxtah	r4, r2, r4
 800243c:	2c7f      	cmp	r4, #127	; 0x7f
 800243e:	d8f5      	bhi.n	800242c <TerminalOutputBufferWrite+0x34>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002440:	b672      	cpsid	i

  /* Critical section begin */
  __disable_irq();
  /* Copy characters into the buffer */
  TerminalState[index].stats.written += len;  /* gather statistics */
 8002442:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 8002446:	4414      	add	r4, r2
 8002448:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
 800244c:	440a      	add	r2, r1
  while((len != 0) 
 800244e:	4291      	cmp	r1, r2
 8002450:	d01c      	beq.n	800248c <TerminalOutputBufferWrite+0x94>
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8002452:	f44f 7392 	mov.w	r3, #292	; 0x124
 8002456:	fb03 6300 	mla	r3, r3, r0, r6
 800245a:	f503 7584 	add.w	r5, r3, #264	; 0x108
 800245e:	886c      	ldrh	r4, [r5, #2]
 8002460:	b2a4      	uxth	r4, r4
 8002462:	2c7f      	cmp	r4, #127	; 0x7f
 8002464:	d812      	bhi.n	800248c <TerminalOutputBufferWrite+0x94>
    head = TerminalState[index].outHead;
 8002466:	f8b3 4106 	ldrh.w	r4, [r3, #262]	; 0x106
    TerminalState[index].outBuffer[head] = *p++;
 800246a:	f811 eb01 	ldrb.w	lr, [r1], #1
  __disable_irq();
  /* Copy characters into the buffer */
  TerminalState[index].stats.written += len;  /* gather statistics */
  while((len != 0) 
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
    head = TerminalState[index].outHead;
 800246e:	b2a4      	uxth	r4, r4
 8002470:	f503 7780 	add.w	r7, r3, #256	; 0x100
    TerminalState[index].outBuffer[head] = *p++;
 8002474:	4423      	add	r3, r4
    TerminalState[index].outHead = TERMINALINCR(head);
 8002476:	3401      	adds	r4, #1
 8002478:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 800247c:	80fc      	strh	r4, [r7, #6]
  /* Copy characters into the buffer */
  TerminalState[index].stats.written += len;  /* gather statistics */
  while((len != 0) 
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
    head = TerminalState[index].outHead;
    TerminalState[index].outBuffer[head] = *p++;
 800247e:	f883 e086 	strb.w	lr, [r3, #134]	; 0x86
    TerminalState[index].outHead = TERMINALINCR(head);
    TerminalState[index].outCount++;
 8002482:	886b      	ldrh	r3, [r5, #2]
 8002484:	3301      	adds	r3, #1
 8002486:	b29b      	uxth	r3, r3
 8002488:	806b      	strh	r3, [r5, #2]
 800248a:	e7e0      	b.n	800244e <TerminalOutputBufferWrite+0x56>
    len--;
  }
  
  /* Trigger output from this buffer */
  tail = TerminalState[index].outTail;
 800248c:	f44f 7392 	mov.w	r3, #292	; 0x124
 8002490:	fb03 6300 	mla	r3, r3, r0, r6
 8002494:	f8b3 2108 	ldrh.w	r2, [r3, #264]	; 0x108
 8002498:	b295      	uxth	r5, r2
  count = TerminalState[index].outCount;
 800249a:	f8b3 210a 	ldrh.w	r2, [r3, #266]	; 0x10a
 800249e:	b292      	uxth	r2, r2
  /* Only allow a transfer to the end of the buffer */
  if((count + tail) >= TERMINALBUFFERSIZE) {
 80024a0:	1953      	adds	r3, r2, r5
 80024a2:	2b7f      	cmp	r3, #127	; 0x7f
    count = TERMINALBUFFERSIZE - tail;
 80024a4:	bf88      	it	hi
 80024a6:	f1c5 0280 	rsbhi	r2, r5, #128	; 0x80
  }
  switch(index) {
 80024aa:	b990      	cbnz	r0, 80024d2 <TerminalOutputBufferWrite+0xda>
    }
    break;
#endif
#ifdef USE_USB
  case INDEX_USB: /* USB */
    if(hUSBDDevice.dev_state == USBD_STATE_CONFIGURED) {
 80024ac:	4f0b      	ldr	r7, [pc, #44]	; (80024dc <TerminalOutputBufferWrite+0xe4>)
 80024ae:	f897 31fc 	ldrb.w	r3, [r7, #508]	; 0x1fc
 80024b2:	2b03      	cmp	r3, #3
 80024b4:	d10d      	bne.n	80024d2 <TerminalOutputBufferWrite+0xda>
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 80024b6:	b294      	uxth	r4, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 80024b8:	1971      	adds	r1, r6, r5
    break;
#endif
#ifdef USE_USB
  case INDEX_USB: /* USB */
    if(hUSBDDevice.dev_state == USBD_STATE_CONFIGURED) {
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 80024ba:	4638      	mov	r0, r7
 80024bc:	3186      	adds	r1, #134	; 0x86
 80024be:	4622      	mov	r2, r4
 80024c0:	f002 ff93 	bl	80053ea <USBD_CDC_SetTxBuffer>
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
			   count);
      cdcRc = USBD_CDC_TransmitPacket(&hUSBDDevice);
 80024c4:	4638      	mov	r0, r7
 80024c6:	f002 ff9e 	bl	8005406 <USBD_CDC_TransmitPacket>
      if(cdcRc == USBD_OK) {
 80024ca:	b910      	cbnz	r0, 80024d2 <TerminalOutputBufferWrite+0xda>
	/* CDC was not busy, and we are now sending */
	TerminalState[index].outSending = count;
 80024cc:	4b02      	ldr	r3, [pc, #8]	; (80024d8 <TerminalOutputBufferWrite+0xe0>)
 80024ce:	f8a3 410c 	strh.w	r4, [r3, #268]	; 0x10c
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80024d2:	b662      	cpsie	i
 80024d4:	2000      	movs	r0, #0
    

  /* Critical section end */
  __enable_irq();
  return 0;
}
 80024d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024d8:	20000a68 	.word	0x20000a68
 80024dc:	20003938 	.word	0x20003938

080024e0 <_write_r>:
#endif

}

int _write_r(void *reent, int fd, char *ptr, size_t len)
{
 80024e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024e2:	461d      	mov	r5, r3
 80024e4:	4614      	mov	r4, r2
 80024e6:	18d7      	adds	r7, r2, r3
  uint32_t count;
  /* Frob buffer to add appropriate carriage returns and newlines */
  count = len;
  while(count != 0) {
 80024e8:	42bc      	cmp	r4, r7
 80024ea:	4626      	mov	r6, r4
 80024ec:	d00f      	beq.n	800250e <_write_r+0x2e>
    if(*ptr == '\n') {
 80024ee:	7833      	ldrb	r3, [r6, #0]
 80024f0:	2b0a      	cmp	r3, #10
 80024f2:	f104 0401 	add.w	r4, r4, #1
 80024f6:	d104      	bne.n	8002502 <_write_r+0x22>
      /* XXX handle buffer overflow */
#ifdef USE_UART
      TerminalOutputBufferWrite(INDEX_UART,"\r",1);
#endif
#ifdef USE_USB
      TerminalOutputBufferWrite(INDEX_USB,"\r",1);
 80024f8:	2000      	movs	r0, #0
 80024fa:	4906      	ldr	r1, [pc, #24]	; (8002514 <_write_r+0x34>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	f7ff ff7b 	bl	80023f8 <TerminalOutputBufferWrite>
    }
#ifdef USE_UART
    TerminalOutputBufferWrite(INDEX_UART,ptr,1);
#endif
#ifdef USE_USB
    TerminalOutputBufferWrite(INDEX_USB,ptr,1);
 8002502:	4631      	mov	r1, r6
 8002504:	2201      	movs	r2, #1
 8002506:	2000      	movs	r0, #0
 8002508:	f7ff ff76 	bl	80023f8 <TerminalOutputBufferWrite>
 800250c:	e7ec      	b.n	80024e8 <_write_r+0x8>
    /* Transfer error in transmission process */
    Error_Handler();
  }
#endif
  return len;
}
 800250e:	4628      	mov	r0, r5
 8002510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002512:	bf00      	nop
 8002514:	0800ae50 	.word	0x0800ae50

08002518 <TerminalInputBufferWrite>:
  __enable_irq();
  return 0;
}

uint32_t TerminalInputBufferWrite(uint32_t index, char *p, uint32_t len)
{
 8002518:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t head;

  /* Critical Section begin */
  //__disable_irq();
  /* Check that our block will fit, if not, return fail */
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 800251a:	4d1a      	ldr	r5, [pc, #104]	; (8002584 <TerminalInputBufferWrite+0x6c>)
 800251c:	f44f 7392 	mov.w	r3, #292	; 0x124
 8002520:	fb03 5300 	mla	r3, r3, r0, r5
 8002524:	f8b3 4084 	ldrh.w	r4, [r3, #132]	; 0x84
 8002528:	fa12 f484 	uxtah	r4, r2, r4
 800252c:	2c7f      	cmp	r4, #127	; 0x7f
 800252e:	d906      	bls.n	800253e <TerminalInputBufferWrite+0x26>
    //__enable_irq();
    TerminalState[index].stats.receiveTooBig++;
 8002530:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8002534:	3201      	adds	r2, #1
 8002536:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    return 1;
 800253a:	2001      	movs	r0, #1
 800253c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
  /* Copy characters into the buffer */
  TerminalState[index].stats.received += len;
 800253e:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8002542:	4414      	add	r4, r2
 8002544:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
 8002548:	440a      	add	r2, r1
  while(len != 0) {
 800254a:	4291      	cmp	r1, r2
 800254c:	d017      	beq.n	800257e <TerminalInputBufferWrite+0x66>
    head = TerminalState[index].inHead;
 800254e:	f44f 7492 	mov.w	r4, #292	; 0x124
 8002552:	4344      	muls	r4, r0
 8002554:	192f      	adds	r7, r5, r4
    TerminalState[index].inBuffer[head] = *p++;
 8002556:	f811 eb01 	ldrb.w	lr, [r1], #1
    return 1;
  }
  /* Copy characters into the buffer */
  TerminalState[index].stats.received += len;
  while(len != 0) {
    head = TerminalState[index].inHead;
 800255a:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800255e:	b29b      	uxth	r3, r3
    TerminalState[index].inBuffer[head] = *p++;
 8002560:	441c      	add	r4, r3
    TerminalState[index].inHead = TERMINALINCR(head);
 8002562:	3301      	adds	r3, #1
 8002564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002568:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
    TerminalState[index].inCount++;
 800256c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
  }
  /* Copy characters into the buffer */
  TerminalState[index].stats.received += len;
  while(len != 0) {
    head = TerminalState[index].inHead;
    TerminalState[index].inBuffer[head] = *p++;
 8002570:	f805 e004 	strb.w	lr, [r5, r4]
    TerminalState[index].inHead = TERMINALINCR(head);
    TerminalState[index].inCount++;
 8002574:	3301      	adds	r3, #1
 8002576:	b29b      	uxth	r3, r3
 8002578:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 800257c:	e7e5      	b.n	800254a <TerminalInputBufferWrite+0x32>
    len--;
  }
  
  /* Critical section end */
  //__enable_irq();
  return 0;
 800257e:	2000      	movs	r0, #0
}
 8002580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002582:	bf00      	nop
 8002584:	20000a68 	.word	0x20000a68

08002588 <USB_LP_CAN_RX0_IRQHandler>:
void USB_LP_CAN_RX0_IRQHandler(void)
#elif defined (USE_USB_INTERRUPT_REMAPPED)
void USB_LP_IRQHandler(void)
#endif
{
  HAL_PCD_IRQHandler(&hpcd);
 8002588:	4801      	ldr	r0, [pc, #4]	; (8002590 <USB_LP_CAN_RX0_IRQHandler+0x8>)
 800258a:	f001 bd24 	b.w	8003fd6 <HAL_PCD_IRQHandler>
 800258e:	bf00      	nop
 8002590:	20003b60 	.word	0x20003b60

08002594 <Uncompress>:

/* Uncompress a name, and return a pointer to a static buffer
   containging the name.
*/
static const char *Uncompress(char *str)
{
 8002594:	b570      	push	{r4, r5, r6, lr}
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8002596:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <Uncompress+0x70>)

/* Uncompress a name, and return a pointer to a static buffer
   containging the name.
*/
static const char *Uncompress(char *str)
{
 8002598:	b08a      	sub	sp, #40	; 0x28
 800259a:	4605      	mov	r5, r0
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 800259c:	466a      	mov	r2, sp
 800259e:	f103 0620 	add.w	r6, r3, #32
 80025a2:	6818      	ldr	r0, [r3, #0]
 80025a4:	6859      	ldr	r1, [r3, #4]
 80025a6:	4614      	mov	r4, r2
 80025a8:	c403      	stmia	r4!, {r0, r1}
 80025aa:	3308      	adds	r3, #8
 80025ac:	42b3      	cmp	r3, r6
 80025ae:	4622      	mov	r2, r4
 80025b0:	d1f7      	bne.n	80025a2 <Uncompress+0xe>
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	889b      	ldrh	r3, [r3, #4]
 80025b6:	6020      	str	r0, [r4, #0]
  uint32_t i,bits;
  uint32_t data;
  char c;

  /* Prime the data pump */
  data = (uint8_t)(*str++);
 80025b8:	4629      	mov	r1, r5
/* Uncompress a name, and return a pointer to a static buffer
   containging the name.
*/
static const char *Uncompress(char *str)
{
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 80025ba:	80a3      	strh	r3, [r4, #4]
  uint32_t i,bits;
  uint32_t data;
  char c;

  /* Prime the data pump */
  data = (uint8_t)(*str++);
 80025bc:	f811 2b02 	ldrb.w	r2, [r1], #2
  data <<= 8;
  data |= (uint8_t)(*str++);
 80025c0:	786b      	ldrb	r3, [r5, #1]
 80025c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  bits = 0;
  i = 0;
  //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
  while((data & (0x3f << 10)) != 0) {
 80025c6:	2200      	movs	r2, #0

  /* Prime the data pump */
  data = (uint8_t)(*str++);
  data <<= 8;
  data |= (uint8_t)(*str++);
  bits = 0;
 80025c8:	4614      	mov	r4, r2
  i = 0;
  //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
  while((data & (0x3f << 10)) != 0) {
 80025ca:	f413 457c 	ands.w	r5, r3, #64512	; 0xfc00
 80025ce:	480e      	ldr	r0, [pc, #56]	; (8002608 <Uncompress+0x74>)
 80025d0:	d014      	beq.n	80025fc <Uncompress+0x68>
    data <<= 6;
 80025d2:	019b      	lsls	r3, r3, #6
    data &= 0x3fffff;
 80025d4:	f3c3 0315 	ubfx	r3, r3, #0, #22
    c = decoderRing[(data>>16)-1];
 80025d8:	ad0a      	add	r5, sp, #40	; 0x28
 80025da:	eb05 4513 	add.w	r5, r5, r3, lsr #16
    buf[i++] = c;
 80025de:	f815 5c29 	ldrb.w	r5, [r5, #-41]
 80025e2:	5485      	strb	r5, [r0, r2]
    /* keep track of how many bits we have used */
    bits += 6;
 80025e4:	1da0      	adds	r0, r4, #6
    //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
    /* Once we have consumed at least 8 bits, fill in the bottom */
    if(bits >= 8) {
 80025e6:	2807      	cmp	r0, #7
      bits -= 8;
 80025e8:	bf81      	itttt	hi
 80025ea:	1ea0      	subhi	r0, r4, #2
      data |= ((uint32_t)(*str++)) << bits; 
 80025ec:	780c      	ldrbhi	r4, [r1, #0]
 80025ee:	4084      	lslhi	r4, r0
 80025f0:	4323      	orrhi	r3, r4
 80025f2:	bf88      	it	hi
 80025f4:	3101      	addhi	r1, #1
 80025f6:	3201      	adds	r2, #1
 80025f8:	4604      	mov	r4, r0
 80025fa:	e7e6      	b.n	80025ca <Uncompress+0x36>
    }
  }
  buf[i]='\0';
 80025fc:	5485      	strb	r5, [r0, r2]
  return buf;
}
 80025fe:	b00a      	add	sp, #40	; 0x28
 8002600:	bd70      	pop	{r4, r5, r6, pc}
 8002602:	bf00      	nop
 8002604:	0800b184 	.word	0x0800b184
 8002608:	20000b8c 	.word	0x20000b8c

0800260c <DecodeReadRegister>:


/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
 800260c:	b538      	push	{r3, r4, r5, lr}
  uint32_t address, val;

  if(p == NULL) return 0;
 800260e:	4604      	mov	r4, r0
 8002610:	b300      	cbz	r0, 8002654 <DecodeReadRegister+0x48>
  if(r == NULL) return 0;
 8002612:	b301      	cbz	r1, 8002656 <DecodeReadRegister+0x4a>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 8002614:	798d      	ldrb	r5, [r1, #6]

  if(p == NULL) return 0;
  if(r == NULL) return 0;
  
  /* Calculate effective address */
  address = p->base + r->offset;
 8002616:	888a      	ldrh	r2, [r1, #4]
 8002618:	6843      	ldr	r3, [r0, #4]

  /* read register according to size */
  switch(r->size) {
 800261a:	2d10      	cmp	r5, #16
 800261c:	d005      	beq.n	800262a <DecodeReadRegister+0x1e>
 800261e:	2d20      	cmp	r5, #32
 8002620:	d005      	beq.n	800262e <DecodeReadRegister+0x22>
 8002622:	2d08      	cmp	r5, #8
 8002624:	d105      	bne.n	8002632 <DecodeReadRegister+0x26>
  case 8:
    val = *(uint8_t *)address;
 8002626:	5cd0      	ldrb	r0, [r2, r3]
    break;
 8002628:	bd38      	pop	{r3, r4, r5, pc}
  case 16:
    val = *(uint16_t *)address;
 800262a:	5ad0      	ldrh	r0, [r2, r3]
    break;  
 800262c:	bd38      	pop	{r3, r4, r5, pc}
  case 32:
    val = *(uint32_t *)address;
 800262e:	58d0      	ldr	r0, [r2, r3]
    break;
 8002630:	bd38      	pop	{r3, r4, r5, pc}
  default:
    printf("Invalid size 0x%x for register %s",
 8002632:	6808      	ldr	r0, [r1, #0]
 8002634:	f7ff ffae 	bl	8002594 <Uncompress>
 8002638:	4629      	mov	r1, r5
 800263a:	4602      	mov	r2, r0
 800263c:	4807      	ldr	r0, [pc, #28]	; (800265c <DecodeReadRegister+0x50>)
 800263e:	f003 fa39 	bl	8005ab4 <printf>
	   (unsigned int)r->size,
	   Uncompress(r->name));
    printf(" in periphral %s!\n",
 8002642:	6820      	ldr	r0, [r4, #0]
 8002644:	f7ff ffa6 	bl	8002594 <Uncompress>
 8002648:	4601      	mov	r1, r0
 800264a:	4805      	ldr	r0, [pc, #20]	; (8002660 <DecodeReadRegister+0x54>)
 800264c:	f003 fa32 	bl	8005ab4 <printf>
	   Uncompress(p->name));
    return 0;
 8002650:	2000      	movs	r0, #0
 8002652:	bd38      	pop	{r3, r4, r5, pc}
 8002654:	bd38      	pop	{r3, r4, r5, pc}
/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
  uint32_t address, val;

  if(p == NULL) return 0;
 8002656:	4608      	mov	r0, r1
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 0;
  }
  return val;
}
 8002658:	bd38      	pop	{r3, r4, r5, pc}
 800265a:	bf00      	nop
 800265c:	0800b1aa 	.word	0x0800b1aa
 8002660:	0800b1cc 	.word	0x0800b1cc

08002664 <DecodeWriteRegister>:

/* Read a specific register from memory */
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
 8002664:	b538      	push	{r3, r4, r5, lr}
  uint32_t address;

  if(p == NULL) return 1;
 8002666:	4605      	mov	r5, r0
 8002668:	b1f8      	cbz	r0, 80026aa <DecodeWriteRegister+0x46>
  if(r == NULL) return 1;
 800266a:	b1f1      	cbz	r1, 80026aa <DecodeWriteRegister+0x46>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 800266c:	798c      	ldrb	r4, [r1, #6]

  if(p == NULL) return 1;
  if(r == NULL) return 1;
  
  /* Calculate effective address */
  address = p->base + r->offset;
 800266e:	8888      	ldrh	r0, [r1, #4]
 8002670:	686b      	ldr	r3, [r5, #4]

  /* read register according to size */
  switch(r->size) {
 8002672:	2c10      	cmp	r4, #16
 8002674:	d005      	beq.n	8002682 <DecodeWriteRegister+0x1e>
 8002676:	2c20      	cmp	r4, #32
 8002678:	d005      	beq.n	8002686 <DecodeWriteRegister+0x22>
 800267a:	2c08      	cmp	r4, #8
 800267c:	d106      	bne.n	800268c <DecodeWriteRegister+0x28>
  case 8:
    *(uint8_t *)address = val;
 800267e:	54c2      	strb	r2, [r0, r3]
 8002680:	e002      	b.n	8002688 <DecodeWriteRegister+0x24>
    break;
  case 16:
    *(uint16_t *)address = val;
 8002682:	52c2      	strh	r2, [r0, r3]
 8002684:	e000      	b.n	8002688 <DecodeWriteRegister+0x24>
    break;  
  case 32:
    *(uint32_t *)address = val;
 8002686:	50c2      	str	r2, [r0, r3]
	   Uncompress(r->name));
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 1;
  }
  return 0;
 8002688:	2000      	movs	r0, #0
  case 16:
    *(uint16_t *)address = val;
    break;  
  case 32:
    *(uint32_t *)address = val;
    break;
 800268a:	bd38      	pop	{r3, r4, r5, pc}
  default:
    printf("Invalid size 0x%x for register %s",
 800268c:	6808      	ldr	r0, [r1, #0]
 800268e:	f7ff ff81 	bl	8002594 <Uncompress>
 8002692:	4621      	mov	r1, r4
 8002694:	4602      	mov	r2, r0
 8002696:	4806      	ldr	r0, [pc, #24]	; (80026b0 <DecodeWriteRegister+0x4c>)
 8002698:	f003 fa0c 	bl	8005ab4 <printf>
	   (unsigned int)r->size,
	   Uncompress(r->name));
    printf(" in periphral %s!\n",
 800269c:	6828      	ldr	r0, [r5, #0]
 800269e:	f7ff ff79 	bl	8002594 <Uncompress>
 80026a2:	4601      	mov	r1, r0
 80026a4:	4803      	ldr	r0, [pc, #12]	; (80026b4 <DecodeWriteRegister+0x50>)
 80026a6:	f003 fa05 	bl	8005ab4 <printf>
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
  uint32_t address;

  if(p == NULL) return 1;
 80026aa:	2001      	movs	r0, #1
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 1;
  }
  return 0;
}
 80026ac:	bd38      	pop	{r3, r4, r5, pc}
 80026ae:	bf00      	nop
 80026b0:	0800b1aa 	.word	0x0800b1aa
 80026b4:	0800b1cc 	.word	0x0800b1cc

080026b8 <DecodeField>:

/* Decode a field */
void DecodeField(const Field_t *f, uint32_t val)
{
 80026b8:	b530      	push	{r4, r5, lr}
  uint32_t v;
  if(f == NULL) return;
 80026ba:	4604      	mov	r4, r0
  return 0;
}

/* Decode a field */
void DecodeField(const Field_t *f, uint32_t val)
{
 80026bc:	b085      	sub	sp, #20
  uint32_t v;
  if(f == NULL) return;
 80026be:	b1c8      	cbz	r0, 80026f4 <DecodeField+0x3c>

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 80026c0:	7943      	ldrb	r3, [r0, #5]
 80026c2:	2501      	movs	r5, #1
 80026c4:	409d      	lsls	r5, r3
 80026c6:	7903      	ldrb	r3, [r0, #4]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 80026c8:	6800      	ldr	r0, [r0, #0]
void DecodeField(const Field_t *f, uint32_t val)
{
  uint32_t v;
  if(f == NULL) return;

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 80026ca:	40d9      	lsrs	r1, r3
 80026cc:	3d01      	subs	r5, #1
 80026ce:	400d      	ands	r5, r1
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 80026d0:	f7ff ff60 	bl	8002594 <Uncompress>
	 Uncompress(f->name),  
	 (unsigned int)v,
	 (unsigned int)v,
	 (unsigned int)(f->width),
 80026d4:	7962      	ldrb	r2, [r4, #5]
{
  uint32_t v;
  if(f == NULL) return;

  v = (val >> (f->offset)) & ((1<<f->width)-1);
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 80026d6:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <DecodeField+0x40>)
 80026d8:	4601      	mov	r1, r0
 80026da:	4808      	ldr	r0, [pc, #32]	; (80026fc <DecodeField+0x44>)
 80026dc:	2a01      	cmp	r2, #1
 80026de:	bf98      	it	ls
 80026e0:	4603      	movls	r3, r0
 80026e2:	e88d 000c 	stmia.w	sp, {r2, r3}
 80026e6:	7923      	ldrb	r3, [r4, #4]
 80026e8:	9302      	str	r3, [sp, #8]
 80026ea:	4805      	ldr	r0, [pc, #20]	; (8002700 <DecodeField+0x48>)
 80026ec:	462a      	mov	r2, r5
 80026ee:	462b      	mov	r3, r5
 80026f0:	f003 f9e0 	bl	8005ab4 <printf>
	 (unsigned int)v,
	 (unsigned int)v,
	 (unsigned int)(f->width),
	 (f->width > 1 ) ? "bits," : "bit, ",
	 (unsigned int)(f->offset));
}
 80026f4:	b005      	add	sp, #20
 80026f6:	bd30      	pop	{r4, r5, pc}
 80026f8:	0800b1df 	.word	0x0800b1df
 80026fc:	0800b1e5 	.word	0x0800b1e5
 8002700:	0800b1eb 	.word	0x0800b1eb

08002704 <DecodeRegister>:

/* Decode a register */
void DecodeRegister(const Register_t *r, uint32_t base, uint32_t val,
		    uint32_t decodeFields)
{
 8002704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002706:	460f      	mov	r7, r1
 8002708:	4616      	mov	r6, r2
 800270a:	461d      	mov	r5, r3
  Field_t const *f;
  uint32_t i;
  
  if(r == NULL) return;
 800270c:	4604      	mov	r4, r0
 800270e:	b310      	cbz	r0, 8002756 <DecodeRegister+0x52>

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8002710:	6800      	ldr	r0, [r0, #0]
 8002712:	f7ff ff3f 	bl	8002594 <Uncompress>
 8002716:	79a3      	ldrb	r3, [r4, #6]
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	88a3      	ldrh	r3, [r4, #4]
	 Uncompress(r->name),
	 (unsigned int)val,
	 (unsigned int)val,
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
 800271c:	443b      	add	r3, r7
  uint32_t i;
  
  if(r == NULL) return;

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 800271e:	4601      	mov	r1, r0
 8002720:	9301      	str	r3, [sp, #4]
 8002722:	480e      	ldr	r0, [pc, #56]	; (800275c <DecodeRegister+0x58>)
 8002724:	4632      	mov	r2, r6
 8002726:	4633      	mov	r3, r6
 8002728:	f003 f9c4 	bl	8005ab4 <printf>
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
 800272c:	68a7      	ldr	r7, [r4, #8]
 800272e:	b15f      	cbz	r7, 8002748 <DecodeRegister+0x44>
 8002730:	b18d      	cbz	r5, 8002756 <DecodeRegister+0x52>
 8002732:	2500      	movs	r5, #0
    f = r->fields;
    for(i=0; i<r->numFields; i++) {
 8002734:	89a3      	ldrh	r3, [r4, #12]
 8002736:	429d      	cmp	r5, r3
 8002738:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 800273c:	d205      	bcs.n	800274a <DecodeRegister+0x46>
      DecodeField(f,val);
 800273e:	4631      	mov	r1, r6
 8002740:	f7ff ffba 	bl	80026b8 <DecodeField>
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
    f = r->fields;
    for(i=0; i<r->numFields; i++) {
 8002744:	3501      	adds	r5, #1
 8002746:	e7f5      	b.n	8002734 <DecodeRegister+0x30>
      DecodeField(f,val);
      f++;
    }
  }
  if(decodeFields) {
 8002748:	b12d      	cbz	r5, 8002756 <DecodeRegister+0x52>
    printf("\n");
 800274a:	200a      	movs	r0, #10
  }

}
 800274c:	b003      	add	sp, #12
 800274e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      DecodeField(f,val);
      f++;
    }
  }
  if(decodeFields) {
    printf("\n");
 8002752:	f003 b9c3 	b.w	8005adc <putchar>
  }

}
 8002756:	b003      	add	sp, #12
 8002758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800275a:	bf00      	nop
 800275c:	0800b214 	.word	0x0800b214

08002760 <DecodePeripheral>:

/* Decode a peripheral */
void DecodePeripheral(const Peripheral_t *p, uint32_t decodeFields)
{
 8002760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002764:	4688      	mov	r8, r1
  Register_t const *r;
  uint32_t val;
  uint32_t i;

  if(p == NULL) return;
 8002766:	4604      	mov	r4, r0
 8002768:	b1e8      	cbz	r0, 80027a6 <DecodePeripheral+0x46>
  
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 800276a:	6800      	ldr	r0, [r0, #0]
 800276c:	f7ff ff12 	bl	8002594 <Uncompress>
 8002770:	6862      	ldr	r2, [r4, #4]
 8002772:	4601      	mov	r1, r0
 8002774:	480d      	ldr	r0, [pc, #52]	; (80027ac <DecodePeripheral+0x4c>)
 8002776:	f003 f99d 	bl	8005ab4 <printf>
	 Uncompress(p->name),  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
 800277a:	68a7      	ldr	r7, [r4, #8]
 800277c:	b90f      	cbnz	r7, 8002782 <DecodePeripheral+0x22>
 800277e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002782:	2500      	movs	r5, #0
    r = p->registers;
    for(i=0; i<p->numRegisters; i++) {
 8002784:	89a3      	ldrh	r3, [r4, #12]
 8002786:	429d      	cmp	r5, r3
 8002788:	eb07 1605 	add.w	r6, r7, r5, lsl #4
 800278c:	d20b      	bcs.n	80027a6 <DecodePeripheral+0x46>
      /* Read value */
      val = DecodeReadRegister(p,r);
 800278e:	4631      	mov	r1, r6
 8002790:	4620      	mov	r0, r4
 8002792:	f7ff ff3b 	bl	800260c <DecodeReadRegister>
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
 8002796:	6861      	ldr	r1, [r4, #4]
  /* Dump out registers */
  if(p->registers != NULL) {
    r = p->registers;
    for(i=0; i<p->numRegisters; i++) {
      /* Read value */
      val = DecodeReadRegister(p,r);
 8002798:	4602      	mov	r2, r0
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
 800279a:	4643      	mov	r3, r8
 800279c:	4630      	mov	r0, r6
 800279e:	f7ff ffb1 	bl	8002704 <DecodeRegister>
	 Uncompress(p->name),  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
    r = p->registers;
    for(i=0; i<p->numRegisters; i++) {
 80027a2:	3501      	adds	r5, #1
 80027a4:	e7ee      	b.n	8002784 <DecodePeripheral+0x24>
 80027a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027aa:	bf00      	nop
 80027ac:	0800b24f 	.word	0x0800b24f

080027b0 <DecodePrintPeripherals>:
  }
}

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
 80027b0:	b538      	push	{r3, r4, r5, lr}
 80027b2:	4605      	mov	r5, r0
  uint32_t col;
  col = 8;
  printf("\t");
 80027b4:	2009      	movs	r0, #9
 80027b6:	f003 f991 	bl	8005adc <putchar>

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
  uint32_t col;
  col = 8;
 80027ba:	2408      	movs	r4, #8
  printf("\t");
  for(; p->name != NULL; p++) {
 80027bc:	6828      	ldr	r0, [r5, #0]
 80027be:	b1a0      	cbz	r0, 80027ea <DecodePrintPeripherals+0x3a>
    col += printf("%s",Uncompress(p->name));
 80027c0:	f7ff fee8 	bl	8002594 <Uncompress>
 80027c4:	4601      	mov	r1, r0
 80027c6:	4809      	ldr	r0, [pc, #36]	; (80027ec <DecodePrintPeripherals+0x3c>)
 80027c8:	f003 f974 	bl	8005ab4 <printf>
    if((p+1)->name != NULL) {
 80027cc:	692b      	ldr	r3, [r5, #16]
{
  uint32_t col;
  col = 8;
  printf("\t");
  for(; p->name != NULL; p++) {
    col += printf("%s",Uncompress(p->name));
 80027ce:	4404      	add	r4, r0
    if((p+1)->name != NULL) {
 80027d0:	b14b      	cbz	r3, 80027e6 <DecodePrintPeripherals+0x36>
      col += printf(", ");
 80027d2:	4807      	ldr	r0, [pc, #28]	; (80027f0 <DecodePrintPeripherals+0x40>)
 80027d4:	f003 f96e 	bl	8005ab4 <printf>
 80027d8:	4404      	add	r4, r0
      if(col > 70) {
 80027da:	2c46      	cmp	r4, #70	; 0x46
 80027dc:	d903      	bls.n	80027e6 <DecodePrintPeripherals+0x36>
	col = 8;
	printf("\n\t");
 80027de:	4805      	ldr	r0, [pc, #20]	; (80027f4 <DecodePrintPeripherals+0x44>)
 80027e0:	f003 f968 	bl	8005ab4 <printf>
  for(; p->name != NULL; p++) {
    col += printf("%s",Uncompress(p->name));
    if((p+1)->name != NULL) {
      col += printf(", ");
      if(col > 70) {
	col = 8;
 80027e4:	2408      	movs	r4, #8
void DecodePrintPeripherals(const Peripheral_t *p)
{
  uint32_t col;
  col = 8;
  printf("\t");
  for(; p->name != NULL; p++) {
 80027e6:	3510      	adds	r5, #16
 80027e8:	e7e8      	b.n	80027bc <DecodePrintPeripherals+0xc>
	col = 8;
	printf("\n\t");
      }
    }
  }
}
 80027ea:	bd38      	pop	{r3, r4, r5, pc}
 80027ec:	0800b1c9 	.word	0x0800b1c9
 80027f0:	0800b1e8 	.word	0x0800b1e8
 80027f4:	0800b277 	.word	0x0800b277

080027f8 <DecodePrintRegisters>:

void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 80027f8:	b570      	push	{r4, r5, r6, lr}
 80027fa:	4606      	mov	r6, r0
  uint8_t col;
  col = 8;
  printf("\t");
 80027fc:	2009      	movs	r0, #9
      }
    }
  }
}

void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 80027fe:	460d      	mov	r5, r1
  uint8_t col;
  col = 8;
  printf("\t");
 8002800:	f003 f96c 	bl	8005adc <putchar>
 8002804:	3d01      	subs	r5, #1
 8002806:	3610      	adds	r6, #16
  }
}

void DecodePrintRegisters(const Register_t *r,uint32_t count) {
  uint8_t col;
  col = 8;
 8002808:	2408      	movs	r4, #8
  printf("\t");
  while(count--) {
 800280a:	1c6b      	adds	r3, r5, #1
 800280c:	d018      	beq.n	8002840 <DecodePrintRegisters+0x48>
    col += printf("%s",Uncompress(r->name));
 800280e:	f856 0c10 	ldr.w	r0, [r6, #-16]
 8002812:	f7ff febf 	bl	8002594 <Uncompress>
 8002816:	4601      	mov	r1, r0
 8002818:	480a      	ldr	r0, [pc, #40]	; (8002844 <DecodePrintRegisters+0x4c>)
 800281a:	f003 f94b 	bl	8005ab4 <printf>
 800281e:	4420      	add	r0, r4
 8002820:	b2c4      	uxtb	r4, r0
    if(count) {
 8002822:	b155      	cbz	r5, 800283a <DecodePrintRegisters+0x42>
      col += printf(", ");
 8002824:	4808      	ldr	r0, [pc, #32]	; (8002848 <DecodePrintRegisters+0x50>)
 8002826:	f003 f945 	bl	8005ab4 <printf>
 800282a:	4420      	add	r0, r4
 800282c:	b2c4      	uxtb	r4, r0
      if(col > 70) {
 800282e:	2c46      	cmp	r4, #70	; 0x46
 8002830:	d903      	bls.n	800283a <DecodePrintRegisters+0x42>
	col = 8;
	printf("\n\t");
 8002832:	4806      	ldr	r0, [pc, #24]	; (800284c <DecodePrintRegisters+0x54>)
 8002834:	f003 f93e 	bl	8005ab4 <printf>
  while(count--) {
    col += printf("%s",Uncompress(r->name));
    if(count) {
      col += printf(", ");
      if(col > 70) {
	col = 8;
 8002838:	2408      	movs	r4, #8
 800283a:	3d01      	subs	r5, #1
 800283c:	3610      	adds	r6, #16
 800283e:	e7e4      	b.n	800280a <DecodePrintRegisters+0x12>
	printf("\n\t");
      }
    }
    r++;
  }
}
 8002840:	bd70      	pop	{r4, r5, r6, pc}
 8002842:	bf00      	nop
 8002844:	0800b1c9 	.word	0x0800b1c9
 8002848:	0800b1e8 	.word	0x0800b1e8
 800284c:	0800b277 	.word	0x0800b277

08002850 <CmdDecode>:

void CmdDecode(int mode)
{
 8002850:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t val,oval,t,m,i;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 8002852:	2802      	cmp	r0, #2
    r++;
  }
}

void CmdDecode(int mode)
{
 8002854:	b085      	sub	sp, #20
  uint32_t val,oval,t,m,i;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 8002856:	d131      	bne.n	80028bc <CmdDecode+0x6c>
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
 8002858:	a803      	add	r0, sp, #12
 800285a:	f7ff fc2f 	bl	80020bc <fetch_string_arg>
    if(rc) {
 800285e:	b138      	cbz	r0, 8002870 <CmdDecode+0x20>
      /* nothing to fetch, general help */
      printf("decode {<periph> {<reg>}|full}\n"
 8002860:	4888      	ldr	r0, [pc, #544]	; (8002a84 <CmdDecode+0x234>)
 8002862:	f003 f973 	bl	8005b4c <puts>
	     "The forms with <val> on the end allow you to set the\n"
	     "selected register/field value\n"
	     "\n"
	     "Valid peripherals are:\n"
	     "\n");
      DecodePrintPeripherals(Peripherals);
 8002866:	4888      	ldr	r0, [pc, #544]	; (8002a88 <CmdDecode+0x238>)
 8002868:	f7ff ffa2 	bl	80027b0 <DecodePrintPeripherals>
      printf("\n\n"
 800286c:	4887      	ldr	r0, [pc, #540]	; (8002a8c <CmdDecode+0x23c>)
 800286e:	e022      	b.n	80028b6 <CmdDecode+0x66>
 8002870:	4c85      	ldr	r4, [pc, #532]	; (8002a88 <CmdDecode+0x238>)
    } else {
      /* User is requesting a list of registers for a peripheral */
      
      /* Locate the peripheral name */
      p = Peripherals;
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 8002872:	6820      	ldr	r0, [r4, #0]
 8002874:	b948      	cbnz	r0, 800288a <CmdDecode+0x3a>
	p++;
      }

      if(p->name == NULL) {
 8002876:	6820      	ldr	r0, [r4, #0]
 8002878:	b990      	cbnz	r0, 80028a0 <CmdDecode+0x50>
	/* No valid peripheral name found */
	printf("%s is not a valid peripheral name\n"
 800287a:	9903      	ldr	r1, [sp, #12]
 800287c:	4884      	ldr	r0, [pc, #528]	; (8002a90 <CmdDecode+0x240>)
 800287e:	f003 f919 	bl	8005ab4 <printf>
	       "Valid peripherals are:\n"
	       "\n",
	       n);
	DecodePrintPeripherals(Peripherals);
 8002882:	4881      	ldr	r0, [pc, #516]	; (8002a88 <CmdDecode+0x238>)
 8002884:	f7ff ff94 	bl	80027b0 <DecodePrintPeripherals>
	return;
 8002888:	e0f9      	b.n	8002a7e <CmdDecode+0x22e>
    } else {
      /* User is requesting a list of registers for a peripheral */
      
      /* Locate the peripheral name */
      p = Peripherals;
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 800288a:	9d03      	ldr	r5, [sp, #12]
 800288c:	f7ff fe82 	bl	8002594 <Uncompress>
 8002890:	4601      	mov	r1, r0
 8002892:	4628      	mov	r0, r5
 8002894:	f003 f9de 	bl	8005c54 <strcasecmp>
 8002898:	2800      	cmp	r0, #0
 800289a:	d0ec      	beq.n	8002876 <CmdDecode+0x26>
	p++;
 800289c:	3410      	adds	r4, #16
 800289e:	e7e8      	b.n	8002872 <CmdDecode+0x22>
	       "\n",
	       n);
	DecodePrintPeripherals(Peripherals);
	return;
      }
      printf("Valid registers for peripheral %s:\n"
 80028a0:	f7ff fe78 	bl	8002594 <Uncompress>
 80028a4:	4601      	mov	r1, r0
 80028a6:	487b      	ldr	r0, [pc, #492]	; (8002a94 <CmdDecode+0x244>)
 80028a8:	f003 f904 	bl	8005ab4 <printf>
	     "\n",
	     Uncompress(p->name));
      DecodePrintRegisters(p->registers,p->numRegisters);
 80028ac:	68a0      	ldr	r0, [r4, #8]
 80028ae:	89a1      	ldrh	r1, [r4, #12]
 80028b0:	f7ff ffa2 	bl	80027f8 <DecodePrintRegisters>
      printf("\n\n");
 80028b4:	4878      	ldr	r0, [pc, #480]	; (8002a98 <CmdDecode+0x248>)
 80028b6:	f003 f949 	bl	8005b4c <puts>
 80028ba:	e0e0      	b.n	8002a7e <CmdDecode+0x22e>
    }
    
    return;
  }
  /* User is requesting to decode something */
  rc = fetch_string_arg(&pname);
 80028bc:	4668      	mov	r0, sp
 80028be:	f7ff fbfd 	bl	80020bc <fetch_string_arg>
  if(rc) {
 80028c2:	b118      	cbz	r0, 80028cc <CmdDecode+0x7c>
    /* User did not specify a peripheral name */
    printf("Missing peripheral name, please chose one of:\n\n");
 80028c4:	4875      	ldr	r0, [pc, #468]	; (8002a9c <CmdDecode+0x24c>)
 80028c6:	f003 f941 	bl	8005b4c <puts>
 80028ca:	e014      	b.n	80028f6 <CmdDecode+0xa6>
 80028cc:	4c6e      	ldr	r4, [pc, #440]	; (8002a88 <CmdDecode+0x238>)
    return;
  }

  /* Attempt to locate the periperhal */
  p = Peripherals;
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 80028ce:	6820      	ldr	r0, [r4, #0]
 80028d0:	b930      	cbnz	r0, 80028e0 <CmdDecode+0x90>
    p++;
  }

  if(p->name == NULL) {
 80028d2:	6823      	ldr	r3, [r4, #0]
 80028d4:	b99b      	cbnz	r3, 80028fe <CmdDecode+0xae>
    /* No valid peripheral name found */
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
 80028d6:	9900      	ldr	r1, [sp, #0]
 80028d8:	4871      	ldr	r0, [pc, #452]	; (8002aa0 <CmdDecode+0x250>)
 80028da:	f003 f8eb 	bl	8005ab4 <printf>
 80028de:	e00a      	b.n	80028f6 <CmdDecode+0xa6>
    return;
  }

  /* Attempt to locate the periperhal */
  p = Peripherals;
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 80028e0:	9d00      	ldr	r5, [sp, #0]
 80028e2:	f7ff fe57 	bl	8002594 <Uncompress>
 80028e6:	4601      	mov	r1, r0
 80028e8:	4628      	mov	r0, r5
 80028ea:	f003 f9b3 	bl	8005c54 <strcasecmp>
 80028ee:	2800      	cmp	r0, #0
 80028f0:	d0ef      	beq.n	80028d2 <CmdDecode+0x82>
    p++;
 80028f2:	3410      	adds	r4, #16
 80028f4:	e7eb      	b.n	80028ce <CmdDecode+0x7e>

  if(p->name == NULL) {
    /* No valid peripheral name found */
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
	   pname);
    DecodePrintPeripherals(Peripherals);
 80028f6:	4864      	ldr	r0, [pc, #400]	; (8002a88 <CmdDecode+0x238>)
 80028f8:	f7ff ff5a 	bl	80027b0 <DecodePrintPeripherals>
 80028fc:	e7da      	b.n	80028b4 <CmdDecode+0x64>
    printf("\n\n");
    return;
  }
  
  /* See if the user is specifying a register */
  rc = fetch_string_arg(&rname);
 80028fe:	a801      	add	r0, sp, #4
 8002900:	f7ff fbdc 	bl	80020bc <fetch_string_arg>
  if(rc) {
 8002904:	b110      	cbz	r0, 800290c <CmdDecode+0xbc>
    /* No register name specified, dump whole peripheral */
    DecodePeripheral(p,0);
 8002906:	4620      	mov	r0, r4
 8002908:	2100      	movs	r1, #0
 800290a:	e017      	b.n	800293c <CmdDecode+0xec>
    return;
  }

  /* See if we can find the register in the list. */
  r = p->registers;
 800290c:	68a5      	ldr	r5, [r4, #8]
  i = p->numRegisters;
 800290e:	89a7      	ldrh	r7, [r4, #12]
 8002910:	9e01      	ldr	r6, [sp, #4]
  while((i--) && strcasecmp(rname,Uncompress(r->name))) {
 8002912:	b157      	cbz	r7, 800292a <CmdDecode+0xda>
 8002914:	6828      	ldr	r0, [r5, #0]
 8002916:	f7ff fe3d 	bl	8002594 <Uncompress>
 800291a:	4601      	mov	r1, r0
 800291c:	4630      	mov	r0, r6
 800291e:	f003 f999 	bl	8005c54 <strcasecmp>
 8002922:	3f01      	subs	r7, #1
 8002924:	b168      	cbz	r0, 8002942 <CmdDecode+0xf2>
    r++;
 8002926:	3510      	adds	r5, #16
 8002928:	e7f2      	b.n	8002910 <CmdDecode+0xc0>
  }

  if(i == -1) {
    /* if the user says 'full' do a full decode */
    if(strcasecmp(rname,"full") == 0) {
 800292a:	4630      	mov	r0, r6
 800292c:	495d      	ldr	r1, [pc, #372]	; (8002aa4 <CmdDecode+0x254>)
 800292e:	f003 f991 	bl	8005c54 <strcasecmp>
 8002932:	2800      	cmp	r0, #0
 8002934:	f040 809a 	bne.w	8002a6c <CmdDecode+0x21c>
      DecodePeripheral(p,1);
 8002938:	4620      	mov	r0, r4
 800293a:	2101      	movs	r1, #1
 800293c:	f7ff ff10 	bl	8002760 <DecodePeripheral>
      return;
 8002940:	e09d      	b.n	8002a7e <CmdDecode+0x22e>
    printf("\n\n");
    return;
  }    

  /* Check to see if there is a field name, or integer value to program */
  rc = fetch_string_arg(&fname);
 8002942:	a802      	add	r0, sp, #8
 8002944:	f7ff fbba 	bl	80020bc <fetch_string_arg>
  if(rc == 0) {
 8002948:	2800      	cmp	r0, #0
 800294a:	f040 8083 	bne.w	8002a54 <CmdDecode+0x204>
    /* if the user says 'val', decode the value given, as if it came
     * from the named register.
     */
    if(strcasecmp(fname,"val") == 0) {
 800294e:	9802      	ldr	r0, [sp, #8]
 8002950:	4955      	ldr	r1, [pc, #340]	; (8002aa8 <CmdDecode+0x258>)
 8002952:	f003 f97f 	bl	8005c54 <strcasecmp>
 8002956:	b948      	cbnz	r0, 800296c <CmdDecode+0x11c>
      rc = fetch_uint32_arg(&val);
 8002958:	a803      	add	r0, sp, #12
 800295a:	f7ff fb9b 	bl	8002094 <fetch_uint32_arg>
      if(rc) {
 800295e:	b108      	cbz	r0, 8002964 <CmdDecode+0x114>
	printf("Missing value to use in decode\n");
 8002960:	4852      	ldr	r0, [pc, #328]	; (8002aac <CmdDecode+0x25c>)
 8002962:	e7a8      	b.n	80028b6 <CmdDecode+0x66>
	return;
      }
      DecodeRegister(r,p->base,val,1);
 8002964:	4628      	mov	r0, r5
 8002966:	6861      	ldr	r1, [r4, #4]
 8002968:	9a03      	ldr	r2, [sp, #12]
 800296a:	e07b      	b.n	8002a64 <CmdDecode+0x214>
      return;
    }

    /* There was something... see if it matches a field name */
    f = r->fields;
 800296c:	68ae      	ldr	r6, [r5, #8]
    while((f->name != NULL) && strcasecmp(fname,Uncompress(f->name))) {
 800296e:	6830      	ldr	r0, [r6, #0]
 8002970:	b910      	cbnz	r0, 8002978 <CmdDecode+0x128>
      f++;
    }
    if(f->name != NULL) {
 8002972:	6837      	ldr	r7, [r6, #0]
 8002974:	b95f      	cbnz	r7, 800298e <CmdDecode+0x13e>
 8002976:	e046      	b.n	8002a06 <CmdDecode+0x1b6>
      return;
    }

    /* There was something... see if it matches a field name */
    f = r->fields;
    while((f->name != NULL) && strcasecmp(fname,Uncompress(f->name))) {
 8002978:	9f02      	ldr	r7, [sp, #8]
 800297a:	f7ff fe0b 	bl	8002594 <Uncompress>
 800297e:	4601      	mov	r1, r0
 8002980:	4638      	mov	r0, r7
 8002982:	f003 f967 	bl	8005c54 <strcasecmp>
 8002986:	2800      	cmp	r0, #0
 8002988:	d0f3      	beq.n	8002972 <CmdDecode+0x122>
      f++;
 800298a:	3608      	adds	r6, #8
 800298c:	e7ef      	b.n	800296e <CmdDecode+0x11e>
    }
    if(f->name != NULL) {
      /* Matched a field name, look for the value */
      rc = fetch_uint32_arg(&val);
 800298e:	a803      	add	r0, sp, #12
 8002990:	f7ff fb80 	bl	8002094 <fetch_uint32_arg>
      if(rc) {
 8002994:	b128      	cbz	r0, 80029a2 <CmdDecode+0x152>
	/* Unable to locate a value */
	printf("Missing Value to program into register %s\n",
 8002996:	6828      	ldr	r0, [r5, #0]
 8002998:	f7ff fdfc 	bl	8002594 <Uncompress>
 800299c:	4601      	mov	r1, r0
 800299e:	4844      	ldr	r0, [pc, #272]	; (8002ab0 <CmdDecode+0x260>)
 80029a0:	e040      	b.n	8002a24 <CmdDecode+0x1d4>
	       Uncompress(r->name));
	return;
      }
    
      /* Update the register field */
      t = DecodeReadRegister(p,r);
 80029a2:	4629      	mov	r1, r5
 80029a4:	4620      	mov	r0, r4
 80029a6:	f7ff fe31 	bl	800260c <DecodeReadRegister>
      /* Create mask */
      m = (1<<f->width)-1;
 80029aa:	7972      	ldrb	r2, [r6, #5]

      oval = (t >> f->offset) & m; /* Save old value */
 80029ac:	f896 e004 	ldrb.w	lr, [r6, #4]

      t &= ~(m << f->offset);
      t |= (val & m) << f->offset;
 80029b0:	9903      	ldr	r1, [sp, #12]
      }
    
      /* Update the register field */
      t = DecodeReadRegister(p,r);
      /* Create mask */
      m = (1<<f->width)-1;
 80029b2:	2301      	movs	r3, #1
 80029b4:	4093      	lsls	r3, r2

      oval = (t >> f->offset) & m; /* Save old value */
 80029b6:	fa20 f70e 	lsr.w	r7, r0, lr
      }
    
      /* Update the register field */
      t = DecodeReadRegister(p,r);
      /* Create mask */
      m = (1<<f->width)-1;
 80029ba:	3b01      	subs	r3, #1

      oval = (t >> f->offset) & m; /* Save old value */

      t &= ~(m << f->offset);
 80029bc:	fa03 f20e 	lsl.w	r2, r3, lr
      /* Update the register field */
      t = DecodeReadRegister(p,r);
      /* Create mask */
      m = (1<<f->width)-1;

      oval = (t >> f->offset) & m; /* Save old value */
 80029c0:	401f      	ands	r7, r3

      t &= ~(m << f->offset);
      t |= (val & m) << f->offset;
 80029c2:	400b      	ands	r3, r1
 80029c4:	fa03 f30e 	lsl.w	r3, r3, lr
      /* Create mask */
      m = (1<<f->width)-1;

      oval = (t >> f->offset) & m; /* Save old value */

      t &= ~(m << f->offset);
 80029c8:	ea20 0202 	bic.w	r2, r0, r2
      t |= (val & m) << f->offset;
      DecodeWriteRegister(p,r,t);
 80029cc:	431a      	orrs	r2, r3
 80029ce:	4629      	mov	r1, r5
 80029d0:	4620      	mov	r0, r4
 80029d2:	f7ff fe47 	bl	8002664 <DecodeWriteRegister>
      printf("%s.",
 80029d6:	6820      	ldr	r0, [r4, #0]
 80029d8:	f7ff fddc 	bl	8002594 <Uncompress>
 80029dc:	4601      	mov	r1, r0
 80029de:	4835      	ldr	r0, [pc, #212]	; (8002ab4 <CmdDecode+0x264>)
 80029e0:	f003 f868 	bl	8005ab4 <printf>
	     Uncompress(p->name));
      printf("%s.",
 80029e4:	6828      	ldr	r0, [r5, #0]
 80029e6:	f7ff fdd5 	bl	8002594 <Uncompress>
 80029ea:	4601      	mov	r1, r0
 80029ec:	4831      	ldr	r0, [pc, #196]	; (8002ab4 <CmdDecode+0x264>)
 80029ee:	f003 f861 	bl	8005ab4 <printf>
	     Uncompress(r->name));
      printf("%s (%d) -> (%d)\n",
 80029f2:	6830      	ldr	r0, [r6, #0]
 80029f4:	f7ff fdce 	bl	8002594 <Uncompress>
 80029f8:	463a      	mov	r2, r7
 80029fa:	4601      	mov	r1, r0
 80029fc:	9b03      	ldr	r3, [sp, #12]
 80029fe:	482e      	ldr	r0, [pc, #184]	; (8002ab8 <CmdDecode+0x268>)
 8002a00:	f003 f858 	bl	8005ab4 <printf>
	     Uncompress(f->name),
	     (unsigned)oval, (unsigned)val);
      return;
 8002a04:	e03b      	b.n	8002a7e <CmdDecode+0x22e>

    }
    
    /* No matching register name, check if this is an integer */
    errno = 0;
 8002a06:	f002 ffd9 	bl	80059bc <__errno>
    val = strtoul(fname,NULL,0);
 8002a0a:	4639      	mov	r1, r7
      return;

    }
    
    /* No matching register name, check if this is an integer */
    errno = 0;
 8002a0c:	6007      	str	r7, [r0, #0]
    val = strtoul(fname,NULL,0);
 8002a0e:	463a      	mov	r2, r7
 8002a10:	9802      	ldr	r0, [sp, #8]
 8002a12:	f003 fa9b 	bl	8005f4c <strtoul>
 8002a16:	9003      	str	r0, [sp, #12]
    if(errno != 0) {
 8002a18:	f002 ffd0 	bl	80059bc <__errno>
 8002a1c:	6803      	ldr	r3, [r0, #0]
 8002a1e:	b123      	cbz	r3, 8002a2a <CmdDecode+0x1da>
      /* Unable to do conversion */
      printf("Invalid number '%s' entered.\n",
 8002a20:	4826      	ldr	r0, [pc, #152]	; (8002abc <CmdDecode+0x26c>)
 8002a22:	9902      	ldr	r1, [sp, #8]
 8002a24:	f003 f846 	bl	8005ab4 <printf>
	     fname);
      return;
 8002a28:	e029      	b.n	8002a7e <CmdDecode+0x22e>
    }
    /* Write to register */
    DecodeWriteRegister(p,r,val);
 8002a2a:	9a03      	ldr	r2, [sp, #12]
 8002a2c:	4629      	mov	r1, r5
 8002a2e:	4620      	mov	r0, r4
 8002a30:	f7ff fe18 	bl	8002664 <DecodeWriteRegister>
    printf("%s.",
 8002a34:	6820      	ldr	r0, [r4, #0]
 8002a36:	f7ff fdad 	bl	8002594 <Uncompress>
 8002a3a:	4601      	mov	r1, r0
 8002a3c:	481d      	ldr	r0, [pc, #116]	; (8002ab4 <CmdDecode+0x264>)
 8002a3e:	f003 f839 	bl	8005ab4 <printf>
	   Uncompress(p->name));
    printf("%s = 0x%08x\n",
 8002a42:	6828      	ldr	r0, [r5, #0]
 8002a44:	f7ff fda6 	bl	8002594 <Uncompress>
 8002a48:	9a03      	ldr	r2, [sp, #12]
 8002a4a:	4601      	mov	r1, r0
 8002a4c:	481c      	ldr	r0, [pc, #112]	; (8002ac0 <CmdDecode+0x270>)
 8002a4e:	f003 f831 	bl	8005ab4 <printf>
	   Uncompress(r->name),
	   (unsigned)val);
    return;
 8002a52:	e014      	b.n	8002a7e <CmdDecode+0x22e>

  }
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
 8002a54:	4629      	mov	r1, r5
 8002a56:	4620      	mov	r0, r4
 8002a58:	f7ff fdd8 	bl	800260c <DecodeReadRegister>
  DecodeRegister(r,p->base, val,1);
 8002a5c:	6861      	ldr	r1, [r4, #4]
	   (unsigned)val);
    return;

  }
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
 8002a5e:	9003      	str	r0, [sp, #12]
 8002a60:	4602      	mov	r2, r0
  DecodeRegister(r,p->base, val,1);
 8002a62:	4628      	mov	r0, r5
 8002a64:	2301      	movs	r3, #1
 8002a66:	f7ff fe4d 	bl	8002704 <DecodeRegister>

  return;
 8002a6a:	e008      	b.n	8002a7e <CmdDecode+0x22e>
      DecodePeripheral(p,1);
      return;
    }

    /* No valid register name found */
    printf("'%s' is not a valid register name, valid names for %s are:\n\n",
 8002a6c:	6820      	ldr	r0, [r4, #0]
 8002a6e:	f7ff fd91 	bl	8002594 <Uncompress>
 8002a72:	4631      	mov	r1, r6
 8002a74:	4602      	mov	r2, r0
 8002a76:	4813      	ldr	r0, [pc, #76]	; (8002ac4 <CmdDecode+0x274>)
 8002a78:	f003 f81c 	bl	8005ab4 <printf>
 8002a7c:	e716      	b.n	80028ac <CmdDecode+0x5c>
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
  DecodeRegister(r,p->base, val,1);

  return;
}
 8002a7e:	b005      	add	sp, #20
 8002a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a82:	bf00      	nop
 8002a84:	0800b27a 	.word	0x0800b27a
 8002a88:	08014e10 	.word	0x08014e10
 8002a8c:	0800b48d 	.word	0x0800b48d
 8002a90:	0800b4e2 	.word	0x0800b4e2
 8002a94:	0800b51d 	.word	0x0800b51d
 8002a98:	0800b5ab 	.word	0x0800b5ab
 8002a9c:	0800b542 	.word	0x0800b542
 8002aa0:	0800b571 	.word	0x0800b571
 8002aa4:	0800b678 	.word	0x0800b678
 8002aa8:	0800b5ea 	.word	0x0800b5ea
 8002aac:	0800b5ee 	.word	0x0800b5ee
 8002ab0:	0800b60d 	.word	0x0800b60d
 8002ab4:	0800b638 	.word	0x0800b638
 8002ab8:	0800b63c 	.word	0x0800b63c
 8002abc:	0800b64d 	.word	0x0800b64d
 8002ac0:	0800b66b 	.word	0x0800b66b
 8002ac4:	0800b5ad 	.word	0x0800b5ad

08002ac8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ac8:	4915      	ldr	r1, [pc, #84]	; (8002b20 <SystemInit+0x58>)
 8002aca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002ace:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002ad6:	4b13      	ldr	r3, [pc, #76]	; (8002b24 <SystemInit+0x5c>)
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	f042 0201 	orr.w	r2, r2, #1
 8002ade:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8002ae0:	6858      	ldr	r0, [r3, #4]
 8002ae2:	4a11      	ldr	r2, [pc, #68]	; (8002b28 <SystemInit+0x60>)
 8002ae4:	4002      	ands	r2, r0
 8002ae6:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002aee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002af2:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002afa:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002b02:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8002b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b06:	f022 020f 	bic.w	r2, r2, #15
 8002b0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8002b0c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b0e:	4a07      	ldr	r2, [pc, #28]	; (8002b2c <SystemInit+0x64>)
 8002b10:	4002      	ands	r2, r0
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002b14:	2200      	movs	r2, #0
 8002b16:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002b1c:	608b      	str	r3, [r1, #8]
 8002b1e:	4770      	bx	lr
 8002b20:	e000ed00 	.word	0xe000ed00
 8002b24:	40021000 	.word	0x40021000
 8002b28:	f87fc00c 	.word	0xf87fc00c
 8002b2c:	ff00fccc 	.word	0xff00fccc

08002b30 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b32:	6803      	ldr	r3, [r0, #0]
 8002b34:	07db      	lsls	r3, r3, #31
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b36:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b38:	d404      	bmi.n	8002b44 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b3a:	6823      	ldr	r3, [r4, #0]
 8002b3c:	079f      	lsls	r7, r3, #30
 8002b3e:	f100 80c6 	bmi.w	8002cce <HAL_RCC_OscConfig+0x19e>
 8002b42:	e157      	b.n	8002df4 <HAL_RCC_OscConfig+0x2c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002b44:	4dc1      	ldr	r5, [pc, #772]	; (8002e4c <HAL_RCC_OscConfig+0x31c>)
 8002b46:	686b      	ldr	r3, [r5, #4]
 8002b48:	f003 030c 	and.w	r3, r3, #12
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d007      	beq.n	8002b60 <HAL_RCC_OscConfig+0x30>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b50:	686b      	ldr	r3, [r5, #4]
 8002b52:	f003 030c 	and.w	r3, r3, #12
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d127      	bne.n	8002baa <HAL_RCC_OscConfig+0x7a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b5a:	686b      	ldr	r3, [r5, #4]
 8002b5c:	03de      	lsls	r6, r3, #15
 8002b5e:	d524      	bpl.n	8002baa <HAL_RCC_OscConfig+0x7a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b64:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002b68:	fab3 f383 	clz	r3, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
 8002b6c:	f043 0320 	orr.w	r3, r3, #32
 8002b70:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_RCC_OscConfig+0x4c>
 8002b78:	6829      	ldr	r1, [r5, #0]
 8002b7a:	e004      	b.n	8002b86 <HAL_RCC_OscConfig+0x56>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7c:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002b80:	fab2 f282 	clz	r2, r2
 8002b84:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b8a:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	fab3 f383 	clz	r3, r3
 8002b92:	2201      	movs	r2, #1
 8002b94:	f003 031f 	and.w	r3, r3, #31
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	420b      	tst	r3, r1
 8002b9e:	d0cc      	beq.n	8002b3a <HAL_RCC_OscConfig+0xa>
 8002ba0:	6863      	ldr	r3, [r4, #4]
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d0c9      	beq.n	8002b3a <HAL_RCC_OscConfig+0xa>
      {
        return HAL_ERROR;
 8002ba6:	2001      	movs	r0, #1
 8002ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8002baa:	4ea9      	ldr	r6, [pc, #676]	; (8002e50 <HAL_RCC_OscConfig+0x320>)
 8002bac:	2300      	movs	r3, #0
 8002bae:	7033      	strb	r3, [r6, #0]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002bb0:	f000 fca6 	bl	8003500 <HAL_GetTick>
 8002bb4:	4607      	mov	r7, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bba:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002bbe:	fab3 f383 	clz	r3, r3
      
      /* Wait till HSE is bypassed or disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc2:	f043 0320 	orr.w	r3, r3, #32
 8002bc6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_RCC_OscConfig+0xa2>
 8002bce:	6829      	ldr	r1, [r5, #0]
 8002bd0:	e004      	b.n	8002bdc <HAL_RCC_OscConfig+0xac>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002bd6:	fab2 f282 	clz	r2, r2
 8002bda:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002be0:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002be4:	fab3 f383 	clz	r3, r3
 8002be8:	2201      	movs	r2, #1
 8002bea:	f003 031f 	and.w	r3, r3, #31
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	420b      	tst	r3, r1
 8002bf4:	d008      	beq.n	8002c08 <HAL_RCC_OscConfig+0xd8>
      {
        if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8002bf6:	f000 fc83 	bl	8003500 <HAL_GetTick>
 8002bfa:	f241 3388 	movw	r3, #5000	; 0x1388
 8002bfe:	1bc0      	subs	r0, r0, r7
 8002c00:	4298      	cmp	r0, r3
 8002c02:	d9d8      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x86>
        {
          return HAL_TIMEOUT;
 8002c04:	2003      	movs	r0, #3
 8002c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
      }

      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c08:	7923      	ldrb	r3, [r4, #4]
 8002c0a:	7033      	strb	r3, [r6, #0]

      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c0c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002c0e:	f023 020f 	bic.w	r2, r3, #15
 8002c12:	68a3      	ldr	r3, [r4, #8]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	62eb      	str	r3, [r5, #44]	; 0x2c

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState == RCC_HSE_ON)
 8002c18:	6863      	ldr	r3, [r4, #4]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d12b      	bne.n	8002c76 <HAL_RCC_OscConfig+0x146>
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c1e:	f000 fc6f 	bl	8003500 <HAL_GetTick>
 8002c22:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c28:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002c2c:	fab3 f383 	clz	r3, r3

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c30:	f043 0320 	orr.w	r3, r3, #32
 8002c34:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d101      	bne.n	8002c40 <HAL_RCC_OscConfig+0x110>
 8002c3c:	6829      	ldr	r1, [r5, #0]
 8002c3e:	e004      	b.n	8002c4a <HAL_RCC_OscConfig+0x11a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c40:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	fab2 f282 	clz	r2, r2
 8002c48:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c4e:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	2201      	movs	r2, #1
 8002c58:	f003 031f 	and.w	r3, r3, #31
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	420b      	tst	r3, r1
 8002c62:	f47f af6a 	bne.w	8002b3a <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8002c66:	f000 fc4b 	bl	8003500 <HAL_GetTick>
 8002c6a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c6e:	1b80      	subs	r0, r0, r6
 8002c70:	4298      	cmp	r0, r3
 8002c72:	d9d7      	bls.n	8002c24 <HAL_RCC_OscConfig+0xf4>
 8002c74:	e7c6      	b.n	8002c04 <HAL_RCC_OscConfig+0xd4>
        }
      }
      else
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c76:	f000 fc43 	bl	8003500 <HAL_GetTick>
 8002c7a:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c80:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002c84:	fab3 f383 	clz	r3, r3

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c88:	f043 0320 	orr.w	r3, r3, #32
 8002c8c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <HAL_RCC_OscConfig+0x168>
 8002c94:	6829      	ldr	r1, [r5, #0]
 8002c96:	e004      	b.n	8002ca2 <HAL_RCC_OscConfig+0x172>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c98:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	fab2 f282 	clz	r2, r2
 8002ca0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	fab3 f383 	clz	r3, r3
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f003 031f 	and.w	r3, r3, #31
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	420b      	tst	r3, r1
 8002cba:	f43f af3e 	beq.w	8002b3a <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8002cbe:	f000 fc1f 	bl	8003500 <HAL_GetTick>
 8002cc2:	f241 3388 	movw	r3, #5000	; 0x1388
 8002cc6:	1b80      	subs	r0, r0, r6
 8002cc8:	4298      	cmp	r0, r3
 8002cca:	d9d7      	bls.n	8002c7c <HAL_RCC_OscConfig+0x14c>
 8002ccc:	e79a      	b.n	8002c04 <HAL_RCC_OscConfig+0xd4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */    
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002cce:	4d5f      	ldr	r5, [pc, #380]	; (8002e4c <HAL_RCC_OscConfig+0x31c>)
 8002cd0:	686b      	ldr	r3, [r5, #4]
 8002cd2:	f013 0f0c 	tst.w	r3, #12
 8002cd6:	d007      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x1b8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002cd8:	686b      	ldr	r3, [r5, #4]
 8002cda:	f003 030c 	and.w	r3, r3, #12
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */    
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d125      	bne.n	8002d2e <HAL_RCC_OscConfig+0x1fe>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ce2:	686b      	ldr	r3, [r5, #4]
 8002ce4:	03d8      	lsls	r0, r3, #15
 8002ce6:	d422      	bmi.n	8002d2e <HAL_RCC_OscConfig+0x1fe>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce8:	2202      	movs	r2, #2
 8002cea:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002cee:	fab3 f383 	clz	r3, r3
    {
      /* When the HSI is used as system clock it is not allowed to be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf2:	f043 0320 	orr.w	r3, r3, #32
 8002cf6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCC_OscConfig+0x1d2>
 8002cfe:	6829      	ldr	r1, [r5, #0]
 8002d00:	e004      	b.n	8002d0c <HAL_RCC_OscConfig+0x1dc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d02:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002d06:	fab2 f282 	clz	r2, r2
 8002d0a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	fab3 f383 	clz	r3, r3
 8002d16:	2201      	movs	r2, #1
 8002d18:	f003 031f 	and.w	r3, r3, #31
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	420b      	tst	r3, r1
 8002d22:	d030      	beq.n	8002d86 <HAL_RCC_OscConfig+0x256>
 8002d24:	6923      	ldr	r3, [r4, #16]
 8002d26:	4293      	cmp	r3, r2
 8002d28:	f47f af3d 	bne.w	8002ba6 <HAL_RCC_OscConfig+0x76>
 8002d2c:	e02b      	b.n	8002d86 <HAL_RCC_OscConfig+0x256>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d2e:	6922      	ldr	r2, [r4, #16]
 8002d30:	4b48      	ldr	r3, [pc, #288]	; (8002e54 <HAL_RCC_OscConfig+0x324>)
 8002d32:	b3ba      	cbz	r2, 8002da4 <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d34:	2201      	movs	r2, #1
 8002d36:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d38:	f000 fbe2 	bl	8003500 <HAL_GetTick>
 8002d3c:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3e:	2202      	movs	r2, #2
 8002d40:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002d44:	fab3 f383 	clz	r3, r3

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d48:	f043 0320 	orr.w	r3, r3, #32
 8002d4c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d101      	bne.n	8002d58 <HAL_RCC_OscConfig+0x228>
 8002d54:	6829      	ldr	r1, [r5, #0]
 8002d56:	e004      	b.n	8002d62 <HAL_RCC_OscConfig+0x232>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	fab2 f282 	clz	r2, r2
 8002d60:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d62:	2302      	movs	r3, #2
 8002d64:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002d68:	fab3 f383 	clz	r3, r3
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f003 031f 	and.w	r3, r3, #31
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	420b      	tst	r3, r1
 8002d78:	d105      	bne.n	8002d86 <HAL_RCC_OscConfig+0x256>
        {
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 8002d7a:	f000 fbc1 	bl	8003500 <HAL_GetTick>
 8002d7e:	1b80      	subs	r0, r0, r6
 8002d80:	2864      	cmp	r0, #100	; 0x64
 8002d82:	d9dc      	bls.n	8002d3e <HAL_RCC_OscConfig+0x20e>
 8002d84:	e73e      	b.n	8002c04 <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
          }      
        } 

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d86:	682a      	ldr	r2, [r5, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d88:	23f8      	movs	r3, #248	; 0xf8
 8002d8a:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002d8e:	fab3 f383 	clz	r3, r3
 8002d92:	6961      	ldr	r1, [r4, #20]
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	4099      	lsls	r1, r3
 8002d98:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002d9c:	ea41 0302 	orr.w	r3, r1, r2
 8002da0:	602b      	str	r3, [r5, #0]
 8002da2:	e027      	b.n	8002df4 <HAL_RCC_OscConfig+0x2c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002da4:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002da6:	f000 fbab 	bl	8003500 <HAL_GetTick>
 8002daa:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dac:	2202      	movs	r2, #2
 8002dae:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	fab3 f383 	clz	r3, r3
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db6:	f043 0320 	orr.w	r3, r3, #32
 8002dba:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d101      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x296>
 8002dc2:	6829      	ldr	r1, [r5, #0]
 8002dc4:	e004      	b.n	8002dd0 <HAL_RCC_OscConfig+0x2a0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc6:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	fab2 f282 	clz	r2, r2
 8002dce:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	fab3 f383 	clz	r3, r3
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f003 031f 	and.w	r3, r3, #31
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	420b      	tst	r3, r1
 8002de6:	d005      	beq.n	8002df4 <HAL_RCC_OscConfig+0x2c4>
        {
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 8002de8:	f000 fb8a 	bl	8003500 <HAL_GetTick>
 8002dec:	1b80      	subs	r0, r0, r6
 8002dee:	2864      	cmp	r0, #100	; 0x64
 8002df0:	d9dc      	bls.n	8002dac <HAL_RCC_OscConfig+0x27c>
 8002df2:	e707      	b.n	8002c04 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002df4:	6823      	ldr	r3, [r4, #0]
 8002df6:	0719      	lsls	r1, r3, #28
 8002df8:	d404      	bmi.n	8002e04 <HAL_RCC_OscConfig+0x2d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dfa:	6823      	ldr	r3, [r4, #0]
 8002dfc:	075a      	lsls	r2, r3, #29
 8002dfe:	f140 80a7 	bpl.w	8002f50 <HAL_RCC_OscConfig+0x420>
 8002e02:	e04a      	b.n	8002e9a <HAL_RCC_OscConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e04:	69a2      	ldr	r2, [r4, #24]
 8002e06:	4d11      	ldr	r5, [pc, #68]	; (8002e4c <HAL_RCC_OscConfig+0x31c>)
 8002e08:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <HAL_RCC_OscConfig+0x328>)
 8002e0a:	b33a      	cbz	r2, 8002e5c <HAL_RCC_OscConfig+0x32c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002e10:	f000 fb76 	bl	8003500 <HAL_GetTick>
 8002e14:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e16:	2302      	movs	r3, #2
 8002e18:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002e1c:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e20:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002e24:	fab2 f282 	clz	r2, r2
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e28:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2a:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002e2e:	fab3 f383 	clz	r3, r3
 8002e32:	2201      	movs	r2, #1
 8002e34:	f003 031f 	and.w	r3, r3, #31
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	420b      	tst	r3, r1
 8002e3e:	d1dc      	bne.n	8002dfa <HAL_RCC_OscConfig+0x2ca>
      {
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 8002e40:	f000 fb5e 	bl	8003500 <HAL_GetTick>
 8002e44:	1b80      	subs	r0, r0, r6
 8002e46:	2864      	cmp	r0, #100	; 0x64
 8002e48:	d9e5      	bls.n	8002e16 <HAL_RCC_OscConfig+0x2e6>
 8002e4a:	e6db      	b.n	8002c04 <HAL_RCC_OscConfig+0xd4>
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	40021002 	.word	0x40021002
 8002e54:	42420000 	.word	0x42420000
 8002e58:	42420480 	.word	0x42420480
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e5c:	601a      	str	r2, [r3, #0]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002e5e:	f000 fb4f 	bl	8003500 <HAL_GetTick>
 8002e62:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	2302      	movs	r3, #2
 8002e66:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	fab2 f282 	clz	r2, r2
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e76:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e78:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002e7c:	fab3 f383 	clz	r3, r3
 8002e80:	2201      	movs	r2, #1
 8002e82:	f003 031f 	and.w	r3, r3, #31
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	420b      	tst	r3, r1
 8002e8c:	d0b5      	beq.n	8002dfa <HAL_RCC_OscConfig+0x2ca>
      {
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 8002e8e:	f000 fb37 	bl	8003500 <HAL_GetTick>
 8002e92:	1b80      	subs	r0, r0, r6
 8002e94:	2864      	cmp	r0, #100	; 0x64
 8002e96:	d9e5      	bls.n	8002e64 <HAL_RCC_OscConfig+0x334>
 8002e98:	e6b4      	b.n	8002c04 <HAL_RCC_OscConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock */
    __PWR_CLK_ENABLE();
 8002e9a:	4d97      	ldr	r5, [pc, #604]	; (80030f8 <HAL_RCC_OscConfig+0x5c8>)

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e9c:	4a97      	ldr	r2, [pc, #604]	; (80030fc <HAL_RCC_OscConfig+0x5cc>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock */
    __PWR_CLK_ENABLE();
 8002e9e:	69eb      	ldr	r3, [r5, #28]
 8002ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	61eb      	str	r3, [r5, #28]

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ea6:	6813      	ldr	r3, [r2, #0]
 8002ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002eae:	f000 fb27 	bl	8003500 <HAL_GetTick>
 8002eb2:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002eb4:	4b91      	ldr	r3, [pc, #580]	; (80030fc <HAL_RCC_OscConfig+0x5cc>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	05db      	lsls	r3, r3, #23
 8002eba:	d54d      	bpl.n	8002f58 <HAL_RCC_OscConfig+0x428>
        return HAL_TIMEOUT;
      }      
    }

    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8002ebc:	6a2b      	ldr	r3, [r5, #32]
 8002ebe:	f023 0305 	bic.w	r3, r3, #5
 8002ec2:	622b      	str	r3, [r5, #32]
    
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002ec4:	f000 fb1c 	bl	8003500 <HAL_GetTick>
 8002ec8:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	2302      	movs	r3, #2
 8002ecc:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002ed0:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002ed8:	fab2 f282 	clz	r2, r2
      
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002edc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ee0:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	bf0c      	ite	eq
 8002ee8:	6a29      	ldreq	r1, [r5, #32]
 8002eea:	6a69      	ldrne	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	fab3 f383 	clz	r3, r3
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f003 031f 	and.w	r3, r3, #31
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	420b      	tst	r3, r1
 8002f00:	d130      	bne.n	8002f64 <HAL_RCC_OscConfig+0x434>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f02:	6a2b      	ldr	r3, [r5, #32]
 8002f04:	68e2      	ldr	r2, [r4, #12]
 8002f06:	f023 0305 	bic.w	r3, r3, #5
 8002f0a:	4313      	orrs	r3, r2
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002f0c:	2a01      	cmp	r2, #1
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f0e:	622b      	str	r3, [r5, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002f10:	d138      	bne.n	8002f84 <HAL_RCC_OscConfig+0x454>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002f12:	f000 faf5 	bl	8003500 <HAL_GetTick>
 8002f16:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f18:	2302      	movs	r3, #2
 8002f1a:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002f1e:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f22:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002f26:	fab2 f282 	clz	r2, r2
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f2e:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8002f32:	429a      	cmp	r2, r3
 8002f34:	bf0c      	ite	eq
 8002f36:	6a29      	ldreq	r1, [r5, #32]
 8002f38:	6a69      	ldrne	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3a:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	fab3 f383 	clz	r3, r3
 8002f42:	2201      	movs	r2, #1
 8002f44:	f003 031f 	and.w	r3, r3, #31
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	420b      	tst	r3, r1
 8002f4e:	d011      	beq.n	8002f74 <HAL_RCC_OscConfig+0x444>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f50:	69e2      	ldr	r2, [r4, #28]
 8002f52:	2a00      	cmp	r2, #0
 8002f54:	d13d      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x4a2>
 8002f56:	e08b      	b.n	8003070 <HAL_RCC_OscConfig+0x540>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick()-tickstart) > DBP_TIMEOUT_VALUE)
 8002f58:	f000 fad2 	bl	8003500 <HAL_GetTick>
 8002f5c:	1b80      	subs	r0, r0, r6
 8002f5e:	2864      	cmp	r0, #100	; 0x64
 8002f60:	d9a8      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x384>
 8002f62:	e64f      	b.n	8002c04 <HAL_RCC_OscConfig+0xd4>
    tickstart = HAL_GetTick();
      
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 8002f64:	f000 facc 	bl	8003500 <HAL_GetTick>
 8002f68:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f6c:	1b80      	subs	r0, r0, r6
 8002f6e:	4298      	cmp	r0, r3
 8002f70:	d9ab      	bls.n	8002eca <HAL_RCC_OscConfig+0x39a>
 8002f72:	e647      	b.n	8002c04 <HAL_RCC_OscConfig+0xd4>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 8002f74:	f000 fac4 	bl	8003500 <HAL_GetTick>
 8002f78:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f7c:	1b80      	subs	r0, r0, r6
 8002f7e:	4298      	cmp	r0, r3
 8002f80:	d9ca      	bls.n	8002f18 <HAL_RCC_OscConfig+0x3e8>
 8002f82:	e63f      	b.n	8002c04 <HAL_RCC_OscConfig+0xd4>
      }
    }
    else
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002f84:	f000 fabc 	bl	8003500 <HAL_GetTick>
 8002f88:	4606      	mov	r6, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	fab2 f282 	clz	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f94:	fa93 f2a3 	rbit	r2, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002f98:	fab2 f282 	clz	r2, r2
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fa0:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	bf0c      	ite	eq
 8002fa8:	6a29      	ldreq	r1, [r5, #32]
 8002faa:	6a69      	ldrne	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fac:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002fb0:	fab3 f383 	clz	r3, r3
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f003 031f 	and.w	r3, r3, #31
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	420b      	tst	r3, r1
 8002fc0:	d0c6      	beq.n	8002f50 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 8002fc2:	f000 fa9d 	bl	8003500 <HAL_GetTick>
 8002fc6:	f241 3388 	movw	r3, #5000	; 0x1388
 8002fca:	1b80      	subs	r0, r0, r6
 8002fcc:	4298      	cmp	r0, r3
 8002fce:	d9dc      	bls.n	8002f8a <HAL_RCC_OscConfig+0x45a>
 8002fd0:	e618      	b.n	8002c04 <HAL_RCC_OscConfig+0xd4>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fd2:	4d49      	ldr	r5, [pc, #292]	; (80030f8 <HAL_RCC_OscConfig+0x5c8>)
 8002fd4:	686b      	ldr	r3, [r5, #4]
 8002fd6:	f003 030c 	and.w	r3, r3, #12
 8002fda:	2b08      	cmp	r3, #8
 8002fdc:	f43f ade3 	beq.w	8002ba6 <HAL_RCC_OscConfig+0x76>
 8002fe0:	4e47      	ldr	r6, [pc, #284]	; (8003100 <HAL_RCC_OscConfig+0x5d0>)
 8002fe2:	2300      	movs	r3, #0
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fe4:	2a02      	cmp	r2, #2
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe6:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fe8:	d15c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x574>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fea:	f000 fa89 	bl	8003500 <HAL_GetTick>
 8002fee:	4607      	mov	r7, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ff4:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002ff8:	fab3 f383 	clz	r3, r3
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffc:	f043 0320 	orr.w	r3, r3, #32
 8003000:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8003004:	2b01      	cmp	r3, #1
 8003006:	d135      	bne.n	8003074 <HAL_RCC_OscConfig+0x544>
 8003008:	682a      	ldr	r2, [r5, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800300e:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8003012:	fab3 f383 	clz	r3, r3
 8003016:	2101      	movs	r1, #1
 8003018:	f003 031f 	and.w	r3, r3, #31
 800301c:	fa01 f303 	lsl.w	r3, r1, r3
 8003020:	4213      	tst	r3, r2
 8003022:	d12d      	bne.n	8003080 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003024:	6a20      	ldr	r0, [r4, #32]
 8003026:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003028:	686b      	ldr	r3, [r5, #4]
 800302a:	4302      	orrs	r2, r0
 800302c:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8003030:	4313      	orrs	r3, r2
 8003032:	606b      	str	r3, [r5, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003034:	6031      	str	r1, [r6, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003036:	f000 fa63 	bl	8003500 <HAL_GetTick>
 800303a:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003040:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8003044:	fab3 f383 	clz	r3, r3
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003048:	f043 0320 	orr.w	r3, r3, #32
 800304c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8003050:	2b01      	cmp	r3, #1
 8003052:	d11b      	bne.n	800308c <HAL_RCC_OscConfig+0x55c>
 8003054:	6829      	ldr	r1, [r5, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003056:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800305a:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800305e:	fab3 f383 	clz	r3, r3
 8003062:	2201      	movs	r2, #1
 8003064:	f003 031f 	and.w	r3, r3, #31
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	420b      	tst	r3, r1
 800306e:	d013      	beq.n	8003098 <HAL_RCC_OscConfig+0x568>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8003070:	2000      	movs	r0, #0
 8003072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8003078:	fab2 f282 	clz	r2, r2

        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800307e:	e7c4      	b.n	800300a <HAL_RCC_OscConfig+0x4da>
        {
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 8003080:	f000 fa3e 	bl	8003500 <HAL_GetTick>
 8003084:	1bc0      	subs	r0, r0, r7
 8003086:	2864      	cmp	r0, #100	; 0x64
 8003088:	d9b2      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x4c0>
 800308a:	e5bb      	b.n	8002c04 <HAL_RCC_OscConfig+0xd4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308c:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8003090:	fab2 f282 	clz	r2, r2

        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003094:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003096:	e7de      	b.n	8003056 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 8003098:	f000 fa32 	bl	8003500 <HAL_GetTick>
 800309c:	1b00      	subs	r0, r0, r4
 800309e:	2864      	cmp	r0, #100	; 0x64
 80030a0:	d9cc      	bls.n	800303c <HAL_RCC_OscConfig+0x50c>
 80030a2:	e5af      	b.n	8002c04 <HAL_RCC_OscConfig+0xd4>
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        /* Get timeout */
        tickstart = HAL_GetTick();
 80030a4:	f000 fa2c 	bl	8003500 <HAL_GetTick>
 80030a8:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030ae:	fa92 f3a2 	rbit	r3, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80030b2:	fab3 f383 	clz	r3, r3
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b6:	f043 0320 	orr.w	r3, r3, #32
 80030ba:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_RCC_OscConfig+0x596>
 80030c2:	6829      	ldr	r1, [r5, #0]
 80030c4:	e004      	b.n	80030d0 <HAL_RCC_OscConfig+0x5a0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80030ca:	fab2 f282 	clz	r2, r2
 80030ce:	6a69      	ldr	r1, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030d4:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80030d8:	fab3 f383 	clz	r3, r3
 80030dc:	2201      	movs	r2, #1
 80030de:	f003 031f 	and.w	r3, r3, #31
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	420b      	tst	r3, r1
 80030e8:	d0c2      	beq.n	8003070 <HAL_RCC_OscConfig+0x540>
        {
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 80030ea:	f000 fa09 	bl	8003500 <HAL_GetTick>
 80030ee:	1b00      	subs	r0, r0, r4
 80030f0:	2864      	cmp	r0, #100	; 0x64
 80030f2:	d9da      	bls.n	80030aa <HAL_RCC_OscConfig+0x57a>
 80030f4:	e586      	b.n	8002c04 <HAL_RCC_OscConfig+0xd4>
 80030f6:	bf00      	nop
 80030f8:	40021000 	.word	0x40021000
 80030fc:	40007000 	.word	0x40007000
 8003100:	42420060 	.word	0x42420060

08003104 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003104:	4ab0      	ldr	r2, [pc, #704]	; (80033c8 <HAL_RCC_ClockConfig+0x2c4>)
  *         If a clock source which is not yet ready is selected, the switch will
  *         occur when the clock source will be ready.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003108:	6813      	ldr	r3, [r2, #0]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	4299      	cmp	r1, r3
  *         If a clock source which is not yet ready is selected, the switch will
  *         occur when the clock source will be ready.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003110:	4604      	mov	r4, r0
 8003112:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003114:	f240 80a9 	bls.w	800326a <HAL_RCC_ClockConfig+0x166>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003118:	6813      	ldr	r3, [r2, #0]
 800311a:	f023 0307 	bic.w	r3, r3, #7
 800311e:	430b      	orrs	r3, r1
 8003120:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003122:	6813      	ldr	r3, [r2, #0]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	428b      	cmp	r3, r1
 800312a:	d001      	beq.n	8003130 <HAL_RCC_ClockConfig+0x2c>
    {
      return HAL_ERROR;
 800312c:	2001      	movs	r0, #1
 800312e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    /*-------------------------- HCLK Configuration ----------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003130:	6801      	ldr	r1, [r0, #0]
 8003132:	078f      	lsls	r7, r1, #30
    {
      assert_param(IS_RCC_SYSCLK_DIV(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003134:	bf41      	itttt	mi
 8003136:	48a5      	ldrmi	r0, [pc, #660]	; (80033cc <HAL_RCC_ClockConfig+0x2c8>)
 8003138:	6843      	ldrmi	r3, [r0, #4]
 800313a:	f023 02f0 	bicmi.w	r2, r3, #240	; 0xf0
 800313e:	68a3      	ldrmi	r3, [r4, #8]
 8003140:	bf44      	itt	mi
 8003142:	4313      	orrmi	r3, r2
 8003144:	6043      	strmi	r3, [r0, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003146:	07ce      	lsls	r6, r1, #31
 8003148:	d40b      	bmi.n	8003162 <HAL_RCC_ClockConfig+0x5e>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800314a:	6821      	ldr	r1, [r4, #0]
 800314c:	074d      	lsls	r5, r1, #29
 800314e:	f140 812b 	bpl.w	80033a8 <HAL_RCC_ClockConfig+0x2a4>
  {
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003152:	489e      	ldr	r0, [pc, #632]	; (80033cc <HAL_RCC_ClockConfig+0x2c8>)
 8003154:	6843      	ldr	r3, [r0, #4]
 8003156:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800315a:	68e3      	ldr	r3, [r4, #12]
 800315c:	4313      	orrs	r3, r2
 800315e:	6043      	str	r3, [r0, #4]
 8003160:	e122      	b.n	80033a8 <HAL_RCC_ClockConfig+0x2a4>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003162:	6862      	ldr	r2, [r4, #4]
 8003164:	4d99      	ldr	r5, [pc, #612]	; (80033cc <HAL_RCC_ClockConfig+0x2c8>)
 8003166:	2a01      	cmp	r2, #1
 8003168:	d115      	bne.n	8003196 <HAL_RCC_ClockConfig+0x92>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800316e:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8003172:	fab3 f383 	clz	r3, r3
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003176:	f043 0320 	orr.w	r3, r3, #32
 800317a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_RCC_ClockConfig+0x82>
 8003182:	6828      	ldr	r0, [r5, #0]
 8003184:	e004      	b.n	8003190 <HAL_RCC_ClockConfig+0x8c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003186:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800318a:	fab1 f181 	clz	r1, r1
 800318e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003190:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003194:	e02a      	b.n	80031ec <HAL_RCC_ClockConfig+0xe8>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003196:	2a02      	cmp	r2, #2
 8003198:	d115      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xc2>
 800319a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800319e:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80031a2:	fab3 f383 	clz	r3, r3
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a6:	f043 0320 	orr.w	r3, r3, #32
 80031aa:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xb2>
 80031b2:	6828      	ldr	r0, [r5, #0]
 80031b4:	e004      	b.n	80031c0 <HAL_RCC_ClockConfig+0xbc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b6:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80031ba:	fab1 f181 	clz	r1, r1
 80031be:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031c4:	e012      	b.n	80031ec <HAL_RCC_ClockConfig+0xe8>
 80031c6:	2102      	movs	r1, #2
 80031c8:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	fab3 f383 	clz	r3, r3
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d0:	f043 0320 	orr.w	r3, r3, #32
 80031d4:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_RCC_ClockConfig+0xdc>
 80031dc:	6828      	ldr	r0, [r5, #0]
 80031de:	e004      	b.n	80031ea <HAL_RCC_ClockConfig+0xe6>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e0:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	fab1 f181 	clz	r1, r1
 80031e8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ea:	2302      	movs	r3, #2
 80031ec:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80031f0:	fab3 f383 	clz	r3, r3
 80031f4:	2101      	movs	r1, #1
 80031f6:	f003 031f 	and.w	r3, r3, #31
 80031fa:	fa01 f303 	lsl.w	r3, r1, r3
 80031fe:	4203      	tst	r3, r0
 8003200:	d094      	beq.n	800312c <HAL_RCC_ClockConfig+0x28>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003202:	686b      	ldr	r3, [r5, #4]
 8003204:	f023 0303 	bic.w	r3, r3, #3
 8003208:	431a      	orrs	r2, r3
 800320a:	606a      	str	r2, [r5, #4]

      /* Get timeout */
      tickstart = HAL_GetTick();
 800320c:	f000 f978 	bl	8003500 <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003210:	6863      	ldr	r3, [r4, #4]
 8003212:	2b01      	cmp	r3, #1
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

      /* Get timeout */
      tickstart = HAL_GetTick();
 8003214:	4606      	mov	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003216:	d10d      	bne.n	8003234 <HAL_RCC_ClockConfig+0x130>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003218:	686b      	ldr	r3, [r5, #4]
 800321a:	f003 030c 	and.w	r3, r3, #12
 800321e:	2b04      	cmp	r3, #4
 8003220:	d093      	beq.n	800314a <HAL_RCC_ClockConfig+0x46>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003222:	f000 f96d 	bl	8003500 <HAL_GetTick>
 8003226:	f241 3388 	movw	r3, #5000	; 0x1388
 800322a:	1b80      	subs	r0, r0, r6
 800322c:	4298      	cmp	r0, r3
 800322e:	d9f3      	bls.n	8003218 <HAL_RCC_ClockConfig+0x114>
          {
            return HAL_TIMEOUT;
 8003230:	2003      	movs	r0, #3
 8003232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003234:	2b02      	cmp	r3, #2
 8003236:	d113      	bne.n	8003260 <HAL_RCC_ClockConfig+0x15c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003238:	686b      	ldr	r3, [r5, #4]
 800323a:	f003 030c 	and.w	r3, r3, #12
 800323e:	2b08      	cmp	r3, #8
 8003240:	d083      	beq.n	800314a <HAL_RCC_ClockConfig+0x46>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003242:	f000 f95d 	bl	8003500 <HAL_GetTick>
 8003246:	f241 3388 	movw	r3, #5000	; 0x1388
 800324a:	1b80      	subs	r0, r0, r6
 800324c:	4298      	cmp	r0, r3
 800324e:	d9f3      	bls.n	8003238 <HAL_RCC_ClockConfig+0x134>
 8003250:	e7ee      	b.n	8003230 <HAL_RCC_ClockConfig+0x12c>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003252:	f000 f955 	bl	8003500 <HAL_GetTick>
 8003256:	f241 3388 	movw	r3, #5000	; 0x1388
 800325a:	1b80      	subs	r0, r0, r6
 800325c:	4298      	cmp	r0, r3
 800325e:	d8e7      	bhi.n	8003230 <HAL_RCC_ClockConfig+0x12c>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003260:	686b      	ldr	r3, [r5, #4]
 8003262:	f013 0f0c 	tst.w	r3, #12
 8003266:	d1f4      	bne.n	8003252 <HAL_RCC_ClockConfig+0x14e>
 8003268:	e76f      	b.n	800314a <HAL_RCC_ClockConfig+0x46>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration ----------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800326a:	6801      	ldr	r1, [r0, #0]
 800326c:	0788      	lsls	r0, r1, #30
    {
      assert_param(IS_RCC_SYSCLK_DIV(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800326e:	bf41      	itttt	mi
 8003270:	4856      	ldrmi	r0, [pc, #344]	; (80033cc <HAL_RCC_ClockConfig+0x2c8>)
 8003272:	6843      	ldrmi	r3, [r0, #4]
 8003274:	f023 02f0 	bicmi.w	r2, r3, #240	; 0xf0
 8003278:	68a3      	ldrmi	r3, [r4, #8]
 800327a:	bf44      	itt	mi
 800327c:	4313      	orrmi	r3, r2
 800327e:	6043      	strmi	r3, [r0, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003280:	07ca      	lsls	r2, r1, #31
 8003282:	d40c      	bmi.n	800329e <HAL_RCC_ClockConfig+0x19a>
        }
      }
    }

    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003284:	4a50      	ldr	r2, [pc, #320]	; (80033c8 <HAL_RCC_ClockConfig+0x2c4>)
 8003286:	6813      	ldr	r3, [r2, #0]
 8003288:	f023 0307 	bic.w	r3, r3, #7
 800328c:	4333      	orrs	r3, r6
 800328e:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003290:	6813      	ldr	r3, [r2, #0]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	42b3      	cmp	r3, r6
 8003298:	f47f af48 	bne.w	800312c <HAL_RCC_ClockConfig+0x28>
 800329c:	e755      	b.n	800314a <HAL_RCC_ClockConfig+0x46>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800329e:	6862      	ldr	r2, [r4, #4]
 80032a0:	4d4a      	ldr	r5, [pc, #296]	; (80033cc <HAL_RCC_ClockConfig+0x2c8>)
 80032a2:	2a01      	cmp	r2, #1
 80032a4:	d115      	bne.n	80032d2 <HAL_RCC_ClockConfig+0x1ce>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80032aa:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80032ae:	fab3 f383 	clz	r3, r3
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b2:	f043 0320 	orr.w	r3, r3, #32
 80032b6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_RCC_ClockConfig+0x1be>
 80032be:	6828      	ldr	r0, [r5, #0]
 80032c0:	e004      	b.n	80032cc <HAL_RCC_ClockConfig+0x1c8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c2:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80032c6:	fab1 f181 	clz	r1, r1
 80032ca:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032d0:	e02a      	b.n	8003328 <HAL_RCC_ClockConfig+0x224>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032d2:	2a02      	cmp	r2, #2
 80032d4:	d115      	bne.n	8003302 <HAL_RCC_ClockConfig+0x1fe>
 80032d6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032da:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80032de:	fab3 f383 	clz	r3, r3
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e2:	f043 0320 	orr.w	r3, r3, #32
 80032e6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d101      	bne.n	80032f2 <HAL_RCC_ClockConfig+0x1ee>
 80032ee:	6828      	ldr	r0, [r5, #0]
 80032f0:	e004      	b.n	80032fc <HAL_RCC_ClockConfig+0x1f8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f2:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80032f6:	fab1 f181 	clz	r1, r1
 80032fa:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003300:	e012      	b.n	8003328 <HAL_RCC_ClockConfig+0x224>
 8003302:	2102      	movs	r1, #2
 8003304:	fa91 f3a1 	rbit	r3, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8003308:	fab3 f383 	clz	r3, r3
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800330c:	f043 0320 	orr.w	r3, r3, #32
 8003310:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_RCC_ClockConfig+0x218>
 8003318:	6828      	ldr	r0, [r5, #0]
 800331a:	e004      	b.n	8003326 <HAL_RCC_ClockConfig+0x222>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331c:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8003320:	fab1 f181 	clz	r1, r1
 8003324:	6a68      	ldr	r0, [r5, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	2302      	movs	r3, #2
 8003328:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800332c:	fab3 f383 	clz	r3, r3
 8003330:	2101      	movs	r1, #1
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	fa01 f303 	lsl.w	r3, r1, r3
 800333a:	4203      	tst	r3, r0
 800333c:	f43f aef6 	beq.w	800312c <HAL_RCC_ClockConfig+0x28>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003340:	686b      	ldr	r3, [r5, #4]
 8003342:	f023 0303 	bic.w	r3, r3, #3
 8003346:	431a      	orrs	r2, r3
 8003348:	606a      	str	r2, [r5, #4]

      /* Get timeout */
      tickstart = HAL_GetTick();
 800334a:	f000 f8d9 	bl	8003500 <HAL_GetTick>

      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800334e:	6863      	ldr	r3, [r4, #4]
 8003350:	2b01      	cmp	r3, #1
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

      /* Get timeout */
      tickstart = HAL_GetTick();
 8003352:	4607      	mov	r7, r0

      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003354:	d10c      	bne.n	8003370 <HAL_RCC_ClockConfig+0x26c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003356:	686b      	ldr	r3, [r5, #4]
 8003358:	f003 030c 	and.w	r3, r3, #12
 800335c:	2b04      	cmp	r3, #4
 800335e:	d091      	beq.n	8003284 <HAL_RCC_ClockConfig+0x180>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003360:	f000 f8ce 	bl	8003500 <HAL_GetTick>
 8003364:	f241 3388 	movw	r3, #5000	; 0x1388
 8003368:	1bc0      	subs	r0, r0, r7
 800336a:	4298      	cmp	r0, r3
 800336c:	d9f3      	bls.n	8003356 <HAL_RCC_ClockConfig+0x252>
 800336e:	e75f      	b.n	8003230 <HAL_RCC_ClockConfig+0x12c>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003370:	2b02      	cmp	r3, #2
 8003372:	d114      	bne.n	800339e <HAL_RCC_ClockConfig+0x29a>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003374:	686b      	ldr	r3, [r5, #4]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	2b08      	cmp	r3, #8
 800337c:	d082      	beq.n	8003284 <HAL_RCC_ClockConfig+0x180>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800337e:	f000 f8bf 	bl	8003500 <HAL_GetTick>
 8003382:	f241 3388 	movw	r3, #5000	; 0x1388
 8003386:	1bc0      	subs	r0, r0, r7
 8003388:	4298      	cmp	r0, r3
 800338a:	d9f3      	bls.n	8003374 <HAL_RCC_ClockConfig+0x270>
 800338c:	e750      	b.n	8003230 <HAL_RCC_ClockConfig+0x12c>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800338e:	f000 f8b7 	bl	8003500 <HAL_GetTick>
 8003392:	f241 3388 	movw	r3, #5000	; 0x1388
 8003396:	1bc0      	subs	r0, r0, r7
 8003398:	4298      	cmp	r0, r3
 800339a:	f63f af49 	bhi.w	8003230 <HAL_RCC_ClockConfig+0x12c>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800339e:	686b      	ldr	r3, [r5, #4]
 80033a0:	f013 0f0c 	tst.w	r3, #12
 80033a4:	d1f3      	bne.n	800338e <HAL_RCC_ClockConfig+0x28a>
 80033a6:	e76d      	b.n	8003284 <HAL_RCC_ClockConfig+0x180>
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a8:	070b      	lsls	r3, r1, #28
  {
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033aa:	bf41      	itttt	mi
 80033ac:	4a07      	ldrmi	r2, [pc, #28]	; (80033cc <HAL_RCC_ClockConfig+0x2c8>)
 80033ae:	6921      	ldrmi	r1, [r4, #16]
 80033b0:	6853      	ldrmi	r3, [r2, #4]
 80033b2:	f423 5360 	bicmi.w	r3, r3, #14336	; 0x3800
 80033b6:	bf44      	itt	mi
 80033b8:	ea43 03c1 	orrmi.w	r3, r3, r1, lsl #3
 80033bc:	6053      	strmi	r3, [r2, #4]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80033be:	200f      	movs	r0, #15
 80033c0:	f000 f871 	bl	80034a6 <HAL_InitTick>

  return HAL_OK;
 80033c4:	2000      	movs	r0, #0
}
 80033c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033c8:	40022000 	.word	0x40022000
 80033cc:	40021000 	.word	0x40021000

080033d0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0, prediv = 0, pllmul = 0, pllclk = 0;
  uint32_t sysclockfreq = 0;

  tmpreg = RCC->CFGR;
 80033d0:	4915      	ldr	r1, [pc, #84]	; (8003428 <HAL_RCC_GetSysClockFreq+0x58>)
  *
  * @param  None
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d2:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, prediv = 0, pllmul = 0, pllclk = 0;
  uint32_t sysclockfreq = 0;

  tmpreg = RCC->CFGR;
 80033d4:	684c      	ldr	r4, [r1, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033d6:	f004 030c 	and.w	r3, r4, #12
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d121      	bne.n	8003422 <HAL_RCC_GetSysClockFreq+0x52>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033de:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80033e2:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80033e6:	fab3 f383 	clz	r3, r3
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
    break;

  case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80033ea:	f404 1270 	and.w	r2, r4, #3932160	; 0x3c0000
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	fa22 f303 	lsr.w	r3, r2, r3
 80033f4:	4a0d      	ldr	r2, [pc, #52]	; (800342c <HAL_RCC_GetSysClockFreq+0x5c>)
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80033f6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
    break;

  case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80033f8:	5cd2      	ldrb	r2, [r2, r3]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fa:	230f      	movs	r3, #15
 80033fc:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8003400:	fab3 f383 	clz	r3, r3
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003404:	f001 010f 	and.w	r1, r1, #15
 8003408:	b2db      	uxtb	r3, r3
 800340a:	fa21 f303 	lsr.w	r3, r1, r3
 800340e:	4908      	ldr	r1, [pc, #32]	; (8003430 <HAL_RCC_GetSysClockFreq+0x60>)
 8003410:	5cc8      	ldrb	r0, [r1, r3]
    if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003412:	03e3      	lsls	r3, r4, #15
      pllclk = (HSE_VALUE/prediv) * pllmul;
    }
    else
    {
      /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
      pllclk = (HSI_VALUE >> 1) * pllmul;
 8003414:	bf52      	itee	pl
 8003416:	4807      	ldrpl	r0, [pc, #28]	; (8003434 <HAL_RCC_GetSysClockFreq+0x64>)
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
    if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
    {
      /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
      pllclk = (HSE_VALUE/prediv) * pllmul;
 8003418:	4b07      	ldrmi	r3, [pc, #28]	; (8003438 <HAL_RCC_GetSysClockFreq+0x68>)
 800341a:	fbb3 f0f0 	udivmi	r0, r3, r0
    }
    else
    {
      /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
      pllclk = (HSI_VALUE >> 1) * pllmul;
 800341e:	4350      	muls	r0, r2
 8003420:	bd10      	pop	{r4, pc}

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003422:	4805      	ldr	r0, [pc, #20]	; (8003438 <HAL_RCC_GetSysClockFreq+0x68>)
  default:
    sysclockfreq = HSI_VALUE;
    break;
  }
  return sysclockfreq;
}
 8003424:	bd10      	pop	{r4, pc}
 8003426:	bf00      	nop
 8003428:	40021000 	.word	0x40021000
 800342c:	08019c7c 	.word	0x08019c7c
 8003430:	08019c6c 	.word	0x08019c6c
 8003434:	003d0900 	.word	0x003d0900
 8003438:	007a1200 	.word	0x007a1200

0800343c <HAL_RCC_GetHCLKFreq>:
  *                       
  * @param  None
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800343c:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800343e:	f7ff ffc7 	bl	80033d0 <HAL_RCC_GetSysClockFreq>
 8003442:	4b09      	ldr	r3, [pc, #36]	; (8003468 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003444:	685a      	ldr	r2, [r3, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003446:	23f0      	movs	r3, #240	; 0xf0
 8003448:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800344c:	fab3 f383 	clz	r3, r3
 8003450:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	fa22 f303 	lsr.w	r3, r2, r3
 800345a:	4a04      	ldr	r2, [pc, #16]	; (800346c <HAL_RCC_GetHCLKFreq+0x30>)
 800345c:	5cd3      	ldrb	r3, [r2, r3]
 800345e:	40d8      	lsrs	r0, r3
 8003460:	4b03      	ldr	r3, [pc, #12]	; (8003470 <HAL_RCC_GetHCLKFreq+0x34>)
 8003462:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8003464:	bd08      	pop	{r3, pc}
 8003466:	bf00      	nop
 8003468:	40021000 	.word	0x40021000
 800346c:	08019c5c 	.word	0x08019c5c
 8003470:	20000014 	.word	0x20000014

08003474 <HAL_RCC_GetPCLK2Freq>:
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @param  None
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003474:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8003476:	f7ff ffe1 	bl	800343c <HAL_RCC_GetHCLKFreq>
 800347a:	4b08      	ldr	r3, [pc, #32]	; (800349c <HAL_RCC_GetPCLK2Freq+0x28>)
 800347c:	685a      	ldr	r2, [r3, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003482:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8003486:	fab3 f383 	clz	r3, r3
 800348a:	f402 5260 	and.w	r2, r2, #14336	; 0x3800
 800348e:	b2db      	uxtb	r3, r3
 8003490:	fa22 f303 	lsr.w	r3, r2, r3
 8003494:	4a02      	ldr	r2, [pc, #8]	; (80034a0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8003496:	5cd3      	ldrb	r3, [r2, r3]
}
 8003498:	40d8      	lsrs	r0, r3
 800349a:	bd08      	pop	{r3, pc}
 800349c:	40021000 	.word	0x40021000
 80034a0:	08019c5c 	.word	0x08019c5c

080034a4 <HAL_MspInit>:
  * @brief  Initializes the MSP.
  * @param  None
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80034a4:	4770      	bx	lr

080034a6 <HAL_InitTick>:
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)

{
 80034a6:	b510      	push	{r4, lr}
 80034a8:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80034aa:	f7ff ffc7 	bl	800343c <HAL_RCC_GetHCLKFreq>
 80034ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034b2:	fbb0 f0f3 	udiv	r0, r0, r3
 80034b6:	f000 f885 	bl	80035c4 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80034ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034be:	4621      	mov	r1, r4
 80034c0:	2200      	movs	r2, #0
 80034c2:	f000 f843 	bl	800354c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80034c6:	2000      	movs	r0, #0
 80034c8:	bd10      	pop	{r4, pc}
	...

080034cc <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034cc:	4a07      	ldr	r2, [pc, #28]	; (80034ec <HAL_Init+0x20>)
  * @note                  
  * @param  None
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034ce:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034d0:	6813      	ldr	r3, [r2, #0]
 80034d2:	f043 0310 	orr.w	r3, r3, #16
 80034d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034d8:	2003      	movs	r0, #3
 80034da:	f000 f825 	bl	8003528 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034de:	200f      	movs	r0, #15
 80034e0:	f7ff ffe1 	bl	80034a6 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034e4:	f7ff ffde 	bl	80034a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80034e8:	2000      	movs	r0, #0
 80034ea:	bd08      	pop	{r3, pc}
 80034ec:	40022000 	.word	0x40022000

080034f0 <HAL_IncTick>:
  * @param  None
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80034f0:	4a02      	ldr	r2, [pc, #8]	; (80034fc <HAL_IncTick+0xc>)
 80034f2:	6813      	ldr	r3, [r2, #0]
 80034f4:	3301      	adds	r3, #1
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	20000ba0 	.word	0x20000ba0

08003500 <HAL_GetTick>:
  * @param  None
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8003500:	4b01      	ldr	r3, [pc, #4]	; (8003508 <HAL_GetTick+0x8>)
 8003502:	6818      	ldr	r0, [r3, #0]
}
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	20000ba0 	.word	0x20000ba0

0800350c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800350c:	b513      	push	{r0, r1, r4, lr}
 800350e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8003510:	f7ff fff6 	bl	8003500 <HAL_GetTick>
 8003514:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8003516:	f7ff fff3 	bl	8003500 <HAL_GetTick>
 800351a:	9b01      	ldr	r3, [sp, #4]
 800351c:	1b00      	subs	r0, r0, r4
 800351e:	4298      	cmp	r0, r3
 8003520:	d3f9      	bcc.n	8003516 <HAL_Delay+0xa>
  {
  }
}
 8003522:	b002      	add	sp, #8
 8003524:	bd10      	pop	{r4, pc}
	...

08003528 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003528:	4a07      	ldr	r2, [pc, #28]	; (8003548 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800352a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800352c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003530:	041b      	lsls	r3, r3, #16
 8003532:	0c1b      	lsrs	r3, r3, #16
 8003534:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 800353c:	f000 0007 	and.w	r0, r0, #7

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 8003540:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8003544:	60d3      	str	r3, [r2, #12]
 8003546:	4770      	bx	lr
 8003548:	e000ed00 	.word	0xe000ed00

0800354c <HAL_NVIC_SetPriority>:

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 800354c:	4b15      	ldr	r3, [pc, #84]	; (80035a4 <HAL_NVIC_SetPriority+0x58>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003554:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8003556:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 800355a:	1d1c      	adds	r4, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 800355c:	2d04      	cmp	r5, #4
 800355e:	bf28      	it	cs
 8003560:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8003562:	2c06      	cmp	r4, #6
 8003564:	bf8c      	ite	hi
 8003566:	3b03      	subhi	r3, #3
 8003568:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 800356a:	2401      	movs	r4, #1
 800356c:	fa04 f603 	lsl.w	r6, r4, r3

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8003570:	40ac      	lsls	r4, r5
 8003572:	3c01      	subs	r4, #1
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8003574:	3e01      	subs	r6, #1

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8003576:	4021      	ands	r1, r4
 8003578:	4099      	lsls	r1, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 800357a:	4032      	ands	r2, r6
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
 800357c:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 800357e:	ea42 0201 	orr.w	r2, r2, r1
 8003582:	ea4f 1202 	mov.w	r2, r2, lsl #4
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8003586:	bfaf      	iteee	ge
 8003588:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800358c:	f000 000f 	andlt.w	r0, r0, #15
 8003590:	4b05      	ldrlt	r3, [pc, #20]	; (80035a8 <HAL_NVIC_SetPriority+0x5c>)
 8003592:	b2d2      	uxtblt	r2, r2
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8003594:	bfa5      	ittet	ge
 8003596:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800359a:	b2d2      	uxtbge	r2, r2
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800359c:	541a      	strblt	r2, [r3, r0]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800359e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80035a2:	bd70      	pop	{r4, r5, r6, pc}
 80035a4:	e000ed00 	.word	0xe000ed00
 80035a8:	e000ed14 	.word	0xe000ed14

080035ac <HAL_NVIC_EnableIRQ>:
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80035ac:	0941      	lsrs	r1, r0, #5
 80035ae:	2301      	movs	r3, #1
 80035b0:	f000 001f 	and.w	r0, r0, #31
 80035b4:	4a02      	ldr	r2, [pc, #8]	; (80035c0 <HAL_NVIC_EnableIRQ+0x14>)
 80035b6:	4083      	lsls	r3, r0
 80035b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	e000e100 	.word	0xe000e100

080035c4 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 80035c4:	3801      	subs	r0, #1
 80035c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80035ca:	bf3f      	itttt	cc
 80035cc:	4b06      	ldrcc	r3, [pc, #24]	; (80035e8 <HAL_SYSTICK_Config+0x24>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80035ce:	4a07      	ldrcc	r2, [pc, #28]	; (80035ec <HAL_SYSTICK_Config+0x28>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80035d0:	6058      	strcc	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80035d2:	21f0      	movcc	r1, #240	; 0xf0
 80035d4:	bf3f      	itttt	cc
 80035d6:	f882 1023 	strbcc.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80035da:	2000      	movcc	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035dc:	2207      	movcc	r2, #7
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80035de:	6098      	strcc	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035e0:	bf34      	ite	cc
 80035e2:	601a      	strcc	r2, [r3, #0]
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 80035e4:	2001      	movcs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80035e6:	4770      	bx	lr
 80035e8:	e000e010 	.word	0xe000e010
 80035ec:	e000ed00 	.word	0xe000ed00

080035f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80035f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035f4:	680f      	ldr	r7, [r1, #0]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80035f6:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80035f8:	2201      	movs	r2, #1
 80035fa:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035fc:	ea02 0507 	and.w	r5, r2, r7
 
    if (iocurrent == ioposition)
 8003600:	4295      	cmp	r5, r2
 8003602:	f040 80ac 	bne.w	800375e <HAL_GPIO_Init+0x16e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/ 
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8003606:	684c      	ldr	r4, [r1, #4]
 8003608:	f024 0c10 	bic.w	ip, r4, #16
 800360c:	f1bc 0f02 	cmp.w	ip, #2
 8003610:	d114      	bne.n	800363c <HAL_GPIO_Init+0x4c>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8003612:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8003616:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800361a:	f003 0607 	and.w	r6, r3, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 800361e:	f8de 2020 	ldr.w	r2, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003622:	00b6      	lsls	r6, r6, #2
 8003624:	f04f 080f 	mov.w	r8, #15
 8003628:	fa08 f806 	lsl.w	r8, r8, r6
 800362c:	ea22 0808 	bic.w	r8, r2, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003630:	690a      	ldr	r2, [r1, #16]
 8003632:	40b2      	lsls	r2, r6
 8003634:	ea48 0202 	orr.w	r2, r8, r2
        GPIOx->AFR[position >> 3] = temp;
 8003638:	f8ce 2020 	str.w	r2, [lr, #32]
 800363c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003640:	2203      	movs	r2, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003642:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003644:	fa02 f20e 	lsl.w	r2, r2, lr
 8003648:	43d2      	mvns	r2, r2
 800364a:	ea02 0806 	and.w	r8, r2, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800364e:	f004 0603 	and.w	r6, r4, #3
 8003652:	fa06 f60e 	lsl.w	r6, r6, lr
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003656:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800365a:	ea48 0606 	orr.w	r6, r8, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800365e:	f1bc 0f01 	cmp.w	ip, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 8003662:	6006      	str	r6, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003664:	d811      	bhi.n	800368a <HAL_GPIO_Init+0x9a>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003666:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003668:	ea02 0c06 	and.w	ip, r2, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 800366c:	68ce      	ldr	r6, [r1, #12]
 800366e:	fa06 f60e 	lsl.w	r6, r6, lr
 8003672:	ea4c 0606 	orr.w	r6, ip, r6
        GPIOx->OSPEEDR = temp;
 8003676:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003678:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800367a:	ea26 0c05 	bic.w	ip, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800367e:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8003682:	409e      	lsls	r6, r3
 8003684:	ea4c 0606 	orr.w	r6, ip, r6
        GPIOx->OTYPER = temp;
 8003688:	6046      	str	r6, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800368a:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800368c:	ea02 0c06 	and.w	ip, r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003690:	688a      	ldr	r2, [r1, #8]
 8003692:	fa02 f60e 	lsl.w	r6, r2, lr
 8003696:	ea4c 0206 	orr.w	r2, ip, r6
      GPIOx->PUPDR = temp;
 800369a:	60c2      	str	r2, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800369c:	00e2      	lsls	r2, r4, #3
 800369e:	d55e      	bpl.n	800375e <HAL_GPIO_Init+0x16e>
      {
        /* Enable SYSCFG Clock */
        __SYSCFG_CLK_ENABLE();
 80036a0:	4e32      	ldr	r6, [pc, #200]	; (800376c <HAL_GPIO_Init+0x17c>)
 80036a2:	69b2      	ldr	r2, [r6, #24]
 80036a4:	f042 0201 	orr.w	r2, r2, #1
 80036a8:	61b2      	str	r2, [r6, #24]
 80036aa:	f023 0603 	bic.w	r6, r3, #3
 80036ae:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80036b2:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
  
        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80036b6:	f003 0c03 	and.w	ip, r3, #3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
 80036ba:	f8d6 e008 	ldr.w	lr, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80036be:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80036c2:	220f      	movs	r2, #15
 80036c4:	fa02 f20c 	lsl.w	r2, r2, ip
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 80036c8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80036cc:	ea2e 0e02 	bic.w	lr, lr, r2
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 80036d0:	d015      	beq.n	80036fe <HAL_GPIO_Init+0x10e>
 80036d2:	4a27      	ldr	r2, [pc, #156]	; (8003770 <HAL_GPIO_Init+0x180>)
 80036d4:	4290      	cmp	r0, r2
 80036d6:	d014      	beq.n	8003702 <HAL_GPIO_Init+0x112>
 80036d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036dc:	4290      	cmp	r0, r2
 80036de:	d012      	beq.n	8003706 <HAL_GPIO_Init+0x116>
 80036e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036e4:	4290      	cmp	r0, r2
 80036e6:	d010      	beq.n	800370a <HAL_GPIO_Init+0x11a>
 80036e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036ec:	4290      	cmp	r0, r2
 80036ee:	d00e      	beq.n	800370e <HAL_GPIO_Init+0x11e>
 80036f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036f4:	4290      	cmp	r0, r2
 80036f6:	bf0c      	ite	eq
 80036f8:	2205      	moveq	r2, #5
 80036fa:	2206      	movne	r2, #6
 80036fc:	e008      	b.n	8003710 <HAL_GPIO_Init+0x120>
 80036fe:	2200      	movs	r2, #0
 8003700:	e006      	b.n	8003710 <HAL_GPIO_Init+0x120>
 8003702:	2201      	movs	r2, #1
 8003704:	e004      	b.n	8003710 <HAL_GPIO_Init+0x120>
 8003706:	2202      	movs	r2, #2
 8003708:	e002      	b.n	8003710 <HAL_GPIO_Init+0x120>
 800370a:	2203      	movs	r2, #3
 800370c:	e000      	b.n	8003710 <HAL_GPIO_Init+0x120>
 800370e:	2204      	movs	r2, #4
 8003710:	fa02 f20c 	lsl.w	r2, r2, ip
 8003714:	ea42 020e 	orr.w	r2, r2, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8003718:	60b2      	str	r2, [r6, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800371a:	4a16      	ldr	r2, [pc, #88]	; (8003774 <HAL_GPIO_Init+0x184>)
 800371c:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800371e:	ea6f 0e05 	mvn.w	lr, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003722:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        {
          temp |= iocurrent;
 8003726:	bf14      	ite	ne
 8003728:	432e      	orrne	r6, r5
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 800372a:	ea0e 0606 	andeq.w	r6, lr, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 800372e:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8003730:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003732:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        { 
          temp |= iocurrent;
 8003736:	bf14      	ite	ne
 8003738:	432e      	orrne	r6, r5
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 800373a:	ea0e 0606 	andeq.w	r6, lr, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        { 
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800373e:	6056      	str	r6, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003740:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003742:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        {
          temp |= iocurrent;
 8003746:	bf14      	ite	ne
 8003748:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 800374a:	ea0e 0606 	andeq.w	r6, lr, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 800374e:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8003750:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003752:	02a4      	lsls	r4, r4, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8003754:	bf54      	ite	pl
 8003756:	ea0e 0506 	andpl.w	r5, lr, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 800375a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800375c:	60d5      	str	r5, [r2, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800375e:	3301      	adds	r3, #1
 8003760:	2b10      	cmp	r3, #16
 8003762:	f47f af49 	bne.w	80035f8 <HAL_GPIO_Init+0x8>
        }
        EXTI->FTSR = temp;
      }
    }
  } 
}
 8003766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800376a:	bf00      	nop
 800376c:	40021000 	.word	0x40021000
 8003770:	48000400 	.word	0x48000400
 8003774:	40010400 	.word	0x40010400

08003778 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003778:	6903      	ldr	r3, [r0, #16]
 800377a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
  }
 800377c:	bf14      	ite	ne
 800377e:	2001      	movne	r0, #1
 8003780:	2000      	moveq	r0, #0
 8003782:	4770      	bx	lr

08003784 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003784:	b10a      	cbz	r2, 800378a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8003786:	8301      	strh	r1, [r0, #24]
 8003788:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 800378a:	8341      	strh	r1, [r0, #26]
 800378c:	4770      	bx	lr

0800378e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800378e:	6943      	ldr	r3, [r0, #20]
 8003790:	4059      	eors	r1, r3
 8003792:	6141      	str	r1, [r0, #20]
 8003794:	4770      	bx	lr

08003796 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8003796:	b538      	push	{r3, r4, r5, lr}
  uint32_t i = 0;

  uint32_t wInterrupt_Mask = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8003798:	4604      	mov	r4, r0
 800379a:	2800      	cmp	r0, #0
 800379c:	d046      	beq.n	800382c <HAL_PCD_Init+0x96>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = PCD_BUSY;
 800379e:	2302      	movs	r3, #2
 80037a0:	f880 3141 	strb.w	r3, [r0, #321]	; 0x141
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 80037a4:	f001 fe5a 	bl	800545c <HAL_PCD_MspInit>

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 80037a8:	6865      	ldr	r5, [r4, #4]
 80037aa:	f104 0229 	add.w	r2, r4, #41	; 0x29
 80037ae:	2100      	movs	r1, #0
 80037b0:	42a9      	cmp	r1, r5
 80037b2:	f102 021c 	add.w	r2, r2, #28
 80037b6:	f04f 0300 	mov.w	r3, #0
 80037ba:	d00e      	beq.n	80037da <HAL_PCD_Init+0x44>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 80037bc:	2001      	movs	r0, #1
   hpcd->IN_ep[i].num = i;
 80037be:	f802 1c1d 	strb.w	r1, [r2, #-29]

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 80037c2:	f802 0c1c 	strb.w	r0, [r2, #-28]
   hpcd->IN_ep[i].num = i;
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 80037c6:	f802 3c1a 	strb.w	r3, [r2, #-26]
   hpcd->IN_ep[i].maxpacket =  0;
 80037ca:	f842 3c11 	str.w	r3, [r2, #-17]
   hpcd->IN_ep[i].xfer_buff = 0;
 80037ce:	f842 3c0d 	str.w	r3, [r2, #-13]
   hpcd->IN_ep[i].xfer_len = 0;
 80037d2:	f842 3c09 	str.w	r3, [r2, #-9]
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 80037d6:	4401      	add	r1, r0
 80037d8:	e7ea      	b.n	80037b0 <HAL_PCD_Init+0x1a>
 80037da:	f104 02b5 	add.w	r2, r4, #181	; 0xb5
   hpcd->IN_ep[i].maxpacket =  0;
   hpcd->IN_ep[i].xfer_buff = 0;
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 80037de:	42ab      	cmp	r3, r5
 80037e0:	f102 021c 	add.w	r2, r2, #28
 80037e4:	f04f 0000 	mov.w	r0, #0
 80037e8:	d00d      	beq.n	8003806 <HAL_PCD_Init+0x70>
 {
   hpcd->OUT_ep[i].is_in = 0;
   hpcd->OUT_ep[i].num = i;
 80037ea:	f802 3c1d 	strb.w	r3, [r2, #-29]
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 {
   hpcd->OUT_ep[i].is_in = 0;
 80037ee:	f802 0c1c 	strb.w	r0, [r2, #-28]
   hpcd->OUT_ep[i].num = i;
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 80037f2:	f802 0c1a 	strb.w	r0, [r2, #-26]
   hpcd->OUT_ep[i].maxpacket = 0;
 80037f6:	f842 0c11 	str.w	r0, [r2, #-17]
   hpcd->OUT_ep[i].xfer_buff = 0;
 80037fa:	f842 0c0d 	str.w	r0, [r2, #-13]
   hpcd->OUT_ep[i].xfer_len = 0;
 80037fe:	f842 0c09 	str.w	r0, [r2, #-9]
   hpcd->IN_ep[i].maxpacket =  0;
   hpcd->IN_ep[i].xfer_buff = 0;
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8003802:	3301      	adds	r3, #1
 8003804:	e7eb      	b.n	80037de <HAL_PCD_Init+0x48>
   hpcd->OUT_ep[i].xfer_len = 0;
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	2201      	movs	r2, #1
 800380a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 800380e:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 
 /*CNTR_FRES = 0*/
 hpcd->Instance->CNTR = 0;
 8003812:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0;
 8003816:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 800381a:	f8a3 0050 	strh.w	r0, [r3, #80]	; 0x50
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 800381e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  hpcd->USB_Address = 0;
 8003822:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State= PCD_READY;
 8003826:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141

 return HAL_OK;
 800382a:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t wInterrupt_Mask = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
  {
    return HAL_ERROR;
 800382c:	2001      	movs	r0, #1
  
  hpcd->USB_Address = 0;
  hpcd->State= PCD_READY;

 return HAL_OK;
}
 800382e:	bd38      	pop	{r3, r4, r5, pc}

08003830 <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8003830:	b508      	push	{r3, lr}
  /*  DP Pull-Down is external */
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8003832:	2101      	movs	r1, #1
 8003834:	f000 ff19 	bl	800466a <HAL_PCDEx_SetConnectionState>
  
  return HAL_OK;
}
 8003838:	2000      	movs	r0, #0
 800383a:	bd08      	pop	{r3, pc}

0800383c <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 800383c:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8003840:	2b01      	cmp	r3, #1
 8003842:	d00f      	beq.n	8003864 <HAL_PCD_SetAddress+0x28>
 8003844:	2301      	movs	r3, #1
 8003846:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

   if(address == 0) 
 800384a:	b921      	cbnz	r1, 8003856 <HAL_PCD_SetAddress+0x1a>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 800384c:	6803      	ldr	r3, [r0, #0]
 800384e:	2280      	movs	r2, #128	; 0x80
 8003850:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8003854:	e001      	b.n	800385a <HAL_PCD_SetAddress+0x1e>
   }
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
 8003856:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
   }

  __HAL_UNLOCK(hpcd);   
 800385a:	2300      	movs	r3, #0
 800385c:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 8003860:	4618      	mov	r0, r3
 8003862:	4770      	bx	lr
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 8003864:	2002      	movs	r0, #2
     hpcd->USB_Address = address;
   }

  __HAL_UNLOCK(hpcd);   
  return HAL_OK;
}
 8003866:	4770      	bx	lr

08003868 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packert size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003868:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 800386a:	b2cc      	uxtb	r4, r1
 800386c:	f014 0f80 	tst.w	r4, #128	; 0x80
 8003870:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 8003874:	f04f 051c 	mov.w	r5, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003878:	bf15      	itete	ne
 800387a:	fb05 0106 	mlane	r1, r5, r6, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800387e:	fb05 0101 	mlaeq	r1, r5, r1, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003882:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8003884:	31b4      	addeq	r1, #180	; 0xb4
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8003886:	09e4      	lsrs	r4, r4, #7
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8003888:	700e      	strb	r6, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800388a:	704c      	strb	r4, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 800388c:	70cb      	strb	r3, [r1, #3]
  
  __HAL_LOCK(hpcd); 
 800388e:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
 8003892:	60ca      	str	r2, [r1, #12]
  ep->type = ep_type;
  
  __HAL_LOCK(hpcd); 
 8003894:	2b01      	cmp	r3, #1
 8003896:	f000 8181 	beq.w	8003b9c <HAL_PCD_EP_Open+0x334>
 800389a:	2301      	movs	r3, #1
 800389c:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

/* initialize Endpoint */
  switch (ep->type)
 80038a0:	78cc      	ldrb	r4, [r1, #3]
 80038a2:	780a      	ldrb	r2, [r1, #0]
 80038a4:	6803      	ldr	r3, [r0, #0]
 80038a6:	2c03      	cmp	r4, #3
 80038a8:	d82f      	bhi.n	800390a <HAL_PCD_EP_Open+0xa2>
 80038aa:	e8df f004 	tbb	[pc, r4]
 80038ae:	2202      	.short	0x2202
 80038b0:	170d      	.short	0x170d
  {
  case PCD_EP_TYPE_CTRL:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 80038b2:	b212      	sxth	r2, r2
 80038b4:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80038b8:	b2a4      	uxth	r4, r4
 80038ba:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 80038be:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80038c2:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 80038c6:	e01e      	b.n	8003906 <HAL_PCD_EP_Open+0x9e>
    break;
  case PCD_EP_TYPE_BULK:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 80038c8:	b212      	sxth	r2, r2
 80038ca:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80038ce:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 80038d2:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80038d6:	0424      	lsls	r4, r4, #16
 80038d8:	0c24      	lsrs	r4, r4, #16
 80038da:	e014      	b.n	8003906 <HAL_PCD_EP_Open+0x9e>
    break;
  case PCD_EP_TYPE_INTR:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 80038dc:	b212      	sxth	r2, r2
 80038de:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80038e2:	b2a4      	uxth	r4, r4
 80038e4:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 80038e8:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80038ec:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
 80038f0:	e009      	b.n	8003906 <HAL_PCD_EP_Open+0x9e>
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 80038f2:	b212      	sxth	r2, r2
 80038f4:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80038f8:	b2a4      	uxth	r4, r4
 80038fa:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 80038fe:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8003902:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8003906:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    break;
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 800390a:	780a      	ldrb	r2, [r1, #0]
 800390c:	b216      	sxth	r6, r2
 800390e:	f442 4500 	orr.w	r5, r2, #32768	; 0x8000
 8003912:	f833 4026 	ldrh.w	r4, [r3, r6, lsl #2]
 8003916:	f024 02f0 	bic.w	r2, r4, #240	; 0xf0
 800391a:	0512      	lsls	r2, r2, #20
 800391c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8003920:	0d12      	lsrs	r2, r2, #20
 8003922:	432a      	orrs	r2, r5
 8003924:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8003928:	7a8c      	ldrb	r4, [r1, #10]
 800392a:	780a      	ldrb	r2, [r1, #0]
 800392c:	2c00      	cmp	r4, #0
 800392e:	d175      	bne.n	8003a1c <HAL_PCD_EP_Open+0x1b4>
  {
    if (ep->is_in)
 8003930:	784d      	ldrb	r5, [r1, #1]
 8003932:	888c      	ldrh	r4, [r1, #4]
 8003934:	2608      	movs	r6, #8
 8003936:	b33d      	cbz	r5, 8003988 <HAL_PCD_EP_Open+0x120>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8003938:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800393c:	b2ad      	uxth	r5, r5
 800393e:	fb16 5202 	smlabb	r2, r6, r2, r5
 8003942:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8003946:	0864      	lsrs	r4, r4, #1
 8003948:	0064      	lsls	r4, r4, #1
 800394a:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800394e:	780c      	ldrb	r4, [r1, #0]
 8003950:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003954:	0652      	lsls	r2, r2, #25
 8003956:	d50b      	bpl.n	8003970 <HAL_PCD_EP_Open+0x108>
 8003958:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800395c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003960:	0512      	lsls	r2, r2, #20
 8003962:	0d12      	lsrs	r2, r2, #20
 8003964:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003968:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800396c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK); 
 8003970:	7809      	ldrb	r1, [r1, #0]
 8003972:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003976:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800397a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800397e:	0412      	lsls	r2, r2, #16
 8003980:	0c12      	lsrs	r2, r2, #16
 8003982:	f082 0220 	eor.w	r2, r2, #32
 8003986:	e0fe      	b.n	8003b86 <HAL_PCD_EP_Open+0x31e>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8003988:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 800398c:	b2bf      	uxth	r7, r7
 800398e:	fb16 7202 	smlabb	r2, r6, r2, r7
 8003992:	3204      	adds	r2, #4
 8003994:	f503 6580 	add.w	r5, r3, #1024	; 0x400
 8003998:	0864      	lsrs	r4, r4, #1
 800399a:	0064      	lsls	r4, r4, #1
 800399c:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 80039a0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80039a4:	780c      	ldrb	r4, [r1, #0]
 80039a6:	b292      	uxth	r2, r2
 80039a8:	fb16 2204 	smlabb	r2, r6, r4, r2
 80039ac:	68ce      	ldr	r6, [r1, #12]
 80039ae:	2e3e      	cmp	r6, #62	; 0x3e
 80039b0:	f102 0206 	add.w	r2, r2, #6
 80039b4:	d90b      	bls.n	80039ce <HAL_PCD_EP_Open+0x166>
 80039b6:	f3c6 144f 	ubfx	r4, r6, #5, #16
 80039ba:	06f7      	lsls	r7, r6, #27
 80039bc:	bf04      	itt	eq
 80039be:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 80039c2:	b2a4      	uxtheq	r4, r4
 80039c4:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 80039c8:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80039cc:	e006      	b.n	80039dc <HAL_PCD_EP_Open+0x174>
 80039ce:	f3c6 044f 	ubfx	r4, r6, #1, #16
 80039d2:	07f6      	lsls	r6, r6, #31
 80039d4:	bf44      	itt	mi
 80039d6:	3401      	addmi	r4, #1
 80039d8:	b2a4      	uxthmi	r4, r4
 80039da:	02a4      	lsls	r4, r4, #10
 80039dc:	b2a4      	uxth	r4, r4
 80039de:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80039e2:	780c      	ldrb	r4, [r1, #0]
 80039e4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80039e8:	0452      	lsls	r2, r2, #17
 80039ea:	d50b      	bpl.n	8003a04 <HAL_PCD_EP_Open+0x19c>
 80039ec:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80039f0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80039f4:	0512      	lsls	r2, r2, #20
 80039f6:	0d12      	lsrs	r2, r2, #20
 80039f8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80039fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a00:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8003a04:	7809      	ldrb	r1, [r1, #0]
 8003a06:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003a0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a0e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a12:	0412      	lsls	r2, r2, #16
 8003a14:	0c12      	lsrs	r2, r2, #16
 8003a16:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8003a1a:	e0b4      	b.n	8003b86 <HAL_PCD_EP_Open+0x31e>
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 8003a1c:	b212      	sxth	r2, r2
 8003a1e:	f503 6580 	add.w	r5, r3, #1024	; 0x400
 8003a22:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003a26:	f424 74f8 	bic.w	r4, r4, #496	; 0x1f0
 8003a2a:	0524      	lsls	r4, r4, #20
 8003a2c:	0d24      	lsrs	r4, r4, #20
 8003a2e:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 8003a32:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003a36:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8003a3a:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8003a3e:	780c      	ldrb	r4, [r1, #0]
 8003a40:	2208      	movs	r2, #8
 8003a42:	b2b6      	uxth	r6, r6
 8003a44:	fb12 6604 	smlabb	r6, r2, r4, r6
 8003a48:	88cc      	ldrh	r4, [r1, #6]
 8003a4a:	0864      	lsrs	r4, r4, #1
 8003a4c:	0064      	lsls	r4, r4, #1
 8003a4e:	f845 4016 	str.w	r4, [r5, r6, lsl #1]
 8003a52:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8003a56:	780e      	ldrb	r6, [r1, #0]
 8003a58:	b2a4      	uxth	r4, r4
 8003a5a:	fb12 4206 	smlabb	r2, r2, r6, r4
 8003a5e:	890c      	ldrh	r4, [r1, #8]
 8003a60:	3204      	adds	r2, #4
 8003a62:	0864      	lsrs	r4, r4, #1
 8003a64:	0064      	lsls	r4, r4, #1
 8003a66:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 8003a6a:	780c      	ldrb	r4, [r1, #0]
    
    if (ep->is_in==0)
 8003a6c:	784a      	ldrb	r2, [r1, #1]
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8003a6e:	b224      	sxth	r4, r4
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
    
    if (ep->is_in==0)
 8003a70:	2a00      	cmp	r2, #0
 8003a72:	d146      	bne.n	8003b02 <HAL_PCD_EP_Open+0x29a>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8003a74:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003a78:	0457      	lsls	r7, r2, #17
 8003a7a:	d50b      	bpl.n	8003a94 <HAL_PCD_EP_Open+0x22c>
 8003a7c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003a80:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003a84:	0512      	lsls	r2, r2, #20
 8003a86:	0d12      	lsrs	r2, r2, #20
 8003a88:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003a8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a90:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003a94:	780c      	ldrb	r4, [r1, #0]
 8003a96:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003a9a:	0656      	lsls	r6, r2, #25
 8003a9c:	d50b      	bpl.n	8003ab6 <HAL_PCD_EP_Open+0x24e>
 8003a9e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003aa2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003aa6:	0512      	lsls	r2, r2, #20
 8003aa8:	0d12      	lsrs	r2, r2, #20
 8003aaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aae:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003ab2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8003ab6:	780c      	ldrb	r4, [r1, #0]
 8003ab8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003abc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003ac0:	0512      	lsls	r2, r2, #20
 8003ac2:	0d12      	lsrs	r2, r2, #20
 8003ac4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ac8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003acc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8003ad0:	780c      	ldrb	r4, [r1, #0]
 8003ad2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003ad6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ada:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ade:	0412      	lsls	r2, r2, #16
 8003ae0:	0c12      	lsrs	r2, r2, #16
 8003ae2:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8003ae6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003aee:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8003af2:	7809      	ldrb	r1, [r1, #0]
 8003af4:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003af8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003afc:	0512      	lsls	r2, r2, #20
 8003afe:	0d12      	lsrs	r2, r2, #20
 8003b00:	e041      	b.n	8003b86 <HAL_PCD_EP_Open+0x31e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8003b02:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003b06:	0455      	lsls	r5, r2, #17
 8003b08:	d50b      	bpl.n	8003b22 <HAL_PCD_EP_Open+0x2ba>
 8003b0a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003b0e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003b12:	0512      	lsls	r2, r2, #20
 8003b14:	0d12      	lsrs	r2, r2, #20
 8003b16:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003b1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b1e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003b22:	780c      	ldrb	r4, [r1, #0]
 8003b24:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003b28:	0652      	lsls	r2, r2, #25
 8003b2a:	d50b      	bpl.n	8003b44 <HAL_PCD_EP_Open+0x2dc>
 8003b2c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003b30:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003b34:	0512      	lsls	r2, r2, #20
 8003b36:	0d12      	lsrs	r2, r2, #20
 8003b38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b3c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003b40:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8003b44:	780c      	ldrb	r4, [r1, #0]
 8003b46:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003b4a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003b4e:	0512      	lsls	r2, r2, #20
 8003b50:	0d12      	lsrs	r2, r2, #20
 8003b52:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003b56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b5a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8003b5e:	780c      	ldrb	r4, [r1, #0]
 8003b60:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003b64:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003b68:	0512      	lsls	r2, r2, #20
 8003b6a:	0d12      	lsrs	r2, r2, #20
 8003b6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b74:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8003b78:	7809      	ldrb	r1, [r1, #0]
 8003b7a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003b7e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003b82:	0492      	lsls	r2, r2, #18
 8003b84:	0c92      	lsrs	r2, r2, #18
 8003b86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b8e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8003b92:	2300      	movs	r3, #0
 8003b94:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return ret;
 8003b98:	4618      	mov	r0, r3
 8003b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
  
  __HAL_LOCK(hpcd); 
 8003b9c:	2002      	movs	r0, #2
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
  return ret;
}
 8003b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ba0 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8003ba0:	b2cb      	uxtb	r3, r1
 8003ba2:	f013 0f80 	tst.w	r3, #128	; 0x80
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8003ba6:	b530      	push	{r4, r5, lr}
 8003ba8:	f04f 021c 	mov.w	r2, #28
 8003bac:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003bb0:	bf15      	itete	ne
 8003bb2:	fb02 0104 	mlane	r1, r2, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8003bb6:	fb02 0101 	mlaeq	r1, r2, r1, r0
{  
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003bba:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8003bbc:	31b4      	addeq	r1, #180	; 0xb4
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8003bbe:	09db      	lsrs	r3, r3, #7
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8003bc0:	700c      	strb	r4, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8003bc2:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 8003bc4:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	f000 80bf 	beq.w	8003d4c <HAL_PCD_EP_Close+0x1ac>
 8003bce:	2301      	movs	r3, #1
 8003bd0:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 8003bd4:	780a      	ldrb	r2, [r1, #0]

  if (ep->doublebuffer == 0) 
 8003bd6:	7a8d      	ldrb	r5, [r1, #10]
 8003bd8:	784c      	ldrb	r4, [r1, #1]
 8003bda:	6803      	ldr	r3, [r0, #0]
  {
    if (ep->is_in)
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003bdc:	b212      	sxth	r2, r2
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd); 

  if (ep->doublebuffer == 0) 
 8003bde:	bb1d      	cbnz	r5, 8003c28 <HAL_PCD_EP_Close+0x88>
  {
    if (ep->is_in)
 8003be0:	b184      	cbz	r4, 8003c04 <HAL_PCD_EP_Close+0x64>
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003be2:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003be6:	0664      	lsls	r4, r4, #25
 8003be8:	d55b      	bpl.n	8003ca2 <HAL_PCD_EP_Close+0x102>
 8003bea:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003bee:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8003bf2:	0524      	lsls	r4, r4, #20
 8003bf4:	0d24      	lsrs	r4, r4, #20
 8003bf6:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8003bfa:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 8003bfe:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 8003c02:	e04e      	b.n	8003ca2 <HAL_PCD_EP_Close+0x102>
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS); 
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8003c04:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003c08:	0465      	lsls	r5, r4, #17
 8003c0a:	f140 808d 	bpl.w	8003d28 <HAL_PCD_EP_Close+0x188>
 8003c0e:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003c12:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8003c16:	0524      	lsls	r4, r4, #20
 8003c18:	0d24      	lsrs	r4, r4, #20
 8003c1a:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8003c1e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003c22:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 8003c26:	e07f      	b.n	8003d28 <HAL_PCD_EP_Close+0x188>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 8003c28:	2c00      	cmp	r4, #0
 8003c2a:	d142      	bne.n	8003cb2 <HAL_PCD_EP_Close+0x112>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8003c2c:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003c30:	0464      	lsls	r4, r4, #17
 8003c32:	d50b      	bpl.n	8003c4c <HAL_PCD_EP_Close+0xac>
 8003c34:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003c38:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8003c3c:	0524      	lsls	r4, r4, #20
 8003c3e:	0d24      	lsrs	r4, r4, #20
 8003c40:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8003c44:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003c48:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003c4c:	780c      	ldrb	r4, [r1, #0]
 8003c4e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003c52:	0655      	lsls	r5, r2, #25
 8003c54:	d50b      	bpl.n	8003c6e <HAL_PCD_EP_Close+0xce>
 8003c56:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003c5a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003c5e:	0512      	lsls	r2, r2, #20
 8003c60:	0d12      	lsrs	r2, r2, #20
 8003c62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c66:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003c6a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8003c6e:	780c      	ldrb	r4, [r1, #0]
 8003c70:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003c74:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003c78:	0512      	lsls	r2, r2, #20
 8003c7a:	0d12      	lsrs	r2, r2, #20
 8003c7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c80:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003c84:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8003c88:	780c      	ldrb	r4, [r1, #0]
 8003c8a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003c8e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003c92:	0492      	lsls	r2, r2, #18
 8003c94:	0c92      	lsrs	r2, r2, #18
 8003c96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c9e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8003ca2:	7809      	ldrb	r1, [r1, #0]
 8003ca4:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003ca8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003cac:	0512      	lsls	r2, r2, #20
 8003cae:	0d12      	lsrs	r2, r2, #20
 8003cb0:	e041      	b.n	8003d36 <HAL_PCD_EP_Close+0x196>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8003cb2:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003cb6:	0464      	lsls	r4, r4, #17
 8003cb8:	d50b      	bpl.n	8003cd2 <HAL_PCD_EP_Close+0x132>
 8003cba:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003cbe:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8003cc2:	0524      	lsls	r4, r4, #20
 8003cc4:	0d24      	lsrs	r4, r4, #20
 8003cc6:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8003cca:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003cce:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003cd2:	780c      	ldrb	r4, [r1, #0]
 8003cd4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003cd8:	0652      	lsls	r2, r2, #25
 8003cda:	d50b      	bpl.n	8003cf4 <HAL_PCD_EP_Close+0x154>
 8003cdc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003ce0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003ce4:	0512      	lsls	r2, r2, #20
 8003ce6:	0d12      	lsrs	r2, r2, #20
 8003ce8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cec:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003cf0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8003cf4:	780c      	ldrb	r4, [r1, #0]
 8003cf6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003cfa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003cfe:	0512      	lsls	r2, r2, #20
 8003d00:	0d12      	lsrs	r2, r2, #20
 8003d02:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003d06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d0a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8003d0e:	780c      	ldrb	r4, [r1, #0]
 8003d10:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003d14:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003d18:	0512      	lsls	r2, r2, #20
 8003d1a:	0d12      	lsrs	r2, r2, #20
 8003d1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d24:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8003d28:	7809      	ldrb	r1, [r1, #0]
 8003d2a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003d2e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003d32:	0492      	lsls	r2, r2, #18
 8003d34:	0c92      	lsrs	r2, r2, #18
 8003d36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d3e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8003d42:	2300      	movs	r3, #0
 8003d44:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return HAL_OK;
 8003d48:	4618      	mov	r0, r3
 8003d4a:	bd30      	pop	{r4, r5, pc}
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd); 
 8003d4c:	2002      	movs	r0, #2
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
  return HAL_OK;
}
 8003d4e:	bd30      	pop	{r4, r5, pc}

08003d50 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d50:	b570      	push	{r4, r5, r6, lr}
  
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8003d52:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8003d56:	241c      	movs	r4, #28
 8003d58:	fb04 0401 	mla	r4, r4, r1, r0
 8003d5c:	f104 05c0 	add.w	r5, r4, #192	; 0xc0
 8003d60:	606a      	str	r2, [r5, #4]
  ep->xfer_len = len;
  ep->xfer_count = 0;
 8003d62:	2200      	movs	r2, #0
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
 8003d64:	60ab      	str	r3, [r5, #8]
  ep->xfer_count = 0;
 8003d66:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
  ep->is_in = 0;
 8003d6a:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
  ep->num = ep_addr & 0x7F;
 8003d6e:	f884 10b4 	strb.w	r1, [r4, #180]	; 0xb4
   
  __HAL_LOCK(hpcd); 
 8003d72:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d062      	beq.n	8003e40 <HAL_PCD_EP_Receive+0xf0>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8003d80:	68ab      	ldr	r3, [r5, #8]
 8003d82:	f8d4 40c0 	ldr.w	r4, [r4, #192]	; 0xc0
 8003d86:	42a3      	cmp	r3, r4
    ep->xfer_len-=len; 
  }
  else
  {
    len=ep->xfer_len;
    ep->xfer_len =0;
 8003d88:	bf98      	it	ls
 8003d8a:	60aa      	strls	r2, [r5, #8]
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 8003d8c:	f04f 021c 	mov.w	r2, #28
 8003d90:	fb02 0201 	mla	r2, r2, r1, r0
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8003d94:	bf84      	itt	hi
 8003d96:	1b1b      	subhi	r3, r3, r4
 8003d98:	60ab      	strhi	r3, [r5, #8]
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 8003d9a:	f892 50be 	ldrb.w	r5, [r2, #190]	; 0xbe
 8003d9e:	bf88      	it	hi
 8003da0:	4623      	movhi	r3, r4
 8003da2:	32b0      	adds	r2, #176	; 0xb0
 8003da4:	6804      	ldr	r4, [r0, #0]
 8003da6:	b10d      	cbz	r5, 8003dac <HAL_PCD_EP_Receive+0x5c>
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len);
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003da8:	7955      	ldrb	r5, [r2, #5]
 8003daa:	bb15      	cbnz	r5, 8003df2 <HAL_PCD_EP_Receive+0xa2>
 8003dac:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
 8003db0:	7912      	ldrb	r2, [r2, #4]
 8003db2:	b2ad      	uxth	r5, r5
 8003db4:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8003db8:	2b3e      	cmp	r3, #62	; 0x3e
 8003dba:	f504 6680 	add.w	r6, r4, #1024	; 0x400
 8003dbe:	f105 0506 	add.w	r5, r5, #6
 8003dc2:	d90b      	bls.n	8003ddc <HAL_PCD_EP_Receive+0x8c>
 8003dc4:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8003dc8:	06db      	lsls	r3, r3, #27
 8003dca:	bf04      	itt	eq
 8003dcc:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 8003dd0:	b292      	uxtheq	r2, r2
 8003dd2:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8003dd6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003dda:	e006      	b.n	8003dea <HAL_PCD_EP_Receive+0x9a>
 8003ddc:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8003de0:	07db      	lsls	r3, r3, #31
 8003de2:	bf44      	itt	mi
 8003de4:	3201      	addmi	r2, #1
 8003de6:	b292      	uxthmi	r2, r2
 8003de8:	0292      	lsls	r2, r2, #10
 8003dea:	b292      	uxth	r2, r2
 8003dec:	f846 2015 	str.w	r2, [r6, r5, lsl #1]
 8003df0:	e00c      	b.n	8003e0c <HAL_PCD_EP_Receive+0xbc>
 8003df2:	2d01      	cmp	r5, #1
 8003df4:	bf01      	itttt	eq
 8003df6:	f8b4 5050 	ldrheq.w	r5, [r4, #80]	; 0x50
 8003dfa:	7912      	ldrbeq	r2, [r2, #4]
 8003dfc:	b2ad      	uxtheq	r5, r5
 8003dfe:	eb05 02c2 	addeq.w	r2, r5, r2, lsl #3
 8003e02:	bf04      	itt	eq
 8003e04:	eb04 0242 	addeq.w	r2, r4, r2, lsl #1
 8003e08:	f8c2 340c 	streq.w	r3, [r2, #1036]	; 0x40c
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8003e0c:	231c      	movs	r3, #28
 8003e0e:	fb03 0101 	mla	r1, r3, r1, r0
 8003e12:	f891 20b4 	ldrb.w	r2, [r1, #180]	; 0xb4
 8003e16:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8003e1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e22:	041b      	lsls	r3, r3, #16
 8003e24:	0c1b      	lsrs	r3, r3, #16
 8003e26:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e32:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
  
  __HAL_UNLOCK(hpcd); 
 8003e36:	2300      	movs	r3, #0
 8003e38:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	bd70      	pop	{r4, r5, r6, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
   
  __HAL_LOCK(hpcd); 
 8003e40:	2002      	movs	r0, #2
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
  
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 8003e42:	bd70      	pop	{r4, r5, r6, pc}

08003e44 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 8003e44:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003e48:	231c      	movs	r3, #28
 8003e4a:	fb03 0001 	mla	r0, r3, r1, r0
}
 8003e4e:	f8b0 00cc 	ldrh.w	r0, [r0, #204]	; 0xcc
 8003e52:	4770      	bx	lr

08003e54 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  PCD_EPTypeDef *ep;
  uint16_t pmabuffer = 0;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003e56:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8003e5a:	211c      	movs	r1, #28
 8003e5c:	fb01 0106 	mla	r1, r1, r6, r0
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e60:	4604      	mov	r4, r0
  uint16_t pmabuffer = 0;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8003e62:	f101 0038 	add.w	r0, r1, #56	; 0x38
 8003e66:	638a      	str	r2, [r1, #56]	; 0x38
  ep->xfer_len = len;
 8003e68:	6043      	str	r3, [r0, #4]
  ep->xfer_count = 0;
 8003e6a:	2200      	movs	r2, #0
  ep->is_in = 1;
 8003e6c:	2301      	movs	r3, #1
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0;
 8003e6e:	640a      	str	r2, [r1, #64]	; 0x40
  ep->is_in = 1;
 8003e70:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  ep->num = ep_addr & 0x7F;
 8003e74:	f881 6028 	strb.w	r6, [r1, #40]	; 0x28
  
  __HAL_LOCK(hpcd); 
 8003e78:	f894 5140 	ldrb.w	r5, [r4, #320]	; 0x140
 8003e7c:	429d      	cmp	r5, r3
 8003e7e:	f000 80a8 	beq.w	8003fd2 <HAL_PCD_EP_Transmit+0x17e>
 8003e82:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8003e86:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8003e88:	6845      	ldr	r5, [r0, #4]
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 8003e8a:	271c      	movs	r7, #28
 8003e8c:	fb07 4706 	mla	r7, r7, r6, r4
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd); 
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8003e90:	429d      	cmp	r5, r3
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8003e92:	bf88      	it	hi
 8003e94:	1aed      	subhi	r5, r5, r3
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 8003e96:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8003e9a:	bf86      	itte	hi
 8003e9c:	6045      	strhi	r5, [r0, #4]
 8003e9e:	461d      	movhi	r5, r3
  }
  else
  {  
    len=ep->xfer_len;
    ep->xfer_len =0;
 8003ea0:	6042      	strls	r2, [r0, #4]
 8003ea2:	b2ab      	uxth	r3, r5
 8003ea4:	f107 0228 	add.w	r2, r7, #40	; 0x28
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 8003ea8:	b989      	cbnz	r1, 8003ece <HAL_PCD_EP_Transmit+0x7a>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8003eaa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003eac:	8892      	ldrh	r2, [r2, #4]
 8003eae:	6820      	ldr	r0, [r4, #0]
 8003eb0:	f000 fbb3 	bl	800461a <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 8003eb4:	6821      	ldr	r1, [r4, #0]
 8003eb6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003eba:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 8003ebe:	b292      	uxth	r2, r2
 8003ec0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003ec4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8003ec8:	f8c3 5404 	str.w	r5, [r3, #1028]	; 0x404
 8003ecc:	e067      	b.n	8003f9e <HAL_PCD_EP_Transmit+0x14a>
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ece:	7852      	ldrb	r2, [r2, #1]
 8003ed0:	6820      	ldr	r0, [r4, #0]
 8003ed2:	bb1a      	cbnz	r2, 8003f1c <HAL_PCD_EP_Transmit+0xc8>
 8003ed4:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8003ed8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003edc:	b289      	uxth	r1, r1
 8003ede:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8003ee2:	2d3e      	cmp	r5, #62	; 0x3e
 8003ee4:	f500 6780 	add.w	r7, r0, #1024	; 0x400
 8003ee8:	f101 0106 	add.w	r1, r1, #6
 8003eec:	d90b      	bls.n	8003f06 <HAL_PCD_EP_Transmit+0xb2>
 8003eee:	f3c5 124f 	ubfx	r2, r5, #5, #16
 8003ef2:	06ed      	lsls	r5, r5, #27
 8003ef4:	bf04      	itt	eq
 8003ef6:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 8003efa:	b292      	uxtheq	r2, r2
 8003efc:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8003f00:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003f04:	e006      	b.n	8003f14 <HAL_PCD_EP_Transmit+0xc0>
 8003f06:	f3c5 024f 	ubfx	r2, r5, #1, #16
 8003f0a:	07ed      	lsls	r5, r5, #31
 8003f0c:	bf44      	itt	mi
 8003f0e:	3201      	addmi	r2, #1
 8003f10:	b292      	uxthmi	r2, r2
 8003f12:	0292      	lsls	r2, r2, #10
 8003f14:	b292      	uxth	r2, r2
 8003f16:	f847 2011 	str.w	r2, [r7, r1, lsl #1]
 8003f1a:	e00d      	b.n	8003f38 <HAL_PCD_EP_Transmit+0xe4>
 8003f1c:	2a01      	cmp	r2, #1
 8003f1e:	bf01      	itttt	eq
 8003f20:	f8b0 2050 	ldrheq.w	r2, [r0, #80]	; 0x50
 8003f24:	f897 1028 	ldrbeq.w	r1, [r7, #40]	; 0x28
 8003f28:	b292      	uxtheq	r2, r2
 8003f2a:	eb02 02c1 	addeq.w	r2, r2, r1, lsl #3
 8003f2e:	bf04      	itt	eq
 8003f30:	eb00 0242 	addeq.w	r2, r0, r2, lsl #1
 8003f34:	f8c2 540c 	streq.w	r5, [r2, #1036]	; 0x40c
    
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 8003f38:	251c      	movs	r5, #28
 8003f3a:	fb05 4206 	mla	r2, r5, r6, r4
 8003f3e:	f102 0128 	add.w	r1, r2, #40	; 0x28
 8003f42:	f892 7028 	ldrb.w	r7, [r2, #40]	; 0x28
 8003f46:	f830 7027 	ldrh.w	r7, [r0, r7, lsl #2]
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8003f4a:	fb05 4506 	mla	r5, r5, r6, r4
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
    
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 8003f4e:	067f      	lsls	r7, r7, #25
    {
      pmabuffer = ep->pmaaddr1;
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
 8003f50:	bf54      	ite	pl
 8003f52:	88ca      	ldrhpl	r2, [r1, #6]
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
    
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
    {
      pmabuffer = ep->pmaaddr1;
 8003f54:	8e12      	ldrhmi	r2, [r2, #48]	; 0x30
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8003f56:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8003f58:	f000 fb5f 	bl	800461a <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
 8003f5c:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8003f60:	6822      	ldr	r2, [r4, #0]
 8003f62:	b963      	cbnz	r3, 8003f7e <HAL_PCD_EP_Transmit+0x12a>
 8003f64:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8003f68:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003f6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f70:	051b      	lsls	r3, r3, #20
 8003f72:	0d1b      	lsrs	r3, r3, #20
 8003f74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f7c:	e00d      	b.n	8003f9a <HAL_PCD_EP_Transmit+0x146>
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d10d      	bne.n	8003f9e <HAL_PCD_EP_Transmit+0x14a>
 8003f82:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8003f86:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003f8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f8e:	051b      	lsls	r3, r3, #20
 8003f90:	0d1b      	lsrs	r3, r3, #20
 8003f92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f9a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003f9e:	231c      	movs	r3, #28
 8003fa0:	fb03 4606 	mla	r6, r3, r6, r4
 8003fa4:	6822      	ldr	r2, [r4, #0]
 8003fa6:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8003faa:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fb6:	041b      	lsls	r3, r3, #16
 8003fb8:	0c1b      	lsrs	r3, r3, #16
 8003fba:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8003fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  
  __HAL_UNLOCK(hpcd);
 8003fc6:	2000      	movs	r0, #0
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003fc8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  
  __HAL_UNLOCK(hpcd);
 8003fcc:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
     
  return HAL_OK;
 8003fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd); 
 8003fd2:	2002      	movs	r0, #2
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
  
  __HAL_UNLOCK(hpcd);
     
  return HAL_OK;
}
 8003fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003fd6 <HAL_PCD_IRQHandler>:
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
  uint32_t wInterrupt_Mask = 0;
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8003fd6:	6803      	ldr	r3, [r0, #0]
 8003fd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003fdc:	b21b      	sxth	r3, r3
 8003fde:	2b00      	cmp	r3, #0
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003fe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fe2:	4604      	mov	r4, r0
  uint32_t wInterrupt_Mask = 0;
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8003fe4:	db11      	blt.n	800400a <HAL_PCD_IRQHandler+0x34>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003fec:	0552      	lsls	r2, r2, #21
 8003fee:	f140 81e7 	bpl.w	80043c0 <HAL_PCD_IRQHandler+0x3ea>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003ff2:	f64f 32ff 	movw	r2, #64511	; 0xfbff
    HAL_PCD_ResetCallback(hpcd);
 8003ff6:	4620      	mov	r0, r4
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003ff8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8003ffc:	f001 fa98 	bl	8005530 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 8004000:	4620      	mov	r0, r4
 8004002:	2100      	movs	r1, #0
 8004004:	f7ff fc1a 	bl	800383c <HAL_PCD_SetAddress>
 8004008:	e1da      	b.n	80043c0 <HAL_PCD_IRQHandler+0x3ea>
{
  PCD_EPTypeDef *ep;
  uint16_t count=0;
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0;
 800400a:	2300      	movs	r3, #0
 800400c:	f8ad 3006 	strh.w	r3, [sp, #6]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8004010:	6820      	ldr	r0, [r4, #0]
 8004012:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8004016:	b29b      	uxth	r3, r3
 8004018:	0419      	lsls	r1, r3, #16
 800401a:	f8ad 3004 	strh.w	r3, [sp, #4]
 800401e:	d5e2      	bpl.n	8003fe6 <HAL_PCD_IRQHandler+0x10>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004020:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    
    if (EPindex == 0)
 8004024:	f015 050f 	ands.w	r5, r5, #15
 8004028:	f040 80b7 	bne.w	800419a <HAL_PCD_IRQHandler+0x1c4>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 800402c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004030:	8803      	ldrh	r3, [r0, #0]
    if (EPindex == 0)
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8004032:	f001 0110 	and.w	r1, r1, #16
 8004036:	b289      	uxth	r1, r1
 8004038:	bb59      	cbnz	r1, 8004092 <HAL_PCD_IRQHandler+0xbc>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800403a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800403e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004042:	041b      	lsls	r3, r3, #16
 8004044:	0c1b      	lsrs	r3, r3, #16
 8004046:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004048:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800404c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8004050:	b29b      	uxth	r3, r3
 8004052:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004056:	eb00 0043 	add.w	r0, r0, r3, lsl #1
        ep->xfer_buff += ep->xfer_count;
 800405a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800405c:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
 8004060:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004064:	6423      	str	r3, [r4, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8004066:	4413      	add	r3, r2
 8004068:	63a3      	str	r3, [r4, #56]	; 0x38
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0);
 800406a:	4620      	mov	r0, r4
 800406c:	f001 fa54 	bl	8005518 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 8004070:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0cb      	beq.n	8004010 <HAL_PCD_IRQHandler+0x3a>
 8004078:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800407a:	2a00      	cmp	r2, #0
 800407c:	d1c8      	bne.n	8004010 <HAL_PCD_IRQHandler+0x3a>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 800407e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004082:	6821      	ldr	r1, [r4, #0]
 8004084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004088:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0;
 800408c:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8004090:	e7be      	b.n	8004010 <HAL_PCD_IRQHandler+0x3a>
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004092:	b29b      	uxth	r3, r3
 8004094:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        if ((wEPVal & USB_EP_SETUP) != 0)
 8004098:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800409c:	051f      	lsls	r7, r3, #20
 800409e:	d51f      	bpl.n	80040e0 <HAL_PCD_IRQHandler+0x10a>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80040a0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80040a4:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80040ae:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80040b2:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
        
        if ((wEPVal & USB_EP_SETUP) != 0)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80040b6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80040ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040be:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80040c2:	f504 71a2 	add.w	r1, r4, #324	; 0x144
 80040c6:	f000 fabf 	bl	8004648 <PCD_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80040ca:	6822      	ldr	r2, [r4, #0]
 80040cc:	8813      	ldrh	r3, [r2, #0]
 80040ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d2:	051b      	lsls	r3, r3, #20
 80040d4:	0d1b      	lsrs	r3, r3, #20
 80040d6:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 80040d8:	4620      	mov	r0, r4
 80040da:	f001 fa0d 	bl	80054f8 <HAL_PCD_SetupStageCallback>
 80040de:	e797      	b.n	8004010 <HAL_PCD_IRQHandler+0x3a>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 80040e0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80040e4:	b21b      	sxth	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	da92      	bge.n	8004010 <HAL_PCD_IRQHandler+0x3a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80040ea:	8803      	ldrh	r3, [r0, #0]
 80040ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f0:	051b      	lsls	r3, r3, #20
 80040f2:	0d1b      	lsrs	r3, r3, #20
 80040f4:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80040f6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80040fa:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 80040fe:	b29b      	uxth	r3, r3
 8004100:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004104:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004108:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800410c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004110:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          
          if (ep->xfer_count != 0)
 8004114:	b163      	cbz	r3, 8004130 <HAL_PCD_IRQHandler+0x15a>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8004116:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
 800411a:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 800411e:	f000 fa93 	bl	8004648 <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8004122:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8004126:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800412a:	4413      	add	r3, r2
 800412c:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 8004130:	4620      	mov	r0, r4
 8004132:	2100      	movs	r1, #0
 8004134:	f001 f9e7 	bl	8005506 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004138:	6822      	ldr	r2, [r4, #0]
 800413a:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
 800413e:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8004142:	2d3e      	cmp	r5, #62	; 0x3e
 8004144:	b289      	uxth	r1, r1
 8004146:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 800414a:	f101 0106 	add.w	r1, r1, #6
 800414e:	d90b      	bls.n	8004168 <HAL_PCD_IRQHandler+0x192>
 8004150:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8004154:	06ee      	lsls	r6, r5, #27
 8004156:	bf04      	itt	eq
 8004158:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 800415c:	b29b      	uxtheq	r3, r3
 800415e:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 8004162:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004166:	e006      	b.n	8004176 <HAL_PCD_IRQHandler+0x1a0>
 8004168:	f3c5 034f 	ubfx	r3, r5, #1, #16
 800416c:	07ed      	lsls	r5, r5, #31
 800416e:	bf44      	itt	mi
 8004170:	3301      	addmi	r3, #1
 8004172:	b29b      	uxthmi	r3, r3
 8004174:	029b      	lsls	r3, r3, #10
 8004176:	b29b      	uxth	r3, r3
 8004178:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800417c:	8813      	ldrh	r3, [r2, #0]
 800417e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004186:	041b      	lsls	r3, r3, #16
 8004188:	0c1b      	lsrs	r3, r3, #16
 800418a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800418e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004196:	8013      	strh	r3, [r2, #0]
 8004198:	e73a      	b.n	8004010 <HAL_PCD_IRQHandler+0x3a>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 800419a:	b22f      	sxth	r7, r5
 800419c:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 80041a6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80041aa:	b21b      	sxth	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f280 8084 	bge.w	80042ba <HAL_PCD_IRQHandler+0x2e4>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 80041b2:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 80041b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ba:	051b      	lsls	r3, r3, #20
        ep = &hpcd->OUT_ep[EPindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 80041bc:	221c      	movs	r2, #28
 80041be:	fb02 4205 	mla	r2, r2, r5, r4
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
      if ((wEPVal & USB_EP_CTR_RX) != 0)
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 80041c2:	0d1b      	lsrs	r3, r3, #20
 80041c4:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        ep = &hpcd->OUT_ep[EPindex];
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 80041c8:	f102 0cb8 	add.w	ip, r2, #184	; 0xb8
 80041cc:	f89c 3006 	ldrb.w	r3, [ip, #6]
 80041d0:	f102 0eb0 	add.w	lr, r2, #176	; 0xb0
 80041d4:	b9b3      	cbnz	r3, 8004204 <HAL_PCD_IRQHandler+0x22e>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80041d6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80041da:	f89e 1004 	ldrb.w	r1, [lr, #4]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80041e4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80041e8:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 80041ec:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0)
 80041f0:	2e00      	cmp	r6, #0
 80041f2:	d040      	beq.n	8004276 <HAL_PCD_IRQHandler+0x2a0>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80041f4:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
 80041f8:	f8be 2008 	ldrh.w	r2, [lr, #8]
 80041fc:	4633      	mov	r3, r6
 80041fe:	f000 fa23 	bl	8004648 <PCD_ReadPMA>
 8004202:	e038      	b.n	8004276 <HAL_PCD_IRQHandler+0x2a0>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8004204:	f89e 6004 	ldrb.w	r6, [lr, #4]
 8004208:	b233      	sxth	r3, r6
 800420a:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800420e:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8004212:	f413 4f80 	tst.w	r3, #16384	; 0x4000
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004216:	b289      	uxth	r1, r1
 8004218:	f04f 0308 	mov.w	r3, #8
 800421c:	fb13 1306 	smlabb	r3, r3, r6, r1
 8004220:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8004224:	d009      	beq.n	800423a <HAL_PCD_IRQHandler+0x264>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004226:	f8d3 6404 	ldr.w	r6, [r3, #1028]	; 0x404
 800422a:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 800422e:	b186      	cbz	r6, 8004252 <HAL_PCD_IRQHandler+0x27c>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004230:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
 8004234:	f8be 200a 	ldrh.w	r2, [lr, #10]
 8004238:	e008      	b.n	800424c <HAL_PCD_IRQHandler+0x276>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800423a:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 800423e:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 8004242:	b136      	cbz	r6, 8004252 <HAL_PCD_IRQHandler+0x27c>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004244:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
 8004248:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 800424c:	4633      	mov	r3, r6
 800424e:	f000 f9fb 	bl	8004648 <PCD_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8004252:	231c      	movs	r3, #28
 8004254:	fb03 4305 	mla	r3, r3, r5, r4
 8004258:	6822      	ldr	r2, [r4, #0]
 800425a:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 800425e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8004262:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004266:	051b      	lsls	r3, r3, #20
 8004268:	0d1b      	lsrs	r3, r3, #20
 800426a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800426e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004272:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8004276:	211c      	movs	r1, #28
 8004278:	fb01 4105 	mla	r1, r1, r5, r4
 800427c:	f8d1 30cc 	ldr.w	r3, [r1, #204]	; 0xcc
        ep->xfer_buff+=count;
 8004280:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8004284:	4433      	add	r3, r6
 8004286:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
        ep->xfer_buff+=count;
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 800428a:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
        ep->xfer_buff+=count;
 800428e:	4432      	add	r2, r6
 8004290:	f8c1 20c4 	str.w	r2, [r1, #196]	; 0xc4
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8004294:	b11b      	cbz	r3, 800429e <HAL_PCD_IRQHandler+0x2c8>
 8004296:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 800429a:	4286      	cmp	r6, r0
 800429c:	d208      	bcs.n	80042b0 <HAL_PCD_IRQHandler+0x2da>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800429e:	231c      	movs	r3, #28
 80042a0:	fb03 4305 	mla	r3, r3, r5, r4
 80042a4:	4620      	mov	r0, r4
 80042a6:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 80042aa:	f001 f92c 	bl	8005506 <HAL_PCD_DataOutStageCallback>
 80042ae:	e004      	b.n	80042ba <HAL_PCD_IRQHandler+0x2e4>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80042b0:	4620      	mov	r0, r4
 80042b2:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
 80042b6:	f7ff fd4b 	bl	8003d50 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 80042ba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80042be:	0618      	lsls	r0, r3, #24
 80042c0:	f57f aea6 	bpl.w	8004010 <HAL_PCD_IRQHandler+0x3a>
      {
        ep = &hpcd->IN_ep[EPindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 80042c4:	6820      	ldr	r0, [r4, #0]
 80042c6:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 80042ca:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80042ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d2:	041b      	lsls	r3, r3, #16
 80042d4:	0c1b      	lsrs	r3, r3, #16
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 80042d6:	221c      	movs	r2, #28
 80042d8:	fb02 4205 	mla	r2, r2, r5, r4
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[EPindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 80042dc:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 80042e0:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
 80042e4:	f102 0628 	add.w	r6, r2, #40	; 0x28
 80042e8:	b9a3      	cbnz	r3, 8004314 <HAL_PCD_IRQHandler+0x33e>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80042ea:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80042ee:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80042f8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80042fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004300:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004304:	6413      	str	r3, [r2, #64]	; 0x40
          if (ep->xfer_count != 0)
 8004306:	2b00      	cmp	r3, #0
 8004308:	d03a      	beq.n	8004380 <HAL_PCD_IRQHandler+0x3aa>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800430a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800430c:	88b2      	ldrh	r2, [r6, #4]
 800430e:	f000 f984 	bl	800461a <PCD_WritePMA>
 8004312:	e035      	b.n	8004380 <HAL_PCD_IRQHandler+0x3aa>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8004314:	f892 7028 	ldrb.w	r7, [r2, #40]	; 0x28
 8004318:	b23b      	sxth	r3, r7
 800431a:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800431e:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8004322:	f013 0f40 	tst.w	r3, #64	; 0x40
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004326:	b289      	uxth	r1, r1
 8004328:	f04f 0308 	mov.w	r3, #8
 800432c:	fb13 1307 	smlabb	r3, r3, r7, r1
 8004330:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8004334:	d008      	beq.n	8004348 <HAL_PCD_IRQHandler+0x372>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004336:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800433a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800433e:	6413      	str	r3, [r2, #64]	; 0x40
            if (ep->xfer_count != 0)
 8004340:	b163      	cbz	r3, 800435c <HAL_PCD_IRQHandler+0x386>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8004342:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8004344:	88f2      	ldrh	r2, [r6, #6]
 8004346:	e007      	b.n	8004358 <HAL_PCD_IRQHandler+0x382>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004348:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800434c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004350:	6413      	str	r3, [r2, #64]	; 0x40
            if (ep->xfer_count != 0)
 8004352:	b11b      	cbz	r3, 800435c <HAL_PCD_IRQHandler+0x386>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8004354:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8004356:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8004358:	f000 f95f 	bl	800461a <PCD_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 800435c:	231c      	movs	r3, #28
 800435e:	fb03 4305 	mla	r3, r3, r5, r4
 8004362:	6822      	ldr	r2, [r4, #0]
 8004364:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8004368:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800436c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004370:	051b      	lsls	r3, r3, #20
 8004372:	0d1b      	lsrs	r3, r3, #20
 8004374:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800437c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004380:	6821      	ldr	r1, [r4, #0]
 8004382:	231c      	movs	r3, #28
 8004384:	fb03 4505 	mla	r5, r3, r5, r4
 8004388:	f8b1 2050 	ldrh.w	r2, [r1, #80]	; 0x50
 800438c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8004390:	b292      	uxth	r2, r2
 8004392:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004396:	eb01 0343 	add.w	r3, r1, r3, lsl #1
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800439a:	4620      	mov	r0, r4
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800439c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
        ep->xfer_buff+=ep->xfer_count;
 80043a0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80043a2:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80043a6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80043aa:	642a      	str	r2, [r5, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 80043ac:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 80043ae:	6beb      	ldr	r3, [r5, #60]	; 0x3c
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
        ep->xfer_buff+=ep->xfer_count;
 80043b0:	63aa      	str	r2, [r5, #56]	; 0x38
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 80043b2:	b913      	cbnz	r3, 80043ba <HAL_PCD_IRQHandler+0x3e4>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80043b4:	f001 f8b0 	bl	8005518 <HAL_PCD_DataInStageCallback>
 80043b8:	e62a      	b.n	8004010 <HAL_PCD_IRQHandler+0x3a>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80043ba:	f7ff fd4b 	bl	8003e54 <HAL_PCD_EP_Transmit>
 80043be:	e627      	b.n	8004010 <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
    HAL_PCD_ResetCallback(hpcd);
    HAL_PCD_SetAddress(hpcd, 0);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVRM))
 80043c0:	6823      	ldr	r3, [r4, #0]
 80043c2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80043c6:	0452      	lsls	r2, r2, #17
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVRM);    
 80043c8:	bf44      	itt	mi
 80043ca:	f64b 72ff 	movwmi	r2, #49151	; 0xbfff
 80043ce:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 80043d2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80043d6:	0497      	lsls	r7, r2, #18
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 80043d8:	bf44      	itt	mi
 80043da:	f64d 72ff 	movwmi	r2, #57343	; 0xdfff
 80043de:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 80043e2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80043e6:	04d6      	lsls	r6, r2, #19
 80043e8:	d513      	bpl.n	8004412 <HAL_PCD_IRQHandler+0x43c>
  {  
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 80043ea:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80043ee:	f022 0204 	bic.w	r2, r2, #4
 80043f2:	0412      	lsls	r2, r2, #16
 80043f4:	0c12      	lsrs	r2, r2, #16
 80043f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 80043fa:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
 80043fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 8004402:	4620      	mov	r0, r4
 8004404:	f001 f8a2 	bl	800554c <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8004408:	6823      	ldr	r3, [r4, #0]
 800440a:	f64e 72ff 	movw	r2, #61439	; 0xefff
 800440e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8004418:	0515      	lsls	r5, r2, #20
 800441a:	d518      	bpl.n	800444e <HAL_PCD_IRQHandler+0x478>
  {    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 800441c:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 8004420:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8004424:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8004428:	b292      	uxth	r2, r2
 800442a:	f042 0208 	orr.w	r2, r2, #8
 800442e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8004432:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8004436:	b292      	uxth	r2, r2
 8004438:	f042 0204 	orr.w	r2, r2, #4
 800443c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 8004440:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004444:	04d8      	lsls	r0, r3, #19
 8004446:	d402      	bmi.n	800444e <HAL_PCD_IRQHandler+0x478>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8004448:	4620      	mov	r0, r4
 800444a:	f001 f87e 	bl	800554a <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8004454:	0591      	lsls	r1, r2, #22
 8004456:	d506      	bpl.n	8004466 <HAL_PCD_IRQHandler+0x490>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8004458:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 800445c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8004460:	4620      	mov	r0, r4
 8004462:	f001 f861 	bl	8005528 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800446c:	05d2      	lsls	r2, r2, #23
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 800446e:	bf44      	itt	mi
 8004470:	f64f 62ff 	movwmi	r2, #65279	; 0xfeff
 8004474:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  }
}
 8004478:	b003      	add	sp, #12
 800447a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800447c <HAL_PCD_EP_SetStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 800447c:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8004480:	2b01      	cmp	r3, #1
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004482:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8004484:	d049      	beq.n	800451a <HAL_PCD_EP_SetStall+0x9e>
   
  if ((0x80 & ep_addr) == 0x80)
 8004486:	b2cc      	uxtb	r4, r1
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8004488:	2301      	movs	r3, #1
 800448a:	221c      	movs	r2, #28
 800448c:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   
  if ((0x80 & ep_addr) == 0x80)
 8004490:	f014 0f80 	tst.w	r4, #128	; 0x80
 8004494:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004498:	bf15      	itete	ne
 800449a:	fb02 0203 	mlane	r2, r2, r3, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800449e:	fb02 0201 	mlaeq	r2, r2, r1, r0
   
  __HAL_LOCK(hpcd); 
   
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80044a2:	3228      	addne	r2, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80044a4:	32b4      	addeq	r2, #180	; 0xb4
  }
  
  ep->is_stall = 1;
 80044a6:	2101      	movs	r1, #1
 80044a8:	7091      	strb	r1, [r2, #2]
  ep->num   = ep_addr & 0x7F;
 80044aa:	b2d9      	uxtb	r1, r3
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80044ac:	09e3      	lsrs	r3, r4, #7
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
 80044ae:	7011      	strb	r1, [r2, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80044b0:	7053      	strb	r3, [r2, #1]
 80044b2:	6802      	ldr	r2, [r0, #0]
  
  if (ep->num == 0)
 80044b4:	b979      	cbnz	r1, 80044d6 <HAL_PCD_EP_SetStall+0x5a>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 80044b6:	8813      	ldrh	r3, [r2, #0]
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044c2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80044c6:	f083 0310 	eor.w	r3, r3, #16
 80044ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044d2:	8013      	strh	r3, [r2, #0]
 80044d4:	e01c      	b.n	8004510 <HAL_PCD_EP_SetStall+0x94>
 80044d6:	b209      	sxth	r1, r1
  }
  else
  {
    if (ep->is_in)
 80044d8:	b153      	cbz	r3, 80044f0 <HAL_PCD_EP_SetStall+0x74>
    {
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 80044da:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80044de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044e6:	041b      	lsls	r3, r3, #16
 80044e8:	0c1b      	lsrs	r3, r3, #16
 80044ea:	f083 0310 	eor.w	r3, r3, #16
 80044ee:	e009      	b.n	8004504 <HAL_PCD_EP_SetStall+0x88>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL);
 80044f0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80044f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fc:	041b      	lsls	r3, r3, #16
 80044fe:	0c1b      	lsrs	r3, r3, #16
 8004500:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800450c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    }
  }
  __HAL_UNLOCK(hpcd); 
 8004510:	2300      	movs	r3, #0
 8004512:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 8004516:	4618      	mov	r0, r3
 8004518:	bd10      	pop	{r4, pc}
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 800451a:	2002      	movs	r0, #2
    }
  }
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 800451c:	bd10      	pop	{r4, pc}

0800451e <HAL_PCD_EP_ClrStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 800451e:	b2cb      	uxtb	r3, r1
 8004520:	f013 0f80 	tst.w	r3, #128	; 0x80
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004524:	b510      	push	{r4, lr}
 8004526:	f04f 021c 	mov.w	r2, #28
 800452a:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800452e:	bf15      	itete	ne
 8004530:	fb02 0104 	mlane	r1, r2, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004534:	fb02 0101 	mlaeq	r1, r2, r1, r0
{
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004538:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800453a:	31b4      	addeq	r1, #180	; 0xb4
  }
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800453c:	09db      	lsrs	r3, r3, #7
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 0;
 800453e:	2200      	movs	r2, #0
 8004540:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8004542:	700c      	strb	r4, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8004544:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 8004546:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 800454a:	2b01      	cmp	r3, #1
 800454c:	d049      	beq.n	80045e2 <HAL_PCD_EP_ClrStall+0xc4>
 800454e:	2301      	movs	r3, #1
 8004550:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 8004554:	780c      	ldrb	r4, [r1, #0]
  
  if (ep->is_in)
 8004556:	784b      	ldrb	r3, [r1, #1]
 8004558:	6802      	ldr	r2, [r0, #0]
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800455a:	b224      	sxth	r4, r4
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
  
  if (ep->is_in)
 800455c:	b1db      	cbz	r3, 8004596 <HAL_PCD_EP_ClrStall+0x78>
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800455e:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8004562:	065b      	lsls	r3, r3, #25
 8004564:	d50b      	bpl.n	800457e <HAL_PCD_EP_ClrStall+0x60>
 8004566:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 800456a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800456e:	051b      	lsls	r3, r3, #20
 8004570:	0d1b      	lsrs	r3, r3, #20
 8004572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004576:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800457a:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800457e:	7809      	ldrb	r1, [r1, #0]
 8004580:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8004584:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800458c:	041b      	lsls	r3, r3, #16
 800458e:	0c1b      	lsrs	r3, r3, #16
 8004590:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8004594:	e01a      	b.n	80045cc <HAL_PCD_EP_ClrStall+0xae>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8004596:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 800459a:	045b      	lsls	r3, r3, #17
 800459c:	d50b      	bpl.n	80045b6 <HAL_PCD_EP_ClrStall+0x98>
 800459e:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 80045a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045a6:	051b      	lsls	r3, r3, #20
 80045a8:	0d1b      	lsrs	r3, r3, #20
 80045aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045b2:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 80045b6:	7809      	ldrb	r1, [r1, #0]
 80045b8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80045bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c4:	041b      	lsls	r3, r3, #16
 80045c6:	0c1b      	lsrs	r3, r3, #16
 80045c8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80045cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d4:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  }
  __HAL_UNLOCK(hpcd); 
 80045d8:	2300      	movs	r3, #0
 80045da:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
    
  return HAL_OK;
 80045de:	4618      	mov	r0, r3
 80045e0:	bd10      	pop	{r4, pc}
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
 80045e2:	2002      	movs	r0, #2
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
  }
  __HAL_UNLOCK(hpcd); 
    
  return HAL_OK;
}
 80045e4:	bd10      	pop	{r4, pc}

080045e6 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 80045e6:	f011 0f80 	tst.w	r1, #128	; 0x80
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 80045ea:	b530      	push	{r4, r5, lr}
 80045ec:	f04f 051c 	mov.w	r5, #28
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80045f0:	bf1b      	ittet	ne
 80045f2:	f001 047f 	andne.w	r4, r1, #127	; 0x7f
 80045f6:	fb05 0004 	mlane	r0, r5, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045fa:	fb05 0001 	mlaeq	r0, r5, r1, r0
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80045fe:	3028      	addne	r0, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004600:	bf08      	it	eq
 8004602:	30b4      	addeq	r0, #180	; 0xb4
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004604:	b912      	cbnz	r2, 800460c <HAL_PCDEx_PMAConfig+0x26>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
 8004606:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8004608:	8083      	strh	r3, [r0, #4]
 800460a:	e004      	b.n	8004616 <HAL_PCDEx_PMAConfig+0x30>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 800460c:	2201      	movs	r2, #1
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 800460e:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8004610:	0c1b      	lsrs	r3, r3, #16
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8004612:	7282      	strb	r2, [r0, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8004614:	8103      	strh	r3, [r0, #8]
  }
  
  return HAL_OK; 
}
 8004616:	2000      	movs	r0, #0
 8004618:	bd30      	pop	{r4, r5, pc}

0800461a <PCD_WritePMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800461a:	3301      	adds	r3, #1
 800461c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004620:	b530      	push	{r4, r5, lr}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8004622:	105b      	asrs	r3, r3, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8004624:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 8004628:	2400      	movs	r4, #0
 800462a:	429c      	cmp	r4, r3
 800462c:	f101 0102 	add.w	r1, r1, #2
 8004630:	d009      	beq.n	8004646 <PCD_WritePMA+0x2c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004632:	f811 5c01 	ldrb.w	r5, [r1, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8004636:	f811 0c02 	ldrb.w	r0, [r1, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800463a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
    *pdwVal++ = temp2;
 800463e:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8004642:	3401      	adds	r4, #1
 8004644:	e7f1      	b.n	800462a <PCD_WritePMA+0x10>
    pdwVal++;
    pbUsrBuf++;
  }
}
 8004646:	bd30      	pop	{r4, r5, pc}

08004648 <PCD_ReadPMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8004648:	3301      	adds	r3, #1
 800464a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800464e:	b510      	push	{r4, lr}
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8004650:	105b      	asrs	r3, r3, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8004652:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 8004656:	2400      	movs	r4, #0
 8004658:	429c      	cmp	r4, r3
 800465a:	d005      	beq.n	8004668 <PCD_ReadPMA+0x20>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800465c:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8004660:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 8004664:	3401      	adds	r4, #1
 8004666:	e7f7      	b.n	8004658 <PCD_ReadPMA+0x10>
    pbUsrBuf++;
  }
}
 8004668:	bd10      	pop	{r4, pc}

0800466a <HAL_PCDEx_SetConnectionState>:
  * @param  hpcd: PCD handle
  * @param  state: Device state
  * @retval None
  */
 __weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 800466a:	4770      	bx	lr

0800466c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800466c:	4770      	bx	lr
	...

08004670 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004670:	4a2a      	ldr	r2, [pc, #168]	; (800471c <TIM_Base_SetConfig+0xac>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8004672:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004674:	4290      	cmp	r0, r2
 8004676:	d00e      	beq.n	8004696 <TIM_Base_SetConfig+0x26>
 8004678:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800467c:	d00b      	beq.n	8004696 <TIM_Base_SetConfig+0x26>
 800467e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004682:	4290      	cmp	r0, r2
 8004684:	d007      	beq.n	8004696 <TIM_Base_SetConfig+0x26>
 8004686:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800468a:	4290      	cmp	r0, r2
 800468c:	d003      	beq.n	8004696 <TIM_Base_SetConfig+0x26>
 800468e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8004692:	4290      	cmp	r0, r2
 8004694:	d115      	bne.n	80046c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8004696:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800469c:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800469e:	4a1f      	ldr	r2, [pc, #124]	; (800471c <TIM_Base_SetConfig+0xac>)
 80046a0:	4290      	cmp	r0, r2
 80046a2:	d019      	beq.n	80046d8 <TIM_Base_SetConfig+0x68>
 80046a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80046a8:	d016      	beq.n	80046d8 <TIM_Base_SetConfig+0x68>
 80046aa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80046ae:	4290      	cmp	r0, r2
 80046b0:	d012      	beq.n	80046d8 <TIM_Base_SetConfig+0x68>
 80046b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046b6:	4290      	cmp	r0, r2
 80046b8:	d00e      	beq.n	80046d8 <TIM_Base_SetConfig+0x68>
 80046ba:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80046be:	4290      	cmp	r0, r2
 80046c0:	d00a      	beq.n	80046d8 <TIM_Base_SetConfig+0x68>
 80046c2:	4a17      	ldr	r2, [pc, #92]	; (8004720 <TIM_Base_SetConfig+0xb0>)
 80046c4:	4290      	cmp	r0, r2
 80046c6:	d007      	beq.n	80046d8 <TIM_Base_SetConfig+0x68>
 80046c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046cc:	4290      	cmp	r0, r2
 80046ce:	d003      	beq.n	80046d8 <TIM_Base_SetConfig+0x68>
 80046d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046d4:	4290      	cmp	r0, r2
 80046d6:	d103      	bne.n	80046e0 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046d8:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046de:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 80046e0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046e2:	688b      	ldr	r3, [r1, #8]
 80046e4:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80046e6:	680b      	ldr	r3, [r1, #0]
 80046e8:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80046ea:	4b0c      	ldr	r3, [pc, #48]	; (800471c <TIM_Base_SetConfig+0xac>)
 80046ec:	4298      	cmp	r0, r3
 80046ee:	d00f      	beq.n	8004710 <TIM_Base_SetConfig+0xa0>
 80046f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f4:	4298      	cmp	r0, r3
 80046f6:	d00b      	beq.n	8004710 <TIM_Base_SetConfig+0xa0>
 80046f8:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80046fc:	4298      	cmp	r0, r3
 80046fe:	d007      	beq.n	8004710 <TIM_Base_SetConfig+0xa0>
 8004700:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004704:	4298      	cmp	r0, r3
 8004706:	d003      	beq.n	8004710 <TIM_Base_SetConfig+0xa0>
 8004708:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800470c:	4298      	cmp	r0, r3
 800470e:	d101      	bne.n	8004714 <TIM_Base_SetConfig+0xa4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004710:	690b      	ldr	r3, [r1, #16]
 8004712:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8004714:	2301      	movs	r3, #1
 8004716:	6143      	str	r3, [r0, #20]
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	40012c00 	.word	0x40012c00
 8004720:	40014000 	.word	0x40014000

08004724 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim: TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8004724:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004726:	4604      	mov	r4, r0
 8004728:	b180      	cbz	r0, 800474c <HAL_TIM_Base_Init+0x28>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800472a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800472e:	b90b      	cbnz	r3, 8004734 <HAL_TIM_Base_Init+0x10>
  {  
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004730:	f7ff ff9c 	bl	800466c <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004734:	2302      	movs	r3, #2
 8004736:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800473a:	6820      	ldr	r0, [r4, #0]
 800473c:	1d21      	adds	r1, r4, #4
 800473e:	f7ff ff97 	bl	8004670 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004742:	2301      	movs	r3, #1
 8004744:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8004748:	2000      	movs	r0, #0
 800474a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 800474c:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 800474e:	bd10      	pop	{r4, pc}

08004750 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004750:	6a03      	ldr	r3, [r0, #32]
 8004752:	f023 0301 	bic.w	r3, r3, #1
 8004756:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004758:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800475a:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800475c:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800475e:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004760:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004762:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8004766:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800476a:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800476c:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800476e:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004772:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004774:	4d1b      	ldr	r5, [pc, #108]	; (80047e4 <TIM_OC1_SetConfig+0x94>)
 8004776:	42a8      	cmp	r0, r5
 8004778:	d00f      	beq.n	800479a <TIM_OC1_SetConfig+0x4a>
 800477a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800477e:	42a8      	cmp	r0, r5
 8004780:	d00b      	beq.n	800479a <TIM_OC1_SetConfig+0x4a>
 8004782:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8004786:	42a8      	cmp	r0, r5
 8004788:	d007      	beq.n	800479a <TIM_OC1_SetConfig+0x4a>
 800478a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800478e:	42a8      	cmp	r0, r5
 8004790:	d003      	beq.n	800479a <TIM_OC1_SetConfig+0x4a>
 8004792:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004796:	42a8      	cmp	r0, r5
 8004798:	d11e      	bne.n	80047d8 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800479a:	68cd      	ldr	r5, [r1, #12]
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800479c:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047a0:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80047a2:	4d10      	ldr	r5, [pc, #64]	; (80047e4 <TIM_OC1_SetConfig+0x94>)
 80047a4:	42a8      	cmp	r0, r5
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047a6:	f023 0304 	bic.w	r3, r3, #4
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80047aa:	d00f      	beq.n	80047cc <TIM_OC1_SetConfig+0x7c>
 80047ac:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80047b0:	42a8      	cmp	r0, r5
 80047b2:	d00b      	beq.n	80047cc <TIM_OC1_SetConfig+0x7c>
 80047b4:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80047b8:	42a8      	cmp	r0, r5
 80047ba:	d007      	beq.n	80047cc <TIM_OC1_SetConfig+0x7c>
 80047bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80047c0:	42a8      	cmp	r0, r5
 80047c2:	d003      	beq.n	80047cc <TIM_OC1_SetConfig+0x7c>
 80047c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80047c8:	42a8      	cmp	r0, r5
 80047ca:	d105      	bne.n	80047d8 <TIM_OC1_SetConfig+0x88>
 80047cc:	698e      	ldr	r6, [r1, #24]
 80047ce:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80047d4:	4335      	orrs	r5, r6
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047d6:	432a      	orrs	r2, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047d8:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047da:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047dc:	6184      	str	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047de:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80047e0:	6203      	str	r3, [r0, #32]
 80047e2:	bd70      	pop	{r4, r5, r6, pc}
 80047e4:	40012c00 	.word	0x40012c00

080047e8 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047e8:	6a03      	ldr	r3, [r0, #32]
 80047ea:	f023 0310 	bic.w	r3, r3, #16
 80047ee:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047f0:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047f2:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80047f4:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047f6:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80047f8:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047fa:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80047fe:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004802:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8004806:	688d      	ldr	r5, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004808:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 800480c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004810:	4d16      	ldr	r5, [pc, #88]	; (800486c <TIM_OC2_SetConfig+0x84>)
 8004812:	42a8      	cmp	r0, r5
 8004814:	d003      	beq.n	800481e <TIM_OC2_SetConfig+0x36>
 8004816:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800481a:	42a8      	cmp	r0, r5
 800481c:	d10d      	bne.n	800483a <TIM_OC2_SetConfig+0x52>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 800481e:	68cd      	ldr	r5, [r1, #12]
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004820:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8004824:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004828:	4d10      	ldr	r5, [pc, #64]	; (800486c <TIM_OC2_SetConfig+0x84>)
 800482a:	42a8      	cmp	r0, r5
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800482c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004830:	d00e      	beq.n	8004850 <TIM_OC2_SetConfig+0x68>
 8004832:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004836:	42a8      	cmp	r0, r5
 8004838:	d00a      	beq.n	8004850 <TIM_OC2_SetConfig+0x68>
 800483a:	4d0d      	ldr	r5, [pc, #52]	; (8004870 <TIM_OC2_SetConfig+0x88>)
 800483c:	42a8      	cmp	r0, r5
 800483e:	d007      	beq.n	8004850 <TIM_OC2_SetConfig+0x68>
 8004840:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004844:	42a8      	cmp	r0, r5
 8004846:	d003      	beq.n	8004850 <TIM_OC2_SetConfig+0x68>
 8004848:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800484c:	42a8      	cmp	r0, r5
 800484e:	d107      	bne.n	8004860 <TIM_OC2_SetConfig+0x78>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8004850:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004852:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8004856:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800485a:	698d      	ldr	r5, [r1, #24]
 800485c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004860:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004862:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004864:	684a      	ldr	r2, [r1, #4]
 8004866:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8004868:	6203      	str	r3, [r0, #32]
 800486a:	bd30      	pop	{r4, r5, pc}
 800486c:	40012c00 	.word	0x40012c00
 8004870:	40014000 	.word	0x40014000

08004874 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004874:	6a03      	ldr	r3, [r0, #32]
 8004876:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800487a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800487c:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800487e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8004880:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004882:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004884:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8004886:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800488a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800488e:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8004890:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004892:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8004896:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800489a:	4d17      	ldr	r5, [pc, #92]	; (80048f8 <TIM_OC3_SetConfig+0x84>)
 800489c:	42a8      	cmp	r0, r5
 800489e:	d003      	beq.n	80048a8 <TIM_OC3_SetConfig+0x34>
 80048a0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80048a4:	42a8      	cmp	r0, r5
 80048a6:	d10d      	bne.n	80048c4 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80048a8:	68cd      	ldr	r5, [r1, #12]
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80048ae:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80048b2:	4d11      	ldr	r5, [pc, #68]	; (80048f8 <TIM_OC3_SetConfig+0x84>)
 80048b4:	42a8      	cmp	r0, r5
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80048ba:	d00e      	beq.n	80048da <TIM_OC3_SetConfig+0x66>
 80048bc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80048c0:	42a8      	cmp	r0, r5
 80048c2:	d00a      	beq.n	80048da <TIM_OC3_SetConfig+0x66>
 80048c4:	4d0d      	ldr	r5, [pc, #52]	; (80048fc <TIM_OC3_SetConfig+0x88>)
 80048c6:	42a8      	cmp	r0, r5
 80048c8:	d007      	beq.n	80048da <TIM_OC3_SetConfig+0x66>
 80048ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80048ce:	42a8      	cmp	r0, r5
 80048d0:	d003      	beq.n	80048da <TIM_OC3_SetConfig+0x66>
 80048d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80048d6:	42a8      	cmp	r0, r5
 80048d8:	d107      	bne.n	80048ea <TIM_OC3_SetConfig+0x76>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 80048da:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048dc:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 80048e0:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80048e4:	698d      	ldr	r5, [r1, #24]
 80048e6:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ea:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048ec:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048ee:	684a      	ldr	r2, [r1, #4]
 80048f0:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80048f2:	6203      	str	r3, [r0, #32]
 80048f4:	bd30      	pop	{r4, r5, pc}
 80048f6:	bf00      	nop
 80048f8:	40012c00 	.word	0x40012c00
 80048fc:	40014000 	.word	0x40014000

08004900 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004900:	6a03      	ldr	r3, [r0, #32]
 8004902:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004906:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004908:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800490a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800490c:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800490e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004910:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004912:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004916:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800491a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 800491e:	688d      	ldr	r5, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004920:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8004924:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004928:	4d0e      	ldr	r5, [pc, #56]	; (8004964 <TIM_OC4_SetConfig+0x64>)
 800492a:	42a8      	cmp	r0, r5
 800492c:	d00f      	beq.n	800494e <TIM_OC4_SetConfig+0x4e>
 800492e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004932:	42a8      	cmp	r0, r5
 8004934:	d00b      	beq.n	800494e <TIM_OC4_SetConfig+0x4e>
 8004936:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800493a:	42a8      	cmp	r0, r5
 800493c:	d007      	beq.n	800494e <TIM_OC4_SetConfig+0x4e>
 800493e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004942:	42a8      	cmp	r0, r5
 8004944:	d003      	beq.n	800494e <TIM_OC4_SetConfig+0x4e>
 8004946:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800494a:	42a8      	cmp	r0, r5
 800494c:	d104      	bne.n	8004958 <TIM_OC4_SetConfig+0x58>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800494e:	694d      	ldr	r5, [r1, #20]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004950:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8004954:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004958:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800495a:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800495c:	684a      	ldr	r2, [r1, #4]
 800495e:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8004960:	6203      	str	r3, [r0, #32]
 8004962:	bd30      	pop	{r4, r5, pc}
 8004964:	40012c00 	.word	0x40012c00

08004968 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004968:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800496a:	2301      	movs	r3, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800496c:	6a04      	ldr	r4, [r0, #32]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800496e:	408b      	lsls	r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004970:	ea24 0303 	bic.w	r3, r4, r3
 8004974:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8004976:	6a03      	ldr	r3, [r0, #32]
 8004978:	408a      	lsls	r2, r1
 800497a:	4313      	orrs	r3, r2
 800497c:	6203      	str	r3, [r0, #32]
 800497e:	bd10      	pop	{r4, pc}

08004980 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004980:	b510      	push	{r4, lr}
 8004982:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004984:	2201      	movs	r2, #1
 8004986:	6800      	ldr	r0, [r0, #0]
 8004988:	f7ff ffee 	bl	8004968 <TIM_CCxChannelCmd>
  
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 800498c:	6823      	ldr	r3, [r4, #0]
 800498e:	4a0e      	ldr	r2, [pc, #56]	; (80049c8 <HAL_TIM_PWM_Start+0x48>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d00f      	beq.n	80049b4 <HAL_TIM_PWM_Start+0x34>
 8004994:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004998:	4293      	cmp	r3, r2
 800499a:	d00b      	beq.n	80049b4 <HAL_TIM_PWM_Start+0x34>
 800499c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d007      	beq.n	80049b4 <HAL_TIM_PWM_Start+0x34>
 80049a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d003      	beq.n	80049b4 <HAL_TIM_PWM_Start+0x34>
 80049ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d103      	bne.n	80049bc <HAL_TIM_PWM_Start+0x3c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049ba:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	f042 0201 	orr.w	r2, r2, #1
 80049c2:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 80049c4:	2000      	movs	r0, #0
 80049c6:	bd10      	pop	{r4, pc}
 80049c8:	40012c00 	.word	0x40012c00

080049cc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{   
 80049cc:	b510      	push	{r4, lr}
 80049ce:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
    
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80049d0:	2200      	movs	r2, #0
 80049d2:	6800      	ldr	r0, [r0, #0]
 80049d4:	f7ff ffc8 	bl	8004968 <TIM_CCxChannelCmd>
  
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 80049d8:	6823      	ldr	r3, [r4, #0]
 80049da:	4a1a      	ldr	r2, [pc, #104]	; (8004a44 <HAL_TIM_PWM_Stop+0x78>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d00f      	beq.n	8004a00 <HAL_TIM_PWM_Stop+0x34>
 80049e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d00b      	beq.n	8004a00 <HAL_TIM_PWM_Stop+0x34>
 80049e8:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d007      	beq.n	8004a00 <HAL_TIM_PWM_Stop+0x34>
 80049f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d003      	beq.n	8004a00 <HAL_TIM_PWM_Stop+0x34>
 80049f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d10d      	bne.n	8004a1c <HAL_TIM_PWM_Stop+0x50>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8004a00:	6a19      	ldr	r1, [r3, #32]
 8004a02:	f241 1211 	movw	r2, #4369	; 0x1111
 8004a06:	400a      	ands	r2, r1
 8004a08:	b942      	cbnz	r2, 8004a1c <HAL_TIM_PWM_Stop+0x50>
 8004a0a:	6a19      	ldr	r1, [r3, #32]
 8004a0c:	f240 4244 	movw	r2, #1092	; 0x444
 8004a10:	400a      	ands	r2, r1
 8004a12:	b91a      	cbnz	r2, 8004a1c <HAL_TIM_PWM_Stop+0x50>
 8004a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a1a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a1c:	6a19      	ldr	r1, [r3, #32]
 8004a1e:	f241 1211 	movw	r2, #4369	; 0x1111
 8004a22:	400a      	ands	r2, r1
 8004a24:	b942      	cbnz	r2, 8004a38 <HAL_TIM_PWM_Stop+0x6c>
 8004a26:	6a19      	ldr	r1, [r3, #32]
 8004a28:	f240 4244 	movw	r2, #1092	; 0x444
 8004a2c:	400a      	ands	r2, r1
 8004a2e:	b91a      	cbnz	r2, 8004a38 <HAL_TIM_PWM_Stop+0x6c>
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	f022 0201 	bic.w	r2, r2, #1
 8004a36:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
} 
 8004a3e:	2000      	movs	r0, #0
 8004a40:	bd10      	pop	{r4, pc}
 8004a42:	bf00      	nop
 8004a44:	40012c00 	.word	0x40012c00

08004a48 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a48:	6a03      	ldr	r3, [r0, #32]
 8004a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a4e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a50:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8004a52:	6842      	ldr	r2, [r0, #4]
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004a54:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a56:	6d44      	ldr	r4, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a58:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2; 
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a5a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8004a5e:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a62:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8004a64:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a66:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8004a6a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004a6e:	4d0f      	ldr	r5, [pc, #60]	; (8004aac <TIM_OC5_SetConfig+0x64>)
 8004a70:	42a8      	cmp	r0, r5
 8004a72:	d00f      	beq.n	8004a94 <TIM_OC5_SetConfig+0x4c>
 8004a74:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004a78:	42a8      	cmp	r0, r5
 8004a7a:	d00b      	beq.n	8004a94 <TIM_OC5_SetConfig+0x4c>
 8004a7c:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8004a80:	42a8      	cmp	r0, r5
 8004a82:	d007      	beq.n	8004a94 <TIM_OC5_SetConfig+0x4c>
 8004a84:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004a88:	42a8      	cmp	r0, r5
 8004a8a:	d003      	beq.n	8004a94 <TIM_OC5_SetConfig+0x4c>
 8004a8c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004a90:	42a8      	cmp	r0, r5
 8004a92:	d104      	bne.n	8004a9e <TIM_OC5_SetConfig+0x56>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8004a94:	694d      	ldr	r5, [r1, #20]
  tmpccer |= (OC_Config->OCPolarity << 16);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a96:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8004a9a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a9e:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004aa0:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004aa2:	6544      	str	r4, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004aa4:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8004aa6:	6203      	str	r3, [r0, #32]
 8004aa8:	bd30      	pop	{r4, r5, pc}
 8004aaa:	bf00      	nop
 8004aac:	40012c00 	.word	0x40012c00

08004ab0 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ab0:	6a03      	ldr	r3, [r0, #32]
 8004ab2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004ab6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ab8:	6a03      	ldr	r3, [r0, #32]
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004aba:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8004abc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004abe:	6d42      	ldr	r2, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004ac0:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2; 
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ac2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004ac6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004aca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8004ace:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ad0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8004ad4:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad8:	4d0e      	ldr	r5, [pc, #56]	; (8004b14 <TIM_OC6_SetConfig+0x64>)
 8004ada:	42a8      	cmp	r0, r5
 8004adc:	d00f      	beq.n	8004afe <TIM_OC6_SetConfig+0x4e>
 8004ade:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004ae2:	42a8      	cmp	r0, r5
 8004ae4:	d00b      	beq.n	8004afe <TIM_OC6_SetConfig+0x4e>
 8004ae6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8004aea:	42a8      	cmp	r0, r5
 8004aec:	d007      	beq.n	8004afe <TIM_OC6_SetConfig+0x4e>
 8004aee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004af2:	42a8      	cmp	r0, r5
 8004af4:	d003      	beq.n	8004afe <TIM_OC6_SetConfig+0x4e>
 8004af6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004afa:	42a8      	cmp	r0, r5
 8004afc:	d104      	bne.n	8004b08 <TIM_OC6_SetConfig+0x58>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8004afe:	694d      	ldr	r5, [r1, #20]
  tmpccer |= (OC_Config->OCPolarity << 20);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b00:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8004b04:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b08:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b0a:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b0c:	684a      	ldr	r2, [r1, #4]
 8004b0e:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8004b10:	6203      	str	r3, [r0, #32]
 8004b12:	bd30      	pop	{r4, r5, pc}
 8004b14:	40012c00 	.word	0x40012c00

08004b18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 8004b18:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  assert_param(IS_TIM_OCNIDLE_STATE(sConfig->OCNIdleState));
  assert_param(IS_TIM_OCIDLE_STATE(sConfig->OCIdleState));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8004b1a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004b1e:	2b01      	cmp	r3, #1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 8004b20:	4604      	mov	r4, r0
 8004b22:	460d      	mov	r5, r1
 8004b24:	f04f 0002 	mov.w	r0, #2
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  assert_param(IS_TIM_OCNIDLE_STATE(sConfig->OCNIdleState));
  assert_param(IS_TIM_OCIDLE_STATE(sConfig->OCIdleState));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8004b28:	d07b      	beq.n	8004c22 <HAL_TIM_PWM_ConfigChannel+0x10a>
 8004b2a:	2301      	movs	r3, #1
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 8004b2c:	2a08      	cmp	r2, #8
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  assert_param(IS_TIM_OCNIDLE_STATE(sConfig->OCNIdleState));
  assert_param(IS_TIM_OCIDLE_STATE(sConfig->OCIdleState));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8004b2e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8004b32:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
    
  switch (Channel)
 8004b36:	d03c      	beq.n	8004bb2 <HAL_TIM_PWM_ConfigChannel+0x9a>
 8004b38:	d813      	bhi.n	8004b62 <HAL_TIM_PWM_ConfigChannel+0x4a>
 8004b3a:	b34a      	cbz	r2, 8004b90 <HAL_TIM_PWM_ConfigChannel+0x78>
 8004b3c:	2a04      	cmp	r2, #4
 8004b3e:	d16a      	bne.n	8004c16 <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b40:	6820      	ldr	r0, [r4, #0]
 8004b42:	f7ff fe51 	bl	80047e8 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b46:	6823      	ldr	r3, [r4, #0]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8004b48:	6929      	ldr	r1, [r5, #16]
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b4a:	699a      	ldr	r2, [r3, #24]
 8004b4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b50:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b52:	699a      	ldr	r2, [r3, #24]
 8004b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b58:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8004b5a:	699a      	ldr	r2, [r3, #24]
 8004b5c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004b60:	e025      	b.n	8004bae <HAL_TIM_PWM_ConfigChannel+0x96>
  /* Check input state */
  __HAL_LOCK(htim);
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 8004b62:	2a10      	cmp	r2, #16
 8004b64:	d036      	beq.n	8004bd4 <HAL_TIM_PWM_ConfigChannel+0xbc>
 8004b66:	2a14      	cmp	r2, #20
 8004b68:	d044      	beq.n	8004bf4 <HAL_TIM_PWM_ConfigChannel+0xdc>
 8004b6a:	2a0c      	cmp	r2, #12
 8004b6c:	d153      	bne.n	8004c16 <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b6e:	6820      	ldr	r0, [r4, #0]
 8004b70:	f7ff fec6 	bl	8004900 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b74:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8004b76:	6929      	ldr	r1, [r5, #16]
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b78:	69da      	ldr	r2, [r3, #28]
 8004b7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b7e:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b80:	69da      	ldr	r2, [r3, #28]
 8004b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b86:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8004b88:	69da      	ldr	r2, [r3, #28]
 8004b8a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004b8e:	e01f      	b.n	8004bd0 <HAL_TIM_PWM_ConfigChannel+0xb8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b90:	6820      	ldr	r0, [r4, #0]
 8004b92:	f7ff fddd 	bl	8004750 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b96:	6823      	ldr	r3, [r4, #0]
 8004b98:	699a      	ldr	r2, [r3, #24]
 8004b9a:	f042 0208 	orr.w	r2, r2, #8
 8004b9e:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ba0:	699a      	ldr	r2, [r3, #24]
 8004ba2:	f022 0204 	bic.w	r2, r2, #4
 8004ba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ba8:	6999      	ldr	r1, [r3, #24]
 8004baa:	692a      	ldr	r2, [r5, #16]
 8004bac:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8004bae:	619a      	str	r2, [r3, #24]
    }
    break;
 8004bb0:	e031      	b.n	8004c16 <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bb2:	6820      	ldr	r0, [r4, #0]
 8004bb4:	f7ff fe5e 	bl	8004874 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	69da      	ldr	r2, [r3, #28]
 8004bbc:	f042 0208 	orr.w	r2, r2, #8
 8004bc0:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bc2:	69da      	ldr	r2, [r3, #28]
 8004bc4:	f022 0204 	bic.w	r2, r2, #4
 8004bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8004bca:	69d9      	ldr	r1, [r3, #28]
 8004bcc:	692a      	ldr	r2, [r5, #16]
 8004bce:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8004bd0:	61da      	str	r2, [r3, #28]
    }
    break;
 8004bd2:	e020      	b.n	8004c16 <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004bd4:	6820      	ldr	r0, [r4, #0]
 8004bd6:	f7ff ff37 	bl	8004a48 <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bde:	f042 0208 	orr.w	r2, r2, #8
 8004be2:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004be4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004be6:	f022 0204 	bic.w	r2, r2, #4
 8004bea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8004bec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004bee:	692a      	ldr	r2, [r5, #16]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	e00f      	b.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004bf4:	6820      	ldr	r0, [r4, #0]
 8004bf6:	f7ff ff5b 	bl	8004ab0 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004bfa:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8004bfc:	6929      	ldr	r1, [r5, #16]
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004bfe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c04:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c0c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8004c0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c10:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004c14:	655a      	str	r2, [r3, #84]	; 0x54
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8004c16:	2301      	movs	r3, #1
    
  __HAL_UNLOCK(htim);
 8004c18:	2000      	movs	r0, #0
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8004c1a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8004c1e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 8004c22:	bd38      	pop	{r3, r4, r5, pc}

08004c24 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004c24:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8004c26:	b180      	cbz	r0, 8004c4a <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8004c28:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004c2c:	b113      	cbz	r3, 8004c34 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8004c34:	b109      	cbz	r1, 8004c3a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8004c36:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8004c40:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004c42:	f000 fc85 	bl	8005550 <USBD_LL_Init>
  
  return USBD_OK; 
 8004c46:	2000      	movs	r0, #0
 8004c48:	bd08      	pop	{r3, pc}
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8004c4a:	2002      	movs	r0, #2
  pdev->id = id;
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
  
  return USBD_OK; 
}
 8004c4c:	bd08      	pop	{r3, pc}

08004c4e <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8004c4e:	b119      	cbz	r1, 8004c58 <USBD_RegisterClass+0xa>
  {
    /* link the class tgo the USB Device handle */
    pdev->pClass = pclass;
 8004c50:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8004c54:	2000      	movs	r0, #0
 8004c56:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8004c58:	2002      	movs	r0, #2
  }
  
  return status;
}
 8004c5a:	4770      	bx	lr

08004c5c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8004c5c:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8004c5e:	f000 fcb5 	bl	80055cc <USBD_LL_Start>
  
  return USBD_OK;  
}
 8004c62:	2000      	movs	r0, #0
 8004c64:	bd08      	pop	{r3, pc}

08004c66 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004c66:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8004c68:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004c6c:	b90b      	cbnz	r3, 8004c72 <USBD_SetClassConfig+0xc>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8004c6e:	2002      	movs	r0, #2
 8004c70:	bd08      	pop	{r3, pc}
  
  if(pdev->pClass != NULL)
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4798      	blx	r3
 8004c76:	2800      	cmp	r0, #0
 8004c78:	d1f9      	bne.n	8004c6e <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8004c7a:	bd08      	pop	{r3, pc}

08004c7c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004c7c:	b508      	push	{r3, lr}
  /* Clear configuration  and Deinitialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8004c7e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	4798      	blx	r3
  return USBD_OK;
}
 8004c86:	2000      	movs	r0, #0
 8004c88:	bd08      	pop	{r3, pc}

08004c8a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004c8a:	b538      	push	{r3, r4, r5, lr}
 8004c8c:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004c8e:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8004c92:	4628      	mov	r0, r5
 8004c94:	f000 f8c8 	bl	8004e28 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8004c98:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8004c9a:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{

  USBD_ParseSetupRequest(&pdev->request, psetup);
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8004c9e:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8004ca2:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8004ca6:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8004caa:	f001 031f 	and.w	r3, r1, #31
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d00c      	beq.n	8004ccc <USBD_LL_SetupStage+0x42>
 8004cb2:	d306      	bcc.n	8004cc2 <USBD_LL_SetupStage+0x38>
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d10e      	bne.n	8004cd6 <USBD_LL_SetupStage+0x4c>
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
    break;
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8004cb8:	4620      	mov	r0, r4
 8004cba:	4629      	mov	r1, r5
 8004cbc:	f000 f9f8 	bl	80050b0 <USBD_StdEPReq>
    break;
 8004cc0:	e00e      	b.n	8004ce0 <USBD_LL_SetupStage+0x56>
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	f000 f8cf 	bl	8004e68 <USBD_StdDevReq>
    break;
 8004cca:	e009      	b.n	8004ce0 <USBD_LL_SetupStage+0x56>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8004ccc:	4620      	mov	r0, r4
 8004cce:	4629      	mov	r1, r5
 8004cd0:	f000 f9d6 	bl	8005080 <USBD_StdItfReq>
    break;
 8004cd4:	e004      	b.n	8004ce0 <USBD_LL_SetupStage+0x56>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004cdc:	f000 fc8e 	bl	80055fc <USBD_LL_StallEP>
    break;
  }  
  return USBD_OK;  
}
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	bd38      	pop	{r3, r4, r5, pc}

08004ce4 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8004ce4:	b510      	push	{r4, lr}
 8004ce6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8004ce8:	bb09      	cbnz	r1, 8004d2e <USBD_LL_DataOutStage+0x4a>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004cea:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8004cee:	2b03      	cmp	r3, #3
 8004cf0:	d126      	bne.n	8004d40 <USBD_LL_DataOutStage+0x5c>
    {
      if(pep->rem_length > pep->maxpacket)
 8004cf2:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 8004cf6:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8004cfa:	4299      	cmp	r1, r3
 8004cfc:	d90a      	bls.n	8004d14 <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -=  pep->maxpacket;
 8004cfe:	1ac9      	subs	r1, r1, r3
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8004d00:	428b      	cmp	r3, r1
 8004d02:	bf28      	it	cs
 8004d04:	460b      	movcs	r3, r1
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 8004d06:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
       
        USBD_CtlContinueRx (pdev, 
 8004d0a:	4611      	mov	r1, r2
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	f000 fa6c 	bl	80051ea <USBD_CtlContinueRx>
 8004d12:	e015      	b.n	8004d40 <USBD_LL_DataOutStage+0x5c>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004d14:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	b123      	cbz	r3, 8004d26 <USBD_LL_DataOutStage+0x42>
 8004d1c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004d20:	2a03      	cmp	r2, #3
 8004d22:	d100      	bne.n	8004d26 <USBD_LL_DataOutStage+0x42>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8004d24:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004d26:	4620      	mov	r0, r4
 8004d28:	f000 fa68 	bl	80051fc <USBD_CtlSendStatus>
 8004d2c:	e008      	b.n	8004d40 <USBD_LL_DataOutStage+0x5c>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8004d2e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	b123      	cbz	r3, 8004d40 <USBD_LL_DataOutStage+0x5c>
 8004d36:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004d3a:	2a03      	cmp	r2, #3
 8004d3c:	d100      	bne.n	8004d40 <USBD_LL_DataOutStage+0x5c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8004d3e:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8004d40:	2000      	movs	r0, #0
 8004d42:	bd10      	pop	{r4, pc}

08004d44 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8004d44:	b538      	push	{r3, r4, r5, lr}
 8004d46:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8004d48:	bba9      	cbnz	r1, 8004db6 <USBD_LL_DataInStage+0x72>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8004d4a:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d129      	bne.n	8004da6 <USBD_LL_DataInStage+0x62>
    {
      if(pep->rem_length > pep->maxpacket)
 8004d52:	69c5      	ldr	r5, [r0, #28]
 8004d54:	6a03      	ldr	r3, [r0, #32]
 8004d56:	429d      	cmp	r5, r3
 8004d58:	d906      	bls.n	8004d68 <USBD_LL_DataInStage+0x24>
      {
        pep->rem_length -=  pep->maxpacket;
 8004d5a:	1aeb      	subs	r3, r5, r3
        
        USBD_CtlContinueSendData (pdev, 
 8004d5c:	4611      	mov	r1, r2
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 8004d5e:	61c3      	str	r3, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	f000 fa29 	bl	80051b8 <USBD_CtlContinueSendData>
 8004d66:	e01e      	b.n	8004da6 <USBD_LL_DataInStage+0x62>
                                  pdata, 
                                  pep->rem_length);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8004d68:	6982      	ldr	r2, [r0, #24]
 8004d6a:	fbb2 f5f3 	udiv	r5, r2, r3
 8004d6e:	fb03 2515 	mls	r5, r3, r5, r2
 8004d72:	b95d      	cbnz	r5, 8004d8c <USBD_LL_DataInStage+0x48>
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d309      	bcc.n	8004d8c <USBD_LL_DataInStage+0x48>
           (pep->total_length >= pep->maxpacket) &&
 8004d78:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d205      	bcs.n	8004d8c <USBD_LL_DataInStage+0x48>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8004d80:	462a      	mov	r2, r5
 8004d82:	f000 fa19 	bl	80051b8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8004d86:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
 8004d8a:	e00c      	b.n	8004da6 <USBD_LL_DataInStage+0x62>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004d8c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	b12b      	cbz	r3, 8004da0 <USBD_LL_DataInStage+0x5c>
 8004d94:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8004d98:	2a03      	cmp	r2, #3
 8004d9a:	d101      	bne.n	8004da0 <USBD_LL_DataInStage+0x5c>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8004da0:	4620      	mov	r0, r4
 8004da2:	f000 fa36 	bl	8005212 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8004da6:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d10c      	bne.n	8004dc8 <USBD_LL_DataInStage+0x84>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8004dae:	2300      	movs	r3, #0
 8004db0:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 8004db4:	e008      	b.n	8004dc8 <USBD_LL_DataInStage+0x84>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8004db6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	b123      	cbz	r3, 8004dc8 <USBD_LL_DataInStage+0x84>
 8004dbe:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004dc2:	2a03      	cmp	r2, #3
 8004dc4:	d100      	bne.n	8004dc8 <USBD_LL_DataInStage+0x84>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8004dc6:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8004dc8:	2000      	movs	r0, #0
 8004dca:	bd38      	pop	{r3, r4, r5, pc}

08004dcc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004dcc:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8004dce:	2100      	movs	r1, #0
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004dd0:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8004dd2:	460a      	mov	r2, r1
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004dd4:	2540      	movs	r5, #64	; 0x40
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8004dd6:	2340      	movs	r3, #64	; 0x40
 8004dd8:	f000 fbff 	bl	80055da <USBD_LL_OpenEP>
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8004ddc:	462b      	mov	r3, r5
  USBD_LL_OpenEP(pdev,
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004dde:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8004de2:	4620      	mov	r0, r4
 8004de4:	2180      	movs	r1, #128	; 0x80
 8004de6:	2200      	movs	r2, #0
 8004de8:	f000 fbf7 	bl	80055da <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call usr call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004dec:	2301      	movs	r3, #1
 8004dee:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8004df2:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  USBD_LL_OpenEP(pdev,
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004df6:	6225      	str	r5, [r4, #32]
  /* Upon Reset call usr call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  
  if (pdev->pClassData) 
 8004df8:	b12b      	cbz	r3, 8004e06 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8004dfa:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004dfe:	7921      	ldrb	r1, [r4, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	4620      	mov	r0, r4
 8004e04:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8004e06:	2000      	movs	r0, #0
 8004e08:	bd38      	pop	{r3, r4, r5, pc}

08004e0a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004e0a:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8004e0c:	2000      	movs	r0, #0
 8004e0e:	4770      	bx	lr

08004e10 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8004e10:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e12:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004e16:	2a03      	cmp	r2, #3
 8004e18:	d104      	bne.n	8004e24 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8004e1a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	b103      	cbz	r3, 8004e24 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8004e22:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8004e24:	2000      	movs	r0, #0
 8004e26:	bd08      	pop	{r3, pc}

08004e28 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 8004e28:	780b      	ldrb	r3, [r1, #0]
 8004e2a:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8004e2c:	784b      	ldrb	r3, [r1, #1]
 8004e2e:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8004e30:	78ca      	ldrb	r2, [r1, #3]
 8004e32:	788b      	ldrb	r3, [r1, #2]
 8004e34:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004e38:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8004e3a:	794a      	ldrb	r2, [r1, #5]
 8004e3c:	790b      	ldrb	r3, [r1, #4]
 8004e3e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004e42:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8004e44:	79ca      	ldrb	r2, [r1, #7]
 8004e46:	798b      	ldrb	r3, [r1, #6]
 8004e48:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004e4c:	80c3      	strh	r3, [r0, #6]
 8004e4e:	4770      	bx	lr

08004e50 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8004e50:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80);
 8004e52:	2180      	movs	r1, #128	; 0x80
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8004e54:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8004e56:	f000 fbd1 	bl	80055fc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	2100      	movs	r1, #0
}
 8004e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
  USBD_LL_StallEP(pdev , 0);
 8004e62:	f000 bbcb 	b.w	80055fc <USBD_LL_StallEP>
	...

08004e68 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004e68:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8004e6a:	784b      	ldrb	r3, [r1, #1]
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004e6c:	4604      	mov	r4, r0
 8004e6e:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8004e70:	2b09      	cmp	r3, #9
 8004e72:	f200 80fc 	bhi.w	800506e <USBD_StdDevReq+0x206>
 8004e76:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004e7a:	00ce      	.short	0x00ce
 8004e7c:	00fa00e5 	.word	0x00fa00e5
 8004e80:	00fa00e1 	.word	0x00fa00e1
 8004e84:	000a0077 	.word	0x000a0077
 8004e88:	00bd00fa 	.word	0x00bd00fa
 8004e8c:	0093      	.short	0x0093
{
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8004e8e:	884b      	ldrh	r3, [r1, #2]
 8004e90:	0a1a      	lsrs	r2, r3, #8
 8004e92:	3a01      	subs	r2, #1
 8004e94:	2a06      	cmp	r2, #6
 8004e96:	f200 80ea 	bhi.w	800506e <USBD_StdDevReq+0x206>
 8004e9a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004e9e:	0007      	.short	0x0007
 8004ea0:	0018000b 	.word	0x0018000b
 8004ea4:	00e800e8 	.word	0x00e800e8
 8004ea8:	0049003d 	.word	0x0049003d
  {
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004eac:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	e02c      	b.n	8004f0e <USBD_StdDevReq+0xa6>
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8004eb4:	7c02      	ldrb	r2, [r0, #16]
 8004eb6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004eba:	b90a      	cbnz	r2, 8004ec0 <USBD_StdDevReq+0x58>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebe:	e000      	b.n	8004ec2 <USBD_StdDevReq+0x5a>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec2:	f10d 0006 	add.w	r0, sp, #6
 8004ec6:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004ec8:	2302      	movs	r3, #2
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004eca:	4601      	mov	r1, r0
 8004ecc:	e03c      	b.n	8004f48 <USBD_StdDevReq+0xe0>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b05      	cmp	r3, #5
 8004ed2:	f200 80cc 	bhi.w	800506e <USBD_StdDevReq+0x206>
 8004ed6:	e8df f003 	tbb	[pc, r3]
 8004eda:	0703      	.short	0x0703
 8004edc:	17130f0b 	.word	0x17130f0b
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8004ee0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	e012      	b.n	8004f0e <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004ee8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	e00e      	b.n	8004f0e <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004ef0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	e00a      	b.n	8004f0e <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004ef8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	e006      	b.n	8004f0e <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004f00:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	e002      	b.n	8004f0e <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004f08:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	7c20      	ldrb	r0, [r4, #16]
 8004f10:	f10d 0106 	add.w	r1, sp, #6
 8004f14:	4798      	blx	r3
 8004f16:	e009      	b.n	8004f2c <USBD_StdDevReq+0xc4>
#endif   
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004f18:	7c03      	ldrb	r3, [r0, #16]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f040 80a7 	bne.w	800506e <USBD_StdDevReq+0x206>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004f20:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004f24:	f10d 0006 	add.w	r0, sp, #6
 8004f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f2a:	4798      	blx	r3
 8004f2c:	4601      	mov	r1, r0
 8004f2e:	e00c      	b.n	8004f4a <USBD_StdDevReq+0xe2>
      USBD_CtlError(pdev , req);
      return;
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004f30:	7c03      	ldrb	r3, [r0, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f040 809b 	bne.w	800506e <USBD_StdDevReq+0x206>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004f38:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004f3c:	f10d 0006 	add.w	r0, sp, #6
 8004f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f42:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004f44:	2307      	movs	r3, #7
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004f46:	4601      	mov	r1, r0
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004f48:	704b      	strb	r3, [r1, #1]
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 8004f4a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f000 8091 	beq.w	8005076 <USBD_StdDevReq+0x20e>
 8004f54:	88ea      	ldrh	r2, [r5, #6]
 8004f56:	2a00      	cmp	r2, #0
 8004f58:	f000 808d 	beq.w	8005076 <USBD_StdDevReq+0x20e>
  {
    
    len = MIN(len , req->wLength);
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	bf28      	it	cs
 8004f60:	461a      	movcs	r2, r3
 8004f62:	f8ad 2006 	strh.w	r2, [sp, #6]
 8004f66:	e054      	b.n	8005012 <USBD_StdDevReq+0x1aa>
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8004f68:	888b      	ldrh	r3, [r1, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d17f      	bne.n	800506e <USBD_StdDevReq+0x206>
 8004f6e:	88cb      	ldrh	r3, [r1, #6]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d17c      	bne.n	800506e <USBD_StdDevReq+0x206>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004f74:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8004f78:	788e      	ldrb	r6, [r1, #2]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004f7a:	2b03      	cmp	r3, #3
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8004f7c:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004f80:	d075      	beq.n	800506e <USBD_StdDevReq+0x206>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8004f82:	f880 61fe 	strb.w	r6, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8004f86:	4631      	mov	r1, r6
 8004f88:	f000 fb59 	bl	800563e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	f000 f935 	bl	80051fc <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8004f92:	b10e      	cbz	r6, 8004f98 <USBD_StdDevReq+0x130>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8004f94:	2302      	movs	r3, #2
 8004f96:	e000      	b.n	8004f9a <USBD_StdDevReq+0x132>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8004f98:	2301      	movs	r3, #1
 8004f9a:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8004f9e:	e06a      	b.n	8005076 <USBD_StdDevReq+0x20e>
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8004fa0:	7889      	ldrb	r1, [r1, #2]
 8004fa2:	4e36      	ldr	r6, [pc, #216]	; (800507c <USBD_StdDevReq+0x214>)
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8004fa4:	2901      	cmp	r1, #1
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8004fa6:	7031      	strb	r1, [r6, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8004fa8:	d861      	bhi.n	800506e <USBD_StdDevReq+0x206>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev_state) 
 8004faa:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d002      	beq.n	8004fb8 <USBD_StdDevReq+0x150>
 8004fb2:	2b03      	cmp	r3, #3
 8004fb4:	d008      	beq.n	8004fc8 <USBD_StdDevReq+0x160>
 8004fb6:	e05a      	b.n	800506e <USBD_StdDevReq+0x206>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8004fb8:	2900      	cmp	r1, #0
 8004fba:	d054      	beq.n	8005066 <USBD_StdDevReq+0x1fe>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8004fbc:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004fbe:	2303      	movs	r3, #3
    switch (pdev->dev_state) 
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8004fc0:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004fc2:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 8004fc6:	e00f      	b.n	8004fe8 <USBD_StdDevReq+0x180>
         USBD_CtlSendStatus(pdev);
      }
      break;
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8004fc8:	b931      	cbnz	r1, 8004fd8 <USBD_StdDevReq+0x170>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004fca:	2302      	movs	r3, #2
 8004fcc:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8004fd0:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8004fd2:	f7ff fe53 	bl	8004c7c <USBD_ClrClassConfig>
 8004fd6:	e046      	b.n	8005066 <USBD_StdDevReq+0x1fe>
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 8004fd8:	6841      	ldr	r1, [r0, #4]
 8004fda:	2901      	cmp	r1, #1
 8004fdc:	d043      	beq.n	8005066 <USBD_StdDevReq+0x1fe>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8004fde:	b2c9      	uxtb	r1, r1
 8004fe0:	f7ff fe4c 	bl	8004c7c <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 8004fe4:	7831      	ldrb	r1, [r6, #0]
 8004fe6:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8004fe8:	4620      	mov	r0, r4
 8004fea:	f7ff fe3c 	bl	8004c66 <USBD_SetClassConfig>
 8004fee:	2802      	cmp	r0, #2
 8004ff0:	d139      	bne.n	8005066 <USBD_StdDevReq+0x1fe>
 8004ff2:	e03c      	b.n	800506e <USBD_StdDevReq+0x206>
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{

  if (req->wLength != 1) 
 8004ff4:	88ca      	ldrh	r2, [r1, #6]
 8004ff6:	2a01      	cmp	r2, #1
 8004ff8:	d139      	bne.n	800506e <USBD_StdDevReq+0x206>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev_state )  
 8004ffa:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d003      	beq.n	800500a <USBD_StdDevReq+0x1a2>
 8005002:	2b03      	cmp	r3, #3
 8005004:	d133      	bne.n	800506e <USBD_StdDevReq+0x206>
                        1);
      break;
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 8005006:	1d01      	adds	r1, r0, #4
 8005008:	e015      	b.n	8005036 <USBD_StdDevReq+0x1ce>
  else 
  {
    switch (pdev->dev_state )  
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 800500a:	4601      	mov	r1, r0
 800500c:	2300      	movs	r3, #0
 800500e:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 8005012:	4620      	mov	r0, r4
 8005014:	e00f      	b.n	8005036 <USBD_StdDevReq+0x1ce>
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
  
    
  switch (pdev->dev_state) 
 8005016:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800501a:	3b02      	subs	r3, #2
 800501c:	2b01      	cmp	r3, #1
 800501e:	d826      	bhi.n	800506e <USBD_StdDevReq+0x206>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8005020:	2301      	movs	r3, #1
 8005022:	60c3      	str	r3, [r0, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8005024:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8005028:	b10b      	cbz	r3, 800502e <USBD_StdDevReq+0x1c6>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800502a:	2303      	movs	r3, #3
 800502c:	60c3      	str	r3, [r0, #12]
    }
    
    USBD_CtlSendData (pdev, 
 800502e:	4620      	mov	r0, r4
 8005030:	f104 010c 	add.w	r1, r4, #12
 8005034:	2202      	movs	r2, #2
 8005036:	f000 f8b1 	bl	800519c <USBD_CtlSendData>
 800503a:	e01c      	b.n	8005076 <USBD_StdDevReq+0x20e>
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800503c:	884b      	ldrh	r3, [r1, #2]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d119      	bne.n	8005076 <USBD_StdDevReq+0x20e>
 8005042:	e008      	b.n	8005056 <USBD_StdDevReq+0x1ee>
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  switch (pdev->dev_state)
 8005044:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005048:	3b02      	subs	r3, #2
 800504a:	2b01      	cmp	r3, #1
 800504c:	d80f      	bhi.n	800506e <USBD_StdDevReq+0x206>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800504e:	884b      	ldrh	r3, [r1, #2]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d110      	bne.n	8005076 <USBD_StdDevReq+0x20e>
    {
      pdev->dev_remote_wakeup = 0; 
 8005054:	2300      	movs	r3, #0
 8005056:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800505a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800505e:	4620      	mov	r0, r4
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	4629      	mov	r1, r5
 8005064:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8005066:	4620      	mov	r0, r4
 8005068:	f000 f8c8 	bl	80051fc <USBD_CtlSendStatus>
 800506c:	e003      	b.n	8005076 <USBD_StdDevReq+0x20e>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  default:  
    USBD_CtlError(pdev , req);
 800506e:	4620      	mov	r0, r4
 8005070:	4629      	mov	r1, r5
 8005072:	f7ff feed 	bl	8004e50 <USBD_CtlError>
    break;
  }
  
  return ret;
}
 8005076:	2000      	movs	r0, #0
 8005078:	b002      	add	sp, #8
 800507a:	bd70      	pop	{r4, r5, r6, pc}
 800507c:	20000ba4 	.word	0x20000ba4

08005080 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005080:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 8005082:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005086:	2b03      	cmp	r3, #3
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005088:	4604      	mov	r4, r0
 800508a:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 800508c:	d10c      	bne.n	80050a8 <USBD_StdItfReq+0x28>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800508e:	790b      	ldrb	r3, [r1, #4]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d809      	bhi.n	80050a8 <USBD_StdItfReq+0x28>
    {
      pdev->pClass->Setup (pdev, req); 
 8005094:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 800509c:	88eb      	ldrh	r3, [r5, #6]
 800509e:	b92b      	cbnz	r3, 80050ac <USBD_StdItfReq+0x2c>
      {
         USBD_CtlSendStatus(pdev);
 80050a0:	4620      	mov	r0, r4
 80050a2:	f000 f8ab 	bl	80051fc <USBD_CtlSendStatus>
 80050a6:	e001      	b.n	80050ac <USBD_StdItfReq+0x2c>
       USBD_CtlError(pdev , req);
    }
    break;
    
  default:
     USBD_CtlError(pdev , req);
 80050a8:	f7ff fed2 	bl	8004e50 <USBD_CtlError>
    break;
  }
  return USBD_OK;
}
 80050ac:	2000      	movs	r0, #0
 80050ae:	bd38      	pop	{r3, r4, r5, pc}

080050b0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80050b0:	b570      	push	{r4, r5, r6, lr}
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
  
  switch (req->bRequest) 
 80050b2:	784e      	ldrb	r6, [r1, #1]
{
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 80050b4:	888a      	ldrh	r2, [r1, #4]
  
  switch (req->bRequest) 
 80050b6:	2e01      	cmp	r6, #1
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80050b8:	4604      	mov	r4, r0
 80050ba:	460d      	mov	r5, r1
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 80050bc:	b2d3      	uxtb	r3, r2
  
  switch (req->bRequest) 
 80050be:	d010      	beq.n	80050e2 <USBD_StdEPReq+0x32>
 80050c0:	d326      	bcc.n	8005110 <USBD_StdEPReq+0x60>
 80050c2:	2e03      	cmp	r6, #3
 80050c4:	d14b      	bne.n	800515e <USBD_StdEPReq+0xae>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 80050c6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80050ca:	2a02      	cmp	r2, #2
 80050cc:	d027      	beq.n	800511e <USBD_StdEPReq+0x6e>
 80050ce:	2a03      	cmp	r2, #3
 80050d0:	d143      	bne.n	800515a <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 80050d2:	884a      	ldrh	r2, [r1, #2]
 80050d4:	b992      	cbnz	r2, 80050fc <USBD_StdEPReq+0x4c>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80050d6:	065e      	lsls	r6, r3, #25
 80050d8:	d010      	beq.n	80050fc <USBD_StdEPReq+0x4c>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 80050da:	4619      	mov	r1, r3
 80050dc:	f000 fa8e 	bl	80055fc <USBD_LL_StallEP>
 80050e0:	e00c      	b.n	80050fc <USBD_StdEPReq+0x4c>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 80050e2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80050e6:	2a02      	cmp	r2, #2
 80050e8:	d019      	beq.n	800511e <USBD_StdEPReq+0x6e>
 80050ea:	2a03      	cmp	r2, #3
 80050ec:	d135      	bne.n	800515a <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 80050ee:	884a      	ldrh	r2, [r1, #2]
 80050f0:	bbaa      	cbnz	r2, 800515e <USBD_StdEPReq+0xae>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 80050f2:	0659      	lsls	r1, r3, #25
 80050f4:	d008      	beq.n	8005108 <USBD_StdEPReq+0x58>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80050f6:	4619      	mov	r1, r3
 80050f8:	f000 fa87 	bl	800560a <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 80050fc:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8005100:	4620      	mov	r0, r4
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	4629      	mov	r1, r5
 8005106:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005108:	4620      	mov	r0, r4
 800510a:	f000 f877 	bl	80051fc <USBD_CtlSendStatus>
 800510e:	e026      	b.n	800515e <USBD_StdEPReq+0xae>
      break;    
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 8005110:	f890 51fc 	ldrb.w	r5, [r0, #508]	; 0x1fc
 8005114:	2d02      	cmp	r5, #2
 8005116:	d002      	beq.n	800511e <USBD_StdEPReq+0x6e>
 8005118:	2d03      	cmp	r5, #3
 800511a:	d006      	beq.n	800512a <USBD_StdEPReq+0x7a>
 800511c:	e01d      	b.n	800515a <USBD_StdEPReq+0xaa>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 800511e:	065a      	lsls	r2, r3, #25
 8005120:	d01d      	beq.n	800515e <USBD_StdEPReq+0xae>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8005122:	4619      	mov	r1, r3
 8005124:	f000 fa6a 	bl	80055fc <USBD_LL_StallEP>
 8005128:	e019      	b.n	800515e <USBD_StdEPReq+0xae>
 800512a:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800512e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005132:	eb00 1505 	add.w	r5, r0, r5, lsl #4
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8005136:	4619      	mov	r1, r3
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8005138:	bf14      	ite	ne
 800513a:	3514      	addne	r5, #20
 800513c:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8005140:	f000 fa6a 	bl	8005618 <USBD_LL_IsStallEP>
 8005144:	b110      	cbz	r0, 800514c <USBD_StdEPReq+0x9c>
      {
        pep->status = 0x0001;     
 8005146:	2301      	movs	r3, #1
 8005148:	602b      	str	r3, [r5, #0]
 800514a:	e000      	b.n	800514e <USBD_StdEPReq+0x9e>
      }
      else
      {
        pep->status = 0x0000;  
 800514c:	6028      	str	r0, [r5, #0]
      }
      
      USBD_CtlSendData (pdev,
 800514e:	4620      	mov	r0, r4
 8005150:	4629      	mov	r1, r5
 8005152:	2202      	movs	r2, #2
 8005154:	f000 f822 	bl	800519c <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 8005158:	e001      	b.n	800515e <USBD_StdEPReq+0xae>
      
    default:                         
      USBD_CtlError(pdev , req);
 800515a:	f7ff fe79 	bl	8004e50 <USBD_CtlError>
    
  default:
    break;
  }
  return ret;
}
 800515e:	2000      	movs	r0, #0
 8005160:	bd70      	pop	{r4, r5, r6, pc}

08005162 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005162:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8005164:	b1c8      	cbz	r0, 800519a <USBD_GetString+0x38>
 8005166:	4604      	mov	r4, r0
 8005168:	1a23      	subs	r3, r4, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 800516a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2d00      	cmp	r5, #0
 8005172:	d1f9      	bne.n	8005168 <USBD_GetString+0x6>
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	3302      	adds	r3, #2
 8005178:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 800517a:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800517c:	2303      	movs	r3, #3
 800517e:	704b      	strb	r3, [r1, #1]
 8005180:	3801      	subs	r0, #1
 8005182:	2302      	movs	r3, #2
    
    while (*desc != '\0') 
 8005184:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8005188:	b13c      	cbz	r4, 800519a <USBD_GetString+0x38>
    {
      unicode[idx++] = *desc++;
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	b2d2      	uxtb	r2, r2
 800518e:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0x00;
 8005190:	3302      	adds	r3, #2
 8005192:	2400      	movs	r4, #0
 8005194:	b2db      	uxtb	r3, r3
 8005196:	548c      	strb	r4, [r1, r2]
 8005198:	e7f4      	b.n	8005184 <USBD_GetString+0x22>
 800519a:	bd30      	pop	{r4, r5, pc}

0800519c <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800519c:	b538      	push	{r3, r4, r5, lr}
 800519e:	4613      	mov	r3, r2
 80051a0:	460d      	mov	r5, r1
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80051a2:	2202      	movs	r2, #2
 80051a4:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80051a8:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 80051aa:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80051ac:	2100      	movs	r1, #0
 80051ae:	462a      	mov	r2, r5
 80051b0:	f000 fa4c 	bl	800564c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80051b4:	2000      	movs	r0, #0
 80051b6:	bd38      	pop	{r3, r4, r5, pc}

080051b8 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80051b8:	b510      	push	{r4, lr}
 80051ba:	460c      	mov	r4, r1
 80051bc:	4613      	mov	r3, r2
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80051be:	2100      	movs	r1, #0
 80051c0:	4622      	mov	r2, r4
 80051c2:	f000 fa43 	bl	800564c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80051c6:	2000      	movs	r0, #0
 80051c8:	bd10      	pop	{r4, pc}

080051ca <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80051ca:	b538      	push	{r3, r4, r5, lr}
 80051cc:	4613      	mov	r3, r2
 80051ce:	460d      	mov	r5, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80051d0:	2203      	movs	r2, #3
 80051d2:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 80051d6:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 80051da:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80051de:	2100      	movs	r1, #0
 80051e0:	462a      	mov	r2, r5
 80051e2:	f000 fa3a 	bl	800565a <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 80051e6:	2000      	movs	r0, #0
 80051e8:	bd38      	pop	{r3, r4, r5, pc}

080051ea <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80051ea:	b510      	push	{r4, lr}
 80051ec:	460c      	mov	r4, r1
 80051ee:	4613      	mov	r3, r2

  USBD_LL_PrepareReceive (pdev,
 80051f0:	2100      	movs	r1, #0
 80051f2:	4622      	mov	r2, r4
 80051f4:	f000 fa31 	bl	800565a <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 80051f8:	2000      	movs	r0, #0
 80051fa:	bd10      	pop	{r4, pc}

080051fc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80051fc:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80051fe:	2100      	movs	r1, #0
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005200:	2304      	movs	r3, #4
 8005202:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8005206:	460a      	mov	r2, r1
 8005208:	460b      	mov	r3, r1
 800520a:	f000 fa1f 	bl	800564c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800520e:	2000      	movs	r0, #0
 8005210:	bd08      	pop	{r3, pc}

08005212 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8005212:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8005214:	2100      	movs	r1, #0
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8005216:	2305      	movs	r3, #5
 8005218:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800521c:	460a      	mov	r2, r1
 800521e:	460b      	mov	r3, r1
 8005220:	f000 fa1b 	bl	800565a <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8005224:	2000      	movs	r0, #0
 8005226:	bd08      	pop	{r3, pc}

08005228 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8005228:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 800522c:	b11b      	cbz	r3, 8005236 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 800522e:	2000      	movs	r0, #0
 8005230:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8005234:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8005236:	2002      	movs	r0, #2
  }
}
 8005238:	4770      	bx	lr

0800523a <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800523a:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 800523e:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8005240:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8005244:	b15b      	cbz	r3, 800525e <USBD_CDC_EP0_RxReady+0x24>
 8005246:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800524a:	28ff      	cmp	r0, #255	; 0xff
 800524c:	d007      	beq.n	800525e <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8005254:	4621      	mov	r1, r4
 8005256:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8005258:	23ff      	movs	r3, #255	; 0xff
 800525a:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 800525e:	2000      	movs	r0, #0
 8005260:	bd10      	pop	{r4, pc}
	...

08005264 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8005264:	2343      	movs	r3, #67	; 0x43
 8005266:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8005268:	4800      	ldr	r0, [pc, #0]	; (800526c <USBD_CDC_GetFSCfgDesc+0x8>)
 800526a:	4770      	bx	lr
 800526c:	20000018 	.word	0x20000018

08005270 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8005270:	2343      	movs	r3, #67	; 0x43
 8005272:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8005274:	4800      	ldr	r0, [pc, #0]	; (8005278 <USBD_CDC_GetHSCfgDesc+0x8>)
 8005276:	4770      	bx	lr
 8005278:	200000e4 	.word	0x200000e4

0800527c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800527c:	2343      	movs	r3, #67	; 0x43
 800527e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8005280:	4800      	ldr	r0, [pc, #0]	; (8005284 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8005282:	4770      	bx	lr
 8005284:	200000a0 	.word	0x200000a0

08005288 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8005288:	230a      	movs	r3, #10
 800528a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800528c:	4800      	ldr	r0, [pc, #0]	; (8005290 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800528e:	4770      	bx	lr
 8005290:	20000094 	.word	0x20000094

08005294 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8005294:	b538      	push	{r3, r4, r5, lr}
 8005296:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8005298:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800529c:	f000 f9e4 	bl	8005668 <USBD_LL_GetRxDataSize>
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80052a0:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80052a4:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80052a8:	b14b      	cbz	r3, 80052be <USBD_CDC_DataOut+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80052aa:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 80052ae:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80052b8:	4798      	blx	r3

    return USBD_OK;
 80052ba:	2000      	movs	r0, #0
 80052bc:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return USBD_FAIL;
 80052be:	2002      	movs	r0, #2
  }
}
 80052c0:	bd38      	pop	{r3, r4, r5, pc}

080052c2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 80052c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c4:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052c6:	7809      	ldrb	r1, [r1, #0]
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 80052c8:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052cc:	f001 0360 	and.w	r3, r1, #96	; 0x60
 80052d0:	2b20      	cmp	r3, #32
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 80052d2:	4606      	mov	r6, r0
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052d4:	d120      	bne.n	8005318 <USBD_CDC_Setup+0x56>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80052d6:	88e2      	ldrh	r2, [r4, #6]
 80052d8:	7863      	ldrb	r3, [r4, #1]
 80052da:	b1ba      	cbz	r2, 800530c <USBD_CDC_Setup+0x4a>
    {
      if (req->bmRequest & 0x80)
 80052dc:	0609      	lsls	r1, r1, #24
 80052de:	d50b      	bpl.n	80052f8 <USBD_CDC_Setup+0x36>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80052e0:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 80052e4:	4618      	mov	r0, r3
 80052e6:	688f      	ldr	r7, [r1, #8]
 80052e8:	4629      	mov	r1, r5
 80052ea:	47b8      	blx	r7
                                                          (uint8_t *)hcdc->data,
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
 80052ec:	4630      	mov	r0, r6
 80052ee:	4629      	mov	r1, r5
 80052f0:	88e2      	ldrh	r2, [r4, #6]
 80052f2:	f7ff ff53 	bl	800519c <USBD_CtlSendData>
 80052f6:	e00f      	b.n	8005318 <USBD_CDC_Setup+0x56>
                            (uint8_t *)hcdc->data,
                            req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 80052f8:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 80052fc:	88e3      	ldrh	r3, [r4, #6]
 80052fe:	f885 3201 	strb.w	r3, [r5, #513]	; 0x201
        
        USBD_CtlPrepareRx (pdev, 
 8005302:	4629      	mov	r1, r5
 8005304:	88e2      	ldrh	r2, [r4, #6]
 8005306:	f7ff ff60 	bl	80051ca <USBD_CtlPrepareRx>
 800530a:	e005      	b.n	8005318 <USBD_CDC_Setup+0x56>
      }
      
    }
    else
    {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800530c:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8005310:	4618      	mov	r0, r3
 8005312:	688c      	ldr	r4, [r1, #8]
 8005314:	4611      	mov	r1, r2
 8005316:	47a0      	blx	r4
 
  default: 
    break;
  }
  return USBD_OK;
}
 8005318:	2000      	movs	r0, #0
 800531a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800531c <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 800531c:	b510      	push	{r4, lr}
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 800531e:	2181      	movs	r1, #129	; 0x81
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8005320:	4604      	mov	r4, r0
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8005322:	f000 f964 	bl	80055ee <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8005326:	2101      	movs	r1, #1
 8005328:	4620      	mov	r0, r4
 800532a:	f000 f960 	bl	80055ee <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 800532e:	4620      	mov	r0, r4
 8005330:	2182      	movs	r1, #130	; 0x82
 8005332:	f000 f95c 	bl	80055ee <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8005336:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800533a:	b153      	cbz	r3, 8005352 <USBD_CDC_DeInit+0x36>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800533c:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005344:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8005348:	f000 f998 	bl	800567c <USBD_static_free>
    pdev->pClassData = NULL;
 800534c:	2300      	movs	r3, #0
 800534e:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
  }
  
  return ret;
}
 8005352:	2000      	movs	r0, #0
 8005354:	bd10      	pop	{r4, pc}

08005356 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8005356:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t ret = 0;
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005358:	7c03      	ldrb	r3, [r0, #16]
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 800535a:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800535c:	2181      	movs	r1, #129	; 0x81
 800535e:	2202      	movs	r2, #2
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005360:	b94b      	cbnz	r3, 8005376 <USBD_CDC_Init+0x20>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8005362:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005366:	f000 f938 	bl	80055da <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800536a:	4620      	mov	r0, r4
 800536c:	2101      	movs	r1, #1
 800536e:	2202      	movs	r2, #2
 8005370:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005374:	e006      	b.n	8005384 <USBD_CDC_Init+0x2e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8005376:	2340      	movs	r3, #64	; 0x40
 8005378:	f000 f92f 	bl	80055da <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800537c:	4620      	mov	r0, r4
 800537e:	2101      	movs	r1, #1
 8005380:	2202      	movs	r2, #2
 8005382:	2340      	movs	r3, #64	; 0x40
 8005384:	f000 f929 	bl	80055da <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8005388:	2182      	movs	r1, #130	; 0x82
 800538a:	2203      	movs	r2, #3
 800538c:	2308      	movs	r3, #8
 800538e:	4620      	mov	r0, r4
 8005390:	f000 f923 	bl	80055da <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8005394:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005398:	f000 f96c 	bl	8005674 <USBD_static_malloc>
 800539c:	4606      	mov	r6, r0
 800539e:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 80053a2:	b1c8      	cbz	r0, 80053d8 <USBD_CDC_Init+0x82>
  else
  {
    hcdc = pdev->pClassData;
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80053a4:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80053ac:	7c27      	ldrb	r7, [r4, #16]
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80053ae:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
    
    /* Init Xfer states */
    hcdc->TxState =0;
 80053b2:	2500      	movs	r5, #0
 80053b4:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80053b8:	4620      	mov	r0, r4
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
    
    /* Init Xfer states */
    hcdc->TxState =0;
    hcdc->RxState =0;
 80053ba:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80053be:	2101      	movs	r1, #1
    
    /* Init Xfer states */
    hcdc->TxState =0;
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80053c0:	b92f      	cbnz	r7, 80053ce <USBD_CDC_Init+0x78>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80053c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053c6:	f000 f948 	bl	800565a <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 80053ca:	4638      	mov	r0, r7
 80053cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80053ce:	2340      	movs	r3, #64	; 0x40
 80053d0:	f000 f943 	bl	800565a <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 80053d4:	4628      	mov	r0, r5
 80053d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
  
  if(pdev->pClassData == NULL)
  {
    ret = 1; 
 80053d8:	2001      	movs	r0, #1
    }
    
    
  }
  return ret;
}
 80053da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080053dc <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 80053dc:	b119      	cbz	r1, 80053e6 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80053de:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 80053e2:	2000      	movs	r0, #0
 80053e4:	4770      	bx	lr
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 80053e6:	2002      	movs	r0, #2
    pdev->pUserData= fops;
    ret = USBD_OK;    
  }
  
  return ret;
}
 80053e8:	4770      	bx	lr

080053ea <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 80053ea:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 80053ee:	2000      	movs	r0, #0
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->TxBuffer = pbuff;
 80053f0:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 80053f4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
}
 80053f8:	4770      	bx	lr

080053fa <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 80053fa:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 80053fe:	2000      	movs	r0, #0
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8005400:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  
  return USBD_OK;
}
 8005404:	4770      	bx	lr

08005406 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 8005406:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8005408:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 800540c:	b175      	cbz	r5, 800542c <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 800540e:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 8005412:	b96c      	cbnz	r4, 8005430 <USBD_CDC_TransmitPacket+0x2a>
    {
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8005414:	f8b5 3210 	ldrh.w	r3, [r5, #528]	; 0x210
 8005418:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
 800541c:	2181      	movs	r1, #129	; 0x81
 800541e:	f000 f915 	bl	800564c <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8005422:	2301      	movs	r3, #1
 8005424:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
      return USBD_OK;
 8005428:	4620      	mov	r0, r4
 800542a:	bd38      	pop	{r3, r4, r5, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 800542c:	2002      	movs	r0, #2
 800542e:	bd38      	pop	{r3, r4, r5, pc}
      hcdc->TxState = 1;
      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8005430:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8005432:	bd38      	pop	{r3, r4, r5, pc}

08005434 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8005434:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8005438:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800543a:	b163      	cbz	r3, 8005456 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800543c:	7c04      	ldrb	r4, [r0, #16]
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800543e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005442:	2101      	movs	r1, #1
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005444:	b914      	cbnz	r4, 800544c <USBD_CDC_ReceivePacket+0x18>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005446:	f44f 7300 	mov.w	r3, #512	; 0x200
 800544a:	e000      	b.n	800544e <USBD_CDC_ReceivePacket+0x1a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800544c:	2340      	movs	r3, #64	; 0x40
 800544e:	f000 f904 	bl	800565a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005452:	2000      	movs	r0, #0
 8005454:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USBD_FAIL;
 8005456:	2002      	movs	r0, #2
  }
}
 8005458:	bd10      	pop	{r4, pc}
	...

0800545c <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 800545c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIOA clock for USB DataLines */
  __GPIOA_CLK_ENABLE();
 8005460:	4c24      	ldr	r4, [pc, #144]	; (80054f4 <HAL_PCD_MspInit+0x98>)
 8005462:	6963      	ldr	r3, [r4, #20]
 8005464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005468:	6163      	str	r3, [r4, #20]
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();
 800546a:	6963      	ldr	r3, [r4, #20]
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 800546c:	b086      	sub	sp, #24
  
  /* Enable the GPIOA clock for USB DataLines */
  __GPIOA_CLK_ENABLE();
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();
 800546e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005472:	6163      	str	r3, [r4, #20]

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8005474:	f44f 56c0 	mov.w	r6, #6144	; 0x1800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005478:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800547a:	2500      	movs	r5, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800547c:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8005480:	270e      	movs	r7, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8005482:	a901      	add	r1, sp, #4
 8005484:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005488:	9302      	str	r3, [sp, #8]
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 800548a:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800548c:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800548e:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8005492:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8005494:	f7fe f8ac 	bl	80035f0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),0);
 8005498:	4631      	mov	r1, r6
 800549a:	462a      	mov	r2, r5
 800549c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054a0:	f7fe f970 	bl	8003784 <HAL_GPIO_WritePin>
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBD_LL_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 80054a4:	2001      	movs	r0, #1
 80054a6:	f7fe f831 	bl	800350c <HAL_Delay>
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 

  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),0);
  USBD_LL_Delay(1);
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);
 80054aa:	4631      	mov	r1, r6
 80054ac:	2201      	movs	r2, #1
 80054ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054b2:	f7fe f967 	bl	8003784 <HAL_GPIO_WritePin>

  
  /* Configure USB DM and DP pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054b6:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 80054b8:	a901      	add	r1, sp, #4
 80054ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);

  
  /* Configure USB DM and DP pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054be:	9302      	str	r3, [sp, #8]
  USBD_LL_Delay(1);
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);

  
  /* Configure USB DM and DP pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 80054c0:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054c2:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80054c4:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80054c8:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 80054ca:	f7fe f891 	bl	80035f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(USB_DISCONNECT_PORT, &GPIO_InitStruct); 
#endif  

  /* Enable USB FS Clock */
  __USB_CLK_ENABLE();
 80054ce:	69e3      	ldr	r3, [r4, #28]
 80054d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80054d4:	61e3      	str	r3, [r4, #28]
  
  /* Enable SYSCFG Clock */
  __SYSCFG_CLK_ENABLE();
 80054d6:	69a3      	ldr	r3, [r4, #24]
 80054d8:	f043 0301 	orr.w	r3, r3, #1
 80054dc:	61a3      	str	r3, [r4, #24]
#endif
  
#if defined (USE_USB_INTERRUPT_DEFAULT)
  
  /* Set USB Default FS Interrupt priority */
  HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 80054de:	2105      	movs	r1, #5
 80054e0:	462a      	mov	r2, r5
 80054e2:	2014      	movs	r0, #20
 80054e4:	f7fe f832 	bl	800354c <HAL_NVIC_SetPriority>
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn); 
 80054e8:	2014      	movs	r0, #20
 80054ea:	f7fe f85f 	bl	80035ac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(USB_LP_IRQn); 
#endif
}
 80054ee:	b006      	add	sp, #24
 80054f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054f4:	40021000 	.word	0x40021000

080054f8 <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80054f8:	4601      	mov	r1, r0
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 80054fa:	f501 71a2 	add.w	r1, r1, #324	; 0x144
 80054fe:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 8005502:	f7ff bbc2 	b.w	8004c8a <USBD_LL_SetupStage>

08005506 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005506:	231c      	movs	r3, #28
 8005508:	fb03 0301 	mla	r3, r3, r1, r0
 800550c:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 8005510:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8005514:	f7ff bbe6 	b.w	8004ce4 <USBD_LL_DataOutStage>

08005518 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005518:	231c      	movs	r3, #28
 800551a:	fb03 0301 	mla	r3, r3, r1, r0
 800551e:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 8005522:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005524:	f7ff bc0e 	b.w	8004d44 <USBD_LL_DataInStage>

08005528 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 8005528:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800552c:	f7ff bc70 	b.w	8004e10 <USBD_LL_SOF>

08005530 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 8005530:	b510      	push	{r4, lr}
 8005532:	4604      	mov	r4, r0
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8005534:	2101      	movs	r1, #1
 8005536:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800553a:	f7ff fc66 	bl	8004e0a <USBD_LL_SetSpeed>
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 800553e:	f8d4 0174 	ldr.w	r0, [r4, #372]	; 0x174
}
 8005542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8005546:	f7ff bc41 	b.w	8004dcc <USBD_LL_Reset>

0800554a <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800554a:	4770      	bx	lr

0800554c <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800554c:	4770      	bx	lr
	...

08005550 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
 8005550:	b538      	push	{r3, r4, r5, lr}
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
 8005552:	4a1c      	ldr	r2, [pc, #112]	; (80055c4 <USBD_LL_Init+0x74>)
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
 8005554:	4605      	mov	r5, r0
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
 8005556:	481c      	ldr	r0, [pc, #112]	; (80055c8 <USBD_LL_Init+0x78>)
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd.Init.speed = PCD_SPEED_FULL;
  /* Link The driver to the stack */
  hpcd.pData = pdev;
  pdev->pData = &hpcd;
 8005558:	f8c5 0220 	str.w	r0, [r5, #544]	; 0x220
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
 800555c:	2308      	movs	r3, #8
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
 800555e:	2400      	movs	r4, #0
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
 8005560:	e880 000c 	stmia.w	r0, {r2, r3}
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005564:	2302      	movs	r3, #2
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
 8005566:	60c4      	str	r4, [r0, #12]
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005568:	6103      	str	r3, [r0, #16]
  hpcd.Init.speed = PCD_SPEED_FULL;
 800556a:	6083      	str	r3, [r0, #8]
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 800556c:	f8c0 5174 	str.w	r5, [r0, #372]	; 0x174
  pdev->pData = &hpcd;
  /* Initialize LL Driver */
  HAL_PCD_Init(pdev->pData);
 8005570:	f7fe f911 	bl	8003796 <HAL_PCD_Init>
  
  HAL_PCDEx_PMAConfig(pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 8005574:	4621      	mov	r1, r4
 8005576:	4622      	mov	r2, r4
 8005578:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 800557c:	2340      	movs	r3, #64	; 0x40
 800557e:	f7ff f832 	bl	80045e6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 8005582:	2180      	movs	r1, #128	; 0x80
 8005584:	4622      	mov	r2, r4
 8005586:	460b      	mov	r3, r1
 8005588:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 800558c:	f7ff f82b 	bl	80045e6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);  
 8005590:	4622      	mov	r2, r4
 8005592:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 8005596:	2181      	movs	r1, #129	; 0x81
 8005598:	23c0      	movs	r3, #192	; 0xc0
 800559a:	f7ff f824 	bl	80045e6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x110);
 800559e:	4622      	mov	r2, r4
 80055a0:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 80055a4:	2101      	movs	r1, #1
 80055a6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80055aa:	f7ff f81c 	bl	80045e6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x100); 
 80055ae:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 80055b2:	2182      	movs	r1, #130	; 0x82
 80055b4:	4622      	mov	r2, r4
 80055b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055ba:	f7ff f814 	bl	80045e6 <HAL_PCDEx_PMAConfig>
    
  return USBD_OK;
}
 80055be:	4620      	mov	r0, r4
 80055c0:	bd38      	pop	{r3, r4, r5, pc}
 80055c2:	bf00      	nop
 80055c4:	40005c00 	.word	0x40005c00
 80055c8:	20003b60 	.word	0x20003b60

080055cc <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80055cc:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 80055ce:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80055d2:	f7fe f92d 	bl	8003830 <HAL_PCD_Start>
  return USBD_OK;
}
 80055d6:	2000      	movs	r0, #0
 80055d8:	bd08      	pop	{r3, pc}

080055da <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 80055da:	b510      	push	{r4, lr}
 80055dc:	4614      	mov	r4, r2
  HAL_PCD_EP_Open(pdev->pData,
 80055de:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80055e2:	461a      	mov	r2, r3
 80055e4:	4623      	mov	r3, r4
 80055e6:	f7fe f93f 	bl	8003868 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 80055ea:	2000      	movs	r0, #0
 80055ec:	bd10      	pop	{r4, pc}

080055ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80055ee:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80055f0:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80055f4:	f7fe fad4 	bl	8003ba0 <HAL_PCD_EP_Close>
  return USBD_OK;
}
 80055f8:	2000      	movs	r0, #0
 80055fa:	bd08      	pop	{r3, pc}

080055fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80055fc:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80055fe:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005602:	f7fe ff3b 	bl	800447c <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 8005606:	2000      	movs	r0, #0
 8005608:	bd08      	pop	{r3, pc}

0800560a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800560a:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800560c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005610:	f7fe ff85 	bl	800451e <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 8005614:	2000      	movs	r0, #0
 8005616:	bd08      	pop	{r3, pc}

08005618 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8005618:	f011 0f80 	tst.w	r1, #128	; 0x80
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800561c:	f8d0 2220 	ldr.w	r2, [r0, #544]	; 0x220
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005620:	bf18      	it	ne
 8005622:	f001 037f 	andne.w	r3, r1, #127	; 0x7f
 8005626:	f04f 001c 	mov.w	r0, #28
 800562a:	bf15      	itete	ne
 800562c:	fb00 2103 	mlane	r1, r0, r3, r2
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005630:	fb00 2101 	mlaeq	r1, r0, r1, r2
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005634:	f891 002a 	ldrbne.w	r0, [r1, #42]	; 0x2a
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005638:	f891 00b6 	ldrbeq.w	r0, [r1, #182]	; 0xb6
  }
}
 800563c:	4770      	bx	lr

0800563e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800563e:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005640:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005644:	f7fe f8fa 	bl	800383c <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 8005648:	2000      	movs	r0, #0
 800564a:	bd08      	pop	{r3, pc}

0800564c <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 800564c:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800564e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005652:	f7fe fbff 	bl	8003e54 <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 8005656:	2000      	movs	r0, #0
 8005658:	bd08      	pop	{r3, pc}

0800565a <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 800565a:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800565c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005660:	f7fe fb76 	bl	8003d50 <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 8005664:	2000      	movs	r0, #0
 8005666:	bd08      	pop	{r3, pc}

08005668 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005668:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 800566a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800566e:	f7fe fbe9 	bl	8003e44 <HAL_PCD_EP_GetRxCount>
}
 8005672:	bd08      	pop	{r3, pc}

08005674 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[MAX_STATIC_ALLOC_SIZE];
  return mem;
}
 8005674:	4800      	ldr	r0, [pc, #0]	; (8005678 <USBD_static_malloc+0x4>)
 8005676:	4770      	bx	lr
 8005678:	20000ba8 	.word	0x20000ba8

0800567c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800567c:	4770      	bx	lr
	...

08005680 <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(hUSBDDeviceDesc);
 8005680:	2312      	movs	r3, #18
 8005682:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)hUSBDDeviceDesc;
}
 8005684:	4800      	ldr	r0, [pc, #0]	; (8005688 <USBD_VCP_DeviceDescriptor+0x8>)
 8005686:	4770      	bx	lr
 8005688:	08019cdd 	.word	0x08019cdd

0800568c <USBD_VCP_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 800568c:	2304      	movs	r3, #4
 800568e:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_LangIDDesc;
}
 8005690:	4800      	ldr	r0, [pc, #0]	; (8005694 <USBD_VCP_LangIDStrDescriptor+0x8>)
 8005692:	4770      	bx	lr
 8005694:	08019c8c 	.word	0x08019c8c

08005698 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8005698:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800569a:	2400      	movs	r4, #0
 800569c:	b2e3      	uxtb	r3, r4
 800569e:	4293      	cmp	r3, r2
 80056a0:	d20d      	bcs.n	80056be <IntToUnicode+0x26>
  {
    if( ((value >> 28)) < 0xA )
 80056a2:	0f03      	lsrs	r3, r0, #28
 80056a4:	2b09      	cmp	r3, #9
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 80056a6:	bf94      	ite	ls
 80056a8:	3330      	addls	r3, #48	; 0x30
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80056aa:	3337      	addhi	r3, #55	; 0x37
 80056ac:	f801 3014 	strb.w	r3, [r1, r4, lsl #1]
 80056b0:	eb01 0344 	add.w	r3, r1, r4, lsl #1
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80056b4:	2500      	movs	r5, #0
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 80056b6:	0100      	lsls	r0, r0, #4
    
    pbuf[ 2* idx + 1] = 0;
 80056b8:	705d      	strb	r5, [r3, #1]
 80056ba:	3401      	adds	r4, #1
 80056bc:	e7ee      	b.n	800569c <IntToUnicode+0x4>
  }
}
 80056be:	bd30      	pop	{r4, r5, pc}

080056c0 <USBD_VCP_SerialStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = USB_SIZ_STRING_SERIAL;
 80056c0:	231a      	movs	r3, #26
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80056c2:	b510      	push	{r4, lr}
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;
  
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 80056c4:	4a09      	ldr	r2, [pc, #36]	; (80056ec <USBD_VCP_SerialStrDescriptor+0x2c>)
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = USB_SIZ_STRING_SERIAL;
 80056c6:	800b      	strh	r3, [r1, #0]
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;
  
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 80056c8:	4b09      	ldr	r3, [pc, #36]	; (80056f0 <USBD_VCP_SerialStrDescriptor+0x30>)
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
  
  deviceserial0 += deviceserial2;
 80056ca:	6850      	ldr	r0, [r2, #4]
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;
  
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 80056cc:	681b      	ldr	r3, [r3, #0]
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 80056ce:	6814      	ldr	r4, [r2, #0]
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
  
  deviceserial0 += deviceserial2;
  
  if (deviceserial0 != 0)
 80056d0:	1818      	adds	r0, r3, r0
 80056d2:	d008      	beq.n	80056e6 <USBD_VCP_SerialStrDescriptor+0x26>
  {
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 80056d4:	4907      	ldr	r1, [pc, #28]	; (80056f4 <USBD_VCP_SerialStrDescriptor+0x34>)
 80056d6:	2208      	movs	r2, #8
 80056d8:	f7ff ffde 	bl	8005698 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 80056dc:	4620      	mov	r0, r4
 80056de:	4906      	ldr	r1, [pc, #24]	; (80056f8 <USBD_VCP_SerialStrDescriptor+0x38>)
 80056e0:	2204      	movs	r2, #4
 80056e2:	f7ff ffd9 	bl	8005698 <IntToUnicode>
  
  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
  
  return USBD_StringSerial;
}
 80056e6:	4805      	ldr	r0, [pc, #20]	; (80056fc <USBD_VCP_SerialStrDescriptor+0x3c>)
 80056e8:	bd10      	pop	{r4, pc}
 80056ea:	bf00      	nop
 80056ec:	1ffff7b0 	.word	0x1ffff7b0
 80056f0:	1ffff7ac 	.word	0x1ffff7ac
 80056f4:	20000146 	.word	0x20000146
 80056f8:	20000156 	.word	0x20000156
 80056fc:	20000144 	.word	0x20000144

08005700 <USBD_VCP_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005700:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 8005702:	4c04      	ldr	r4, [pc, #16]	; (8005714 <USBD_VCP_ProductStrDescriptor+0x14>)
 8005704:	4804      	ldr	r0, [pc, #16]	; (8005718 <USBD_VCP_ProductStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005706:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 8005708:	4621      	mov	r1, r4
 800570a:	f7ff fd2a 	bl	8005162 <USBD_GetString>
  return USBD_StrDesc;
}
 800570e:	4620      	mov	r0, r4
 8005710:	bd10      	pop	{r4, pc}
 8005712:	bf00      	nop
 8005714:	20003cd8 	.word	0x20003cd8
 8005718:	08019c90 	.word	0x08019c90

0800571c <USBD_VCP_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800571c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800571e:	4c04      	ldr	r4, [pc, #16]	; (8005730 <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 8005720:	4804      	ldr	r0, [pc, #16]	; (8005734 <USBD_VCP_ManufacturerStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005722:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005724:	4621      	mov	r1, r4
 8005726:	f7ff fd1c 	bl	8005162 <USBD_GetString>
  return USBD_StrDesc;
}
 800572a:	4620      	mov	r0, r4
 800572c:	bd10      	pop	{r4, pc}
 800572e:	bf00      	nop
 8005730:	20003cd8 	.word	0x20003cd8
 8005734:	08019cb1 	.word	0x08019cb1

08005738 <USBD_VCP_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005738:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 800573a:	4c04      	ldr	r4, [pc, #16]	; (800574c <USBD_VCP_ConfigStrDescriptor+0x14>)
 800573c:	4804      	ldr	r0, [pc, #16]	; (8005750 <USBD_VCP_ConfigStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800573e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 8005740:	4621      	mov	r1, r4
 8005742:	f7ff fd0e 	bl	8005162 <USBD_GetString>
  return USBD_StrDesc;  
}
 8005746:	4620      	mov	r0, r4
 8005748:	bd10      	pop	{r4, pc}
 800574a:	bf00      	nop
 800574c:	20003cd8 	.word	0x20003cd8
 8005750:	08019cc4 	.word	0x08019cc4

08005754 <USBD_VCP_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005754:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8005756:	4c04      	ldr	r4, [pc, #16]	; (8005768 <USBD_VCP_InterfaceStrDescriptor+0x14>)
 8005758:	4804      	ldr	r0, [pc, #16]	; (800576c <USBD_VCP_InterfaceStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800575a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800575c:	4621      	mov	r1, r4
 800575e:	f7ff fd00 	bl	8005162 <USBD_GetString>
  return USBD_StrDesc;  
}
 8005762:	4620      	mov	r0, r4
 8005764:	bd10      	pop	{r4, pc}
 8005766:	bf00      	nop
 8005768:	20003cd8 	.word	0x20003cd8
 800576c:	08019ccf 	.word	0x08019ccf

08005770 <CDC_Itf_DeInit>:
  */
static int8_t CDC_Itf_DeInit(void)
{

  return (USBD_OK);
}
 8005770:	2000      	movs	r0, #0
 8005772:	4770      	bx	lr

08005774 <CDC_Itf_Receive>:
  * @param  Buf: Buffer of data to be transmitted
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Receive(uint8_t* Buf, uint32_t *Len)
{
 8005774:	b508      	push	{r3, lr}
 8005776:	460b      	mov	r3, r1
 8005778:	4602      	mov	r2, r0
  /* Write data into Terminal Rx buffer */
  TerminalInputBufferWrite(INDEX_USB, (char *)Buf, *Len);
 800577a:	4611      	mov	r1, r2
 800577c:	2000      	movs	r0, #0
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	f7fc feca 	bl	8002518 <TerminalInputBufferWrite>
  USBD_CDC_ReceivePacket(&hUSBDDevice);  /* Reset for next packet */
 8005784:	4802      	ldr	r0, [pc, #8]	; (8005790 <CDC_Itf_Receive+0x1c>)
 8005786:	f7ff fe55 	bl	8005434 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
}
 800578a:	2000      	movs	r0, #0
 800578c:	bd08      	pop	{r3, pc}
 800578e:	bf00      	nop
 8005790:	20003938 	.word	0x20003938

08005794 <CDC_Itf_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Init(void)
{
 8005794:	b508      	push	{r3, lr}
  //  USBD_CDC_SetTxBuffer(&hUSBDDevice, NULL, 0);
  USBD_CDC_SetRxBuffer(&hUSBDDevice, UserRxBuffer);
 8005796:	4903      	ldr	r1, [pc, #12]	; (80057a4 <CDC_Itf_Init+0x10>)
 8005798:	4803      	ldr	r0, [pc, #12]	; (80057a8 <CDC_Itf_Init+0x14>)
 800579a:	f7ff fe2e 	bl	80053fa <USBD_CDC_SetRxBuffer>


  return (USBD_OK);
}
 800579e:	2000      	movs	r0, #0
 80057a0:	bd08      	pop	{r3, pc}
 80057a2:	bf00      	nop
 80057a4:	20003e48 	.word	0x20003e48
 80057a8:	20003938 	.word	0x20003938

080057ac <CDC_Itf_Control>:
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Control (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{ 
  switch (cmd)
 80057ac:	2820      	cmp	r0, #32
 80057ae:	d012      	beq.n	80057d6 <CDC_Itf_Control+0x2a>
 80057b0:	2821      	cmp	r0, #33	; 0x21
 80057b2:	d122      	bne.n	80057fa <CDC_Itf_Control+0x4e>
    /* Set the new configuration */

    break;

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80057b4:	4b12      	ldr	r3, [pc, #72]	; (8005800 <CDC_Itf_Control+0x54>)
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	0a12      	lsrs	r2, r2, #8
 80057be:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 80057c0:	885a      	ldrh	r2, [r3, #2]
 80057c2:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 80057c4:	78da      	ldrb	r2, [r3, #3]
 80057c6:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 80057c8:	791a      	ldrb	r2, [r3, #4]
 80057ca:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 80057cc:	795a      	ldrb	r2, [r3, #5]
 80057ce:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;     
 80057d0:	799b      	ldrb	r3, [r3, #6]
 80057d2:	718b      	strb	r3, [r1, #6]
    
    /* Add your code here */
    break;
 80057d4:	e011      	b.n	80057fa <CDC_Itf_Control+0x4e>
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 80057d6:	788b      	ldrb	r3, [r1, #2]
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80057d8:	784a      	ldrb	r2, [r1, #1]
 80057da:	4809      	ldr	r0, [pc, #36]	; (8005800 <CDC_Itf_Control+0x54>)
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 80057dc:	041b      	lsls	r3, r3, #16
 80057de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80057e2:	780a      	ldrb	r2, [r1, #0]
 80057e4:	4313      	orrs	r3, r2
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 80057e6:	78ca      	ldrb	r2, [r1, #3]
 80057e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80057ec:	6003      	str	r3, [r0, #0]
                            (pbuf[2] << 16) | (pbuf[3] << 24));
    LineCoding.format     = pbuf[4];
 80057ee:	790b      	ldrb	r3, [r1, #4]
 80057f0:	7103      	strb	r3, [r0, #4]
    LineCoding.paritytype = pbuf[5];
 80057f2:	794b      	ldrb	r3, [r1, #5]
 80057f4:	7143      	strb	r3, [r0, #5]
    LineCoding.datatype   = pbuf[6];
 80057f6:	798b      	ldrb	r3, [r1, #6]
 80057f8:	7183      	strb	r3, [r0, #6]
  default:
    break;
  }
  
  return (USBD_OK);
}
 80057fa:	2000      	movs	r0, #0
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	20000160 	.word	0x20000160

08005804 <BSP_LED_Init>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8005804:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8005806:	4604      	mov	r4, r0
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8005808:	b086      	sub	sp, #24
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800580a:	b168      	cbz	r0, 8005828 <BSP_LED_Init+0x24>
 800580c:	2801      	cmp	r0, #1
 800580e:	d00b      	beq.n	8005828 <BSP_LED_Init+0x24>
 8005810:	2802      	cmp	r0, #2
 8005812:	d009      	beq.n	8005828 <BSP_LED_Init+0x24>
 8005814:	2803      	cmp	r0, #3
 8005816:	d007      	beq.n	8005828 <BSP_LED_Init+0x24>
 8005818:	2804      	cmp	r0, #4
 800581a:	d005      	beq.n	8005828 <BSP_LED_Init+0x24>
 800581c:	2805      	cmp	r0, #5
 800581e:	d003      	beq.n	8005828 <BSP_LED_Init+0x24>
 8005820:	2806      	cmp	r0, #6
 8005822:	d001      	beq.n	8005828 <BSP_LED_Init+0x24>
 8005824:	2807      	cmp	r0, #7
 8005826:	d104      	bne.n	8005832 <BSP_LED_Init+0x2e>
 8005828:	4a0d      	ldr	r2, [pc, #52]	; (8005860 <BSP_LED_Init+0x5c>)
 800582a:	6953      	ldr	r3, [r2, #20]
 800582c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005830:	6153      	str	r3, [r2, #20]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8005832:	4b0c      	ldr	r3, [pc, #48]	; (8005864 <BSP_LED_Init+0x60>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8005834:	4e0c      	ldr	r6, [pc, #48]	; (8005868 <BSP_LED_Init+0x64>)
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8005836:	f833 5014 	ldrh.w	r5, [r3, r4, lsl #1]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800583a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800583e:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005840:	2301      	movs	r3, #1
 8005842:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005844:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8005846:	a901      	add	r1, sp, #4

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005848:	2303      	movs	r3, #3
 800584a:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800584c:	f7fd fed0 	bl	80035f0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8005850:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005854:	4629      	mov	r1, r5
 8005856:	2200      	movs	r2, #0
 8005858:	f7fd ff94 	bl	8003784 <HAL_GPIO_WritePin>
}
 800585c:	b006      	add	sp, #24
 800585e:	bd70      	pop	{r4, r5, r6, pc}
 8005860:	40021000 	.word	0x40021000
 8005864:	08019cf0 	.word	0x08019cf0
 8005868:	2000017c 	.word	0x2000017c

0800586c <BSP_LED_On>:
  *     @arg LED10
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 800586c:	4a04      	ldr	r2, [pc, #16]	; (8005880 <BSP_LED_On+0x14>)
  *     @arg LED9
  *     @arg LED10
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800586e:	4603      	mov	r3, r0
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8005870:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8005874:	4a03      	ldr	r2, [pc, #12]	; (8005884 <BSP_LED_On+0x18>)
 8005876:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800587a:	2201      	movs	r2, #1
 800587c:	f7fd bf82 	b.w	8003784 <HAL_GPIO_WritePin>
 8005880:	2000017c 	.word	0x2000017c
 8005884:	08019cf0 	.word	0x08019cf0

08005888 <BSP_LED_Off>:
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8005888:	4a04      	ldr	r2, [pc, #16]	; (800589c <BSP_LED_Off+0x14>)
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800588a:	4603      	mov	r3, r0
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 800588c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8005890:	4a03      	ldr	r2, [pc, #12]	; (80058a0 <BSP_LED_Off+0x18>)
 8005892:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005896:	2200      	movs	r2, #0
 8005898:	f7fd bf74 	b.w	8003784 <HAL_GPIO_WritePin>
 800589c:	2000017c 	.word	0x2000017c
 80058a0:	08019cf0 	.word	0x08019cf0

080058a4 <BSP_LED_Toggle>:
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80058a4:	4a04      	ldr	r2, [pc, #16]	; (80058b8 <BSP_LED_Toggle+0x14>)
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80058a6:	4603      	mov	r3, r0
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80058a8:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80058ac:	4a03      	ldr	r2, [pc, #12]	; (80058bc <BSP_LED_Toggle+0x18>)
 80058ae:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80058b2:	f7fd bf6c 	b.w	800378e <HAL_GPIO_TogglePin>
 80058b6:	bf00      	nop
 80058b8:	2000017c 	.word	0x2000017c
 80058bc:	08019cf0 	.word	0x08019cf0

080058c0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80058c0:	b510      	push	{r4, lr}
 80058c2:	4b19      	ldr	r3, [pc, #100]	; (8005928 <BSP_PB_Init+0x68>)
 80058c4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80058c6:	b918      	cbnz	r0, 80058d0 <BSP_PB_Init+0x10>
 80058c8:	695a      	ldr	r2, [r3, #20]
 80058ca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80058ce:	615a      	str	r2, [r3, #20]
  __SYSCFG_CLK_ENABLE();
 80058d0:	699a      	ldr	r2, [r3, #24]
 80058d2:	f042 0201 	orr.w	r2, r2, #1
 80058d6:	619a      	str	r2, [r3, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80058d8:	b969      	cbnz	r1, 80058f6 <BSP_PB_Init+0x36>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80058da:	2301      	movs	r3, #1
 80058dc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80058de:	2302      	movs	r3, #2
 80058e0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80058e2:	2303      	movs	r3, #3
 80058e4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80058e6:	4b11      	ldr	r3, [pc, #68]	; (800592c <BSP_PB_Init+0x6c>)

  if (ButtonMode == BUTTON_MODE_GPIO)
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80058e8:	9102      	str	r1, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80058ea:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80058ee:	a901      	add	r1, sp, #4
 80058f0:	f7fd fe7e 	bl	80035f0 <HAL_GPIO_Init>
 80058f4:	e016      	b.n	8005924 <BSP_PB_Init+0x64>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 80058f6:	2901      	cmp	r1, #1
 80058f8:	d114      	bne.n	8005924 <BSP_PB_Init+0x64>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80058fa:	2303      	movs	r3, #3
 80058fc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 80058fe:	4b0c      	ldr	r3, [pc, #48]	; (8005930 <BSP_PB_Init+0x70>)
 8005900:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005902:	4b0a      	ldr	r3, [pc, #40]	; (800592c <BSP_PB_Init+0x6c>)
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005904:	9101      	str	r1, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005906:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

  if (ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800590a:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800590c:	a901      	add	r1, sp, #4

  if (ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800590e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005910:	f7fd fe6e 	bl	80035f0 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8005914:	2006      	movs	r0, #6
 8005916:	210f      	movs	r1, #15
 8005918:	4622      	mov	r2, r4
 800591a:	f7fd fe17 	bl	800354c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800591e:	2006      	movs	r0, #6
 8005920:	f7fd fe44 	bl	80035ac <HAL_NVIC_EnableIRQ>
  }
}
 8005924:	b006      	add	sp, #24
 8005926:	bd10      	pop	{r4, pc}
 8005928:	40021000 	.word	0x40021000
 800592c:	20000178 	.word	0x20000178
 8005930:	10110000 	.word	0x10110000

08005934 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8005934:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8005936:	4b03      	ldr	r3, [pc, #12]	; (8005944 <BSP_PB_GetState+0x10>)
 8005938:	2101      	movs	r1, #1
 800593a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800593e:	f7fd ff1b 	bl	8003778 <HAL_GPIO_ReadPin>
}
 8005942:	bd08      	pop	{r3, pc}
 8005944:	20000178 	.word	0x20000178

08005948 <BSP_ACCELERO_GetXYZ>:
  *                 pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
* @retval None
*/
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
  if(AccelerometerDrv->GetXYZ!= NULL)
 8005948:	4b02      	ldr	r3, [pc, #8]	; (8005954 <BSP_ACCELERO_GetXYZ+0xc>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594e:	b103      	cbz	r3, 8005952 <BSP_ACCELERO_GetXYZ+0xa>
  {   
    AccelerometerDrv->GetXYZ(pDataXYZ);
 8005950:	4718      	bx	r3
 8005952:	4770      	bx	lr
 8005954:	20000dd8 	.word	0x20000dd8

08005958 <BSP_GYRO_GetXYZ>:
  * @param pfData: pointer on floating array         
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
  if(GyroscopeDrv->GetXYZ!= NULL)
 8005958:	4b02      	ldr	r3, [pc, #8]	; (8005964 <BSP_GYRO_GetXYZ+0xc>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595e:	b103      	cbz	r3, 8005962 <BSP_GYRO_GetXYZ+0xa>
  {
	GyroscopeDrv->GetXYZ(pfData);
 8005960:	4718      	bx	r3
 8005962:	4770      	bx	lr
 8005964:	20000ddc 	.word	0x20000ddc

08005968 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005968:	f8df d034 	ldr.w	sp, [pc, #52]	; 80059a0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800596c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800596e:	e003      	b.n	8005978 <LoopCopyDataInit>

08005970 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005970:	4b0c      	ldr	r3, [pc, #48]	; (80059a4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005972:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005974:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005976:	3104      	adds	r1, #4

08005978 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005978:	480b      	ldr	r0, [pc, #44]	; (80059a8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800597a:	4b0c      	ldr	r3, [pc, #48]	; (80059ac <LoopForever+0xe>)
	adds	r2, r0, r1
 800597c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800597e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005980:	d3f6      	bcc.n	8005970 <CopyDataInit>
	ldr	r2, =_sbss
 8005982:	4a0b      	ldr	r2, [pc, #44]	; (80059b0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005984:	e002      	b.n	800598c <LoopFillZerobss>

08005986 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005986:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005988:	f842 3b04 	str.w	r3, [r2], #4

0800598c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800598c:	4b09      	ldr	r3, [pc, #36]	; (80059b4 <LoopForever+0x16>)
	cmp	r2, r3
 800598e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005990:	d3f9      	bcc.n	8005986 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005992:	f7fd f899 	bl	8002ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005996:	f000 f817 	bl	80059c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800599a:	f7fb fcab 	bl	80012f4 <main>

0800599e <LoopForever>:

LoopForever:
    b LoopForever
 800599e:	e7fe      	b.n	800599e <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80059a0:	20008000 	.word	0x20008000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80059a4:	08019fa4 	.word	0x08019fa4
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80059a8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80059ac:	20000a3c 	.word	0x20000a3c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80059b0:	20000a3c 	.word	0x20000a3c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80059b4:	20004684 	.word	0x20004684

080059b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80059b8:	e7fe      	b.n	80059b8 <ADC1_2_IRQHandler>
	...

080059bc <__errno>:
 80059bc:	4b01      	ldr	r3, [pc, #4]	; (80059c4 <__errno+0x8>)
 80059be:	6818      	ldr	r0, [r3, #0]
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	200005c8 	.word	0x200005c8

080059c8 <__libc_init_array>:
 80059c8:	b570      	push	{r4, r5, r6, lr}
 80059ca:	4e0f      	ldr	r6, [pc, #60]	; (8005a08 <__libc_init_array+0x40>)
 80059cc:	4d0f      	ldr	r5, [pc, #60]	; (8005a0c <__libc_init_array+0x44>)
 80059ce:	1b76      	subs	r6, r6, r5
 80059d0:	10b6      	asrs	r6, r6, #2
 80059d2:	bf18      	it	ne
 80059d4:	2400      	movne	r4, #0
 80059d6:	d005      	beq.n	80059e4 <__libc_init_array+0x1c>
 80059d8:	3401      	adds	r4, #1
 80059da:	f855 3b04 	ldr.w	r3, [r5], #4
 80059de:	4798      	blx	r3
 80059e0:	42a6      	cmp	r6, r4
 80059e2:	d1f9      	bne.n	80059d8 <__libc_init_array+0x10>
 80059e4:	4e0a      	ldr	r6, [pc, #40]	; (8005a10 <__libc_init_array+0x48>)
 80059e6:	4d0b      	ldr	r5, [pc, #44]	; (8005a14 <__libc_init_array+0x4c>)
 80059e8:	1b76      	subs	r6, r6, r5
 80059ea:	f004 fcf7 	bl	800a3dc <_init>
 80059ee:	10b6      	asrs	r6, r6, #2
 80059f0:	bf18      	it	ne
 80059f2:	2400      	movne	r4, #0
 80059f4:	d006      	beq.n	8005a04 <__libc_init_array+0x3c>
 80059f6:	3401      	adds	r4, #1
 80059f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059fc:	4798      	blx	r3
 80059fe:	42a6      	cmp	r6, r4
 8005a00:	d1f9      	bne.n	80059f6 <__libc_init_array+0x2e>
 8005a02:	bd70      	pop	{r4, r5, r6, pc}
 8005a04:	bd70      	pop	{r4, r5, r6, pc}
 8005a06:	bf00      	nop
 8005a08:	08019f98 	.word	0x08019f98
 8005a0c:	08019f98 	.word	0x08019f98
 8005a10:	08019fa0 	.word	0x08019fa0
 8005a14:	08019f98 	.word	0x08019f98

08005a18 <memset>:
 8005a18:	b470      	push	{r4, r5, r6}
 8005a1a:	0784      	lsls	r4, r0, #30
 8005a1c:	d046      	beq.n	8005aac <memset+0x94>
 8005a1e:	1e54      	subs	r4, r2, #1
 8005a20:	2a00      	cmp	r2, #0
 8005a22:	d041      	beq.n	8005aa8 <memset+0x90>
 8005a24:	b2cd      	uxtb	r5, r1
 8005a26:	4603      	mov	r3, r0
 8005a28:	e002      	b.n	8005a30 <memset+0x18>
 8005a2a:	1e62      	subs	r2, r4, #1
 8005a2c:	b3e4      	cbz	r4, 8005aa8 <memset+0x90>
 8005a2e:	4614      	mov	r4, r2
 8005a30:	f803 5b01 	strb.w	r5, [r3], #1
 8005a34:	079a      	lsls	r2, r3, #30
 8005a36:	d1f8      	bne.n	8005a2a <memset+0x12>
 8005a38:	2c03      	cmp	r4, #3
 8005a3a:	d92e      	bls.n	8005a9a <memset+0x82>
 8005a3c:	b2cd      	uxtb	r5, r1
 8005a3e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8005a42:	2c0f      	cmp	r4, #15
 8005a44:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005a48:	d919      	bls.n	8005a7e <memset+0x66>
 8005a4a:	f103 0210 	add.w	r2, r3, #16
 8005a4e:	4626      	mov	r6, r4
 8005a50:	3e10      	subs	r6, #16
 8005a52:	2e0f      	cmp	r6, #15
 8005a54:	f842 5c10 	str.w	r5, [r2, #-16]
 8005a58:	f842 5c0c 	str.w	r5, [r2, #-12]
 8005a5c:	f842 5c08 	str.w	r5, [r2, #-8]
 8005a60:	f842 5c04 	str.w	r5, [r2, #-4]
 8005a64:	f102 0210 	add.w	r2, r2, #16
 8005a68:	d8f2      	bhi.n	8005a50 <memset+0x38>
 8005a6a:	f1a4 0210 	sub.w	r2, r4, #16
 8005a6e:	f022 020f 	bic.w	r2, r2, #15
 8005a72:	f004 040f 	and.w	r4, r4, #15
 8005a76:	3210      	adds	r2, #16
 8005a78:	2c03      	cmp	r4, #3
 8005a7a:	4413      	add	r3, r2
 8005a7c:	d90d      	bls.n	8005a9a <memset+0x82>
 8005a7e:	461e      	mov	r6, r3
 8005a80:	4622      	mov	r2, r4
 8005a82:	3a04      	subs	r2, #4
 8005a84:	2a03      	cmp	r2, #3
 8005a86:	f846 5b04 	str.w	r5, [r6], #4
 8005a8a:	d8fa      	bhi.n	8005a82 <memset+0x6a>
 8005a8c:	1f22      	subs	r2, r4, #4
 8005a8e:	f022 0203 	bic.w	r2, r2, #3
 8005a92:	3204      	adds	r2, #4
 8005a94:	4413      	add	r3, r2
 8005a96:	f004 0403 	and.w	r4, r4, #3
 8005a9a:	b12c      	cbz	r4, 8005aa8 <memset+0x90>
 8005a9c:	b2c9      	uxtb	r1, r1
 8005a9e:	441c      	add	r4, r3
 8005aa0:	f803 1b01 	strb.w	r1, [r3], #1
 8005aa4:	42a3      	cmp	r3, r4
 8005aa6:	d1fb      	bne.n	8005aa0 <memset+0x88>
 8005aa8:	bc70      	pop	{r4, r5, r6}
 8005aaa:	4770      	bx	lr
 8005aac:	4614      	mov	r4, r2
 8005aae:	4603      	mov	r3, r0
 8005ab0:	e7c2      	b.n	8005a38 <memset+0x20>
 8005ab2:	bf00      	nop

08005ab4 <printf>:
 8005ab4:	b40f      	push	{r0, r1, r2, r3}
 8005ab6:	b500      	push	{lr}
 8005ab8:	4907      	ldr	r1, [pc, #28]	; (8005ad8 <printf+0x24>)
 8005aba:	b083      	sub	sp, #12
 8005abc:	ab04      	add	r3, sp, #16
 8005abe:	6808      	ldr	r0, [r1, #0]
 8005ac0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ac4:	6881      	ldr	r1, [r0, #8]
 8005ac6:	9301      	str	r3, [sp, #4]
 8005ac8:	f000 fa4e 	bl	8005f68 <_vfprintf_r>
 8005acc:	b003      	add	sp, #12
 8005ace:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ad2:	b004      	add	sp, #16
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	200005c8 	.word	0x200005c8

08005adc <putchar>:
 8005adc:	4b03      	ldr	r3, [pc, #12]	; (8005aec <putchar+0x10>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4601      	mov	r1, r0
 8005ae2:	689a      	ldr	r2, [r3, #8]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f003 bfe5 	b.w	8009ab4 <_putc_r>
 8005aea:	bf00      	nop
 8005aec:	200005c8 	.word	0x200005c8

08005af0 <_puts_r>:
 8005af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005af2:	4604      	mov	r4, r0
 8005af4:	b089      	sub	sp, #36	; 0x24
 8005af6:	4608      	mov	r0, r1
 8005af8:	460d      	mov	r5, r1
 8005afa:	f000 f92b 	bl	8005d54 <strlen>
 8005afe:	68a3      	ldr	r3, [r4, #8]
 8005b00:	4f11      	ldr	r7, [pc, #68]	; (8005b48 <_puts_r+0x58>)
 8005b02:	899a      	ldrh	r2, [r3, #12]
 8005b04:	9504      	str	r5, [sp, #16]
 8005b06:	2102      	movs	r1, #2
 8005b08:	f100 0e01 	add.w	lr, r0, #1
 8005b0c:	2601      	movs	r6, #1
 8005b0e:	ad04      	add	r5, sp, #16
 8005b10:	9102      	str	r1, [sp, #8]
 8005b12:	0491      	lsls	r1, r2, #18
 8005b14:	9005      	str	r0, [sp, #20]
 8005b16:	f8cd e00c 	str.w	lr, [sp, #12]
 8005b1a:	9706      	str	r7, [sp, #24]
 8005b1c:	9607      	str	r6, [sp, #28]
 8005b1e:	9501      	str	r5, [sp, #4]
 8005b20:	d406      	bmi.n	8005b30 <_puts_r+0x40>
 8005b22:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8005b24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b28:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8005b2c:	819a      	strh	r2, [r3, #12]
 8005b2e:	6659      	str	r1, [r3, #100]	; 0x64
 8005b30:	4620      	mov	r0, r4
 8005b32:	4619      	mov	r1, r3
 8005b34:	aa01      	add	r2, sp, #4
 8005b36:	f002 ff47 	bl	80089c8 <__sfvwrite_r>
 8005b3a:	2800      	cmp	r0, #0
 8005b3c:	bf14      	ite	ne
 8005b3e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8005b42:	200a      	moveq	r0, #10
 8005b44:	b009      	add	sp, #36	; 0x24
 8005b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b48:	08019e0c 	.word	0x08019e0c

08005b4c <puts>:
 8005b4c:	4b02      	ldr	r3, [pc, #8]	; (8005b58 <puts+0xc>)
 8005b4e:	4601      	mov	r1, r0
 8005b50:	6818      	ldr	r0, [r3, #0]
 8005b52:	f7ff bfcd 	b.w	8005af0 <_puts_r>
 8005b56:	bf00      	nop
 8005b58:	200005c8 	.word	0x200005c8

08005b5c <setvbuf>:
 8005b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b60:	4c3a      	ldr	r4, [pc, #232]	; (8005c4c <setvbuf+0xf0>)
 8005b62:	6826      	ldr	r6, [r4, #0]
 8005b64:	460d      	mov	r5, r1
 8005b66:	4604      	mov	r4, r0
 8005b68:	4690      	mov	r8, r2
 8005b6a:	461f      	mov	r7, r3
 8005b6c:	b116      	cbz	r6, 8005b74 <setvbuf+0x18>
 8005b6e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d03c      	beq.n	8005bee <setvbuf+0x92>
 8005b74:	f1b8 0f02 	cmp.w	r8, #2
 8005b78:	d82f      	bhi.n	8005bda <setvbuf+0x7e>
 8005b7a:	2f00      	cmp	r7, #0
 8005b7c:	db2d      	blt.n	8005bda <setvbuf+0x7e>
 8005b7e:	4621      	mov	r1, r4
 8005b80:	4630      	mov	r0, r6
 8005b82:	f002 fd47 	bl	8008614 <_fflush_r>
 8005b86:	89a1      	ldrh	r1, [r4, #12]
 8005b88:	2300      	movs	r3, #0
 8005b8a:	6063      	str	r3, [r4, #4]
 8005b8c:	61a3      	str	r3, [r4, #24]
 8005b8e:	060b      	lsls	r3, r1, #24
 8005b90:	d427      	bmi.n	8005be2 <setvbuf+0x86>
 8005b92:	f021 0183 	bic.w	r1, r1, #131	; 0x83
 8005b96:	b289      	uxth	r1, r1
 8005b98:	f1b8 0f02 	cmp.w	r8, #2
 8005b9c:	81a1      	strh	r1, [r4, #12]
 8005b9e:	d02a      	beq.n	8005bf6 <setvbuf+0x9a>
 8005ba0:	2d00      	cmp	r5, #0
 8005ba2:	d036      	beq.n	8005c12 <setvbuf+0xb6>
 8005ba4:	f1b8 0f01 	cmp.w	r8, #1
 8005ba8:	d011      	beq.n	8005bce <setvbuf+0x72>
 8005baa:	b289      	uxth	r1, r1
 8005bac:	f001 0008 	and.w	r0, r1, #8
 8005bb0:	4b27      	ldr	r3, [pc, #156]	; (8005c50 <setvbuf+0xf4>)
 8005bb2:	63f3      	str	r3, [r6, #60]	; 0x3c
 8005bb4:	b280      	uxth	r0, r0
 8005bb6:	6025      	str	r5, [r4, #0]
 8005bb8:	6125      	str	r5, [r4, #16]
 8005bba:	6167      	str	r7, [r4, #20]
 8005bbc:	b178      	cbz	r0, 8005bde <setvbuf+0x82>
 8005bbe:	f011 0f03 	tst.w	r1, #3
 8005bc2:	bf18      	it	ne
 8005bc4:	2700      	movne	r7, #0
 8005bc6:	60a7      	str	r7, [r4, #8]
 8005bc8:	2000      	movs	r0, #0
 8005bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bce:	f041 0101 	orr.w	r1, r1, #1
 8005bd2:	427b      	negs	r3, r7
 8005bd4:	81a1      	strh	r1, [r4, #12]
 8005bd6:	61a3      	str	r3, [r4, #24]
 8005bd8:	e7e7      	b.n	8005baa <setvbuf+0x4e>
 8005bda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005be2:	6921      	ldr	r1, [r4, #16]
 8005be4:	4630      	mov	r0, r6
 8005be6:	f002 fe17 	bl	8008818 <_free_r>
 8005bea:	89a1      	ldrh	r1, [r4, #12]
 8005bec:	e7d1      	b.n	8005b92 <setvbuf+0x36>
 8005bee:	4630      	mov	r0, r6
 8005bf0:	f002 fda4 	bl	800873c <__sinit>
 8005bf4:	e7be      	b.n	8005b74 <setvbuf+0x18>
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8005bfc:	f041 0102 	orr.w	r1, r1, #2
 8005c00:	2500      	movs	r5, #0
 8005c02:	2201      	movs	r2, #1
 8005c04:	81a1      	strh	r1, [r4, #12]
 8005c06:	60a5      	str	r5, [r4, #8]
 8005c08:	6023      	str	r3, [r4, #0]
 8005c0a:	6123      	str	r3, [r4, #16]
 8005c0c:	6162      	str	r2, [r4, #20]
 8005c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c12:	2f00      	cmp	r7, #0
 8005c14:	bf08      	it	eq
 8005c16:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 8005c1a:	4638      	mov	r0, r7
 8005c1c:	f003 f908 	bl	8008e30 <malloc>
 8005c20:	4605      	mov	r5, r0
 8005c22:	b128      	cbz	r0, 8005c30 <setvbuf+0xd4>
 8005c24:	89a1      	ldrh	r1, [r4, #12]
 8005c26:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005c2a:	b289      	uxth	r1, r1
 8005c2c:	81a1      	strh	r1, [r4, #12]
 8005c2e:	e7b9      	b.n	8005ba4 <setvbuf+0x48>
 8005c30:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005c34:	f003 f8fc 	bl	8008e30 <malloc>
 8005c38:	4605      	mov	r5, r0
 8005c3a:	b918      	cbnz	r0, 8005c44 <setvbuf+0xe8>
 8005c3c:	89a1      	ldrh	r1, [r4, #12]
 8005c3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c42:	e7d9      	b.n	8005bf8 <setvbuf+0x9c>
 8005c44:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8005c48:	e7ec      	b.n	8005c24 <setvbuf+0xc8>
 8005c4a:	bf00      	nop
 8005c4c:	200005c8 	.word	0x200005c8
 8005c50:	08008641 	.word	0x08008641

08005c54 <strcasecmp>:
 8005c54:	4b0f      	ldr	r3, [pc, #60]	; (8005c94 <strcasecmp+0x40>)
 8005c56:	b430      	push	{r4, r5}
 8005c58:	681d      	ldr	r5, [r3, #0]
 8005c5a:	e002      	b.n	8005c62 <strcasecmp+0xe>
 8005c5c:	1ad2      	subs	r2, r2, r3
 8005c5e:	d116      	bne.n	8005c8e <strcasecmp+0x3a>
 8005c60:	b1ab      	cbz	r3, 8005c8e <strcasecmp+0x3a>
 8005c62:	f810 4b01 	ldrb.w	r4, [r0], #1
 8005c66:	192b      	adds	r3, r5, r4
 8005c68:	4622      	mov	r2, r4
 8005c6a:	785b      	ldrb	r3, [r3, #1]
 8005c6c:	f003 0303 	and.w	r3, r3, #3
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c76:	bf08      	it	eq
 8005c78:	f104 0220 	addeq.w	r2, r4, #32
 8005c7c:	18ec      	adds	r4, r5, r3
 8005c7e:	7864      	ldrb	r4, [r4, #1]
 8005c80:	f004 0403 	and.w	r4, r4, #3
 8005c84:	2c01      	cmp	r4, #1
 8005c86:	d1e9      	bne.n	8005c5c <strcasecmp+0x8>
 8005c88:	3320      	adds	r3, #32
 8005c8a:	1ad2      	subs	r2, r2, r3
 8005c8c:	d0e9      	beq.n	8005c62 <strcasecmp+0xe>
 8005c8e:	4610      	mov	r0, r2
 8005c90:	bc30      	pop	{r4, r5}
 8005c92:	4770      	bx	lr
 8005c94:	2000019c 	.word	0x2000019c

08005c98 <strcpy>:
 8005c98:	ea80 0201 	eor.w	r2, r0, r1
 8005c9c:	4684      	mov	ip, r0
 8005c9e:	f012 0f03 	tst.w	r2, #3
 8005ca2:	d14f      	bne.n	8005d44 <strcpy+0xac>
 8005ca4:	f011 0f03 	tst.w	r1, #3
 8005ca8:	d132      	bne.n	8005d10 <strcpy+0x78>
 8005caa:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8005cae:	f011 0f04 	tst.w	r1, #4
 8005cb2:	f851 3b04 	ldr.w	r3, [r1], #4
 8005cb6:	d00b      	beq.n	8005cd0 <strcpy+0x38>
 8005cb8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8005cbc:	439a      	bics	r2, r3
 8005cbe:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8005cc2:	bf04      	itt	eq
 8005cc4:	f84c 3b04 	streq.w	r3, [ip], #4
 8005cc8:	f851 3b04 	ldreq.w	r3, [r1], #4
 8005ccc:	d116      	bne.n	8005cfc <strcpy+0x64>
 8005cce:	bf00      	nop
 8005cd0:	f851 4b04 	ldr.w	r4, [r1], #4
 8005cd4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8005cd8:	439a      	bics	r2, r3
 8005cda:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8005cde:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8005ce2:	d10b      	bne.n	8005cfc <strcpy+0x64>
 8005ce4:	f84c 3b04 	str.w	r3, [ip], #4
 8005ce8:	43a2      	bics	r2, r4
 8005cea:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8005cee:	bf04      	itt	eq
 8005cf0:	f851 3b04 	ldreq.w	r3, [r1], #4
 8005cf4:	f84c 4b04 	streq.w	r4, [ip], #4
 8005cf8:	d0ea      	beq.n	8005cd0 <strcpy+0x38>
 8005cfa:	4623      	mov	r3, r4
 8005cfc:	f80c 3b01 	strb.w	r3, [ip], #1
 8005d00:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005d04:	ea4f 2333 	mov.w	r3, r3, ror #8
 8005d08:	d1f8      	bne.n	8005cfc <strcpy+0x64>
 8005d0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d0e:	4770      	bx	lr
 8005d10:	f011 0f01 	tst.w	r1, #1
 8005d14:	d006      	beq.n	8005d24 <strcpy+0x8c>
 8005d16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d1a:	f80c 2b01 	strb.w	r2, [ip], #1
 8005d1e:	2a00      	cmp	r2, #0
 8005d20:	bf08      	it	eq
 8005d22:	4770      	bxeq	lr
 8005d24:	f011 0f02 	tst.w	r1, #2
 8005d28:	d0bf      	beq.n	8005caa <strcpy+0x12>
 8005d2a:	f831 2b02 	ldrh.w	r2, [r1], #2
 8005d2e:	f012 0fff 	tst.w	r2, #255	; 0xff
 8005d32:	bf16      	itet	ne
 8005d34:	f82c 2b02 	strhne.w	r2, [ip], #2
 8005d38:	f88c 2000 	strbeq.w	r2, [ip]
 8005d3c:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8005d40:	d1b3      	bne.n	8005caa <strcpy+0x12>
 8005d42:	4770      	bx	lr
 8005d44:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d48:	f80c 2b01 	strb.w	r2, [ip], #1
 8005d4c:	2a00      	cmp	r2, #0
 8005d4e:	d1f9      	bne.n	8005d44 <strcpy+0xac>
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop

08005d54 <strlen>:
 8005d54:	f020 0103 	bic.w	r1, r0, #3
 8005d58:	f010 0003 	ands.w	r0, r0, #3
 8005d5c:	f1c0 0000 	rsb	r0, r0, #0
 8005d60:	f851 3b04 	ldr.w	r3, [r1], #4
 8005d64:	f100 0c04 	add.w	ip, r0, #4
 8005d68:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8005d6c:	f06f 0200 	mvn.w	r2, #0
 8005d70:	bf1c      	itt	ne
 8005d72:	fa22 f20c 	lsrne.w	r2, r2, ip
 8005d76:	4313      	orrne	r3, r2
 8005d78:	f04f 0c01 	mov.w	ip, #1
 8005d7c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8005d80:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8005d84:	eba3 020c 	sub.w	r2, r3, ip
 8005d88:	ea22 0203 	bic.w	r2, r2, r3
 8005d8c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8005d90:	bf04      	itt	eq
 8005d92:	f851 3b04 	ldreq.w	r3, [r1], #4
 8005d96:	3004      	addeq	r0, #4
 8005d98:	d0f4      	beq.n	8005d84 <strlen+0x30>
 8005d9a:	f1c2 0100 	rsb	r1, r2, #0
 8005d9e:	ea02 0201 	and.w	r2, r2, r1
 8005da2:	fab2 f282 	clz	r2, r2
 8005da6:	f1c2 021f 	rsb	r2, r2, #31
 8005daa:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8005dae:	4770      	bx	lr

08005db0 <strtok>:
 8005db0:	4b02      	ldr	r3, [pc, #8]	; (8005dbc <strtok+0xc>)
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	2301      	movs	r3, #1
 8005db6:	325c      	adds	r2, #92	; 0x5c
 8005db8:	f000 b802 	b.w	8005dc0 <__strtok_r>
 8005dbc:	200005c8 	.word	0x200005c8

08005dc0 <__strtok_r>:
 8005dc0:	b4f0      	push	{r4, r5, r6, r7}
 8005dc2:	b320      	cbz	r0, 8005e0e <__strtok_r+0x4e>
 8005dc4:	4607      	mov	r7, r0
 8005dc6:	460d      	mov	r5, r1
 8005dc8:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005dcc:	e001      	b.n	8005dd2 <__strtok_r+0x12>
 8005dce:	42a6      	cmp	r6, r4
 8005dd0:	d016      	beq.n	8005e00 <__strtok_r+0x40>
 8005dd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005dd6:	2c00      	cmp	r4, #0
 8005dd8:	d1f9      	bne.n	8005dce <__strtok_r+0xe>
 8005dda:	b1ee      	cbz	r6, 8005e18 <__strtok_r+0x58>
 8005ddc:	463e      	mov	r6, r7
 8005dde:	460c      	mov	r4, r1
 8005de0:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005de4:	e000      	b.n	8005de8 <__strtok_r+0x28>
 8005de6:	b173      	cbz	r3, 8005e06 <__strtok_r+0x46>
 8005de8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005dec:	42ab      	cmp	r3, r5
 8005dee:	d1fa      	bne.n	8005de6 <__strtok_r+0x26>
 8005df0:	b15d      	cbz	r5, 8005e0a <__strtok_r+0x4a>
 8005df2:	2300      	movs	r3, #0
 8005df4:	703b      	strb	r3, [r7, #0]
 8005df6:	6016      	str	r6, [r2, #0]
 8005df8:	4606      	mov	r6, r0
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	bcf0      	pop	{r4, r5, r6, r7}
 8005dfe:	4770      	bx	lr
 8005e00:	b163      	cbz	r3, 8005e1c <__strtok_r+0x5c>
 8005e02:	4638      	mov	r0, r7
 8005e04:	e7de      	b.n	8005dc4 <__strtok_r+0x4>
 8005e06:	4637      	mov	r7, r6
 8005e08:	e7e8      	b.n	8005ddc <__strtok_r+0x1c>
 8005e0a:	462e      	mov	r6, r5
 8005e0c:	e7f3      	b.n	8005df6 <__strtok_r+0x36>
 8005e0e:	6810      	ldr	r0, [r2, #0]
 8005e10:	2800      	cmp	r0, #0
 8005e12:	d1d7      	bne.n	8005dc4 <__strtok_r+0x4>
 8005e14:	4606      	mov	r6, r0
 8005e16:	e7f0      	b.n	8005dfa <__strtok_r+0x3a>
 8005e18:	6016      	str	r6, [r2, #0]
 8005e1a:	e7ee      	b.n	8005dfa <__strtok_r+0x3a>
 8005e1c:	6017      	str	r7, [r2, #0]
 8005e1e:	4606      	mov	r6, r0
 8005e20:	7003      	strb	r3, [r0, #0]
 8005e22:	e7ea      	b.n	8005dfa <__strtok_r+0x3a>

08005e24 <_strtoul_r>:
 8005e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e28:	4c46      	ldr	r4, [pc, #280]	; (8005f44 <_strtoul_r+0x120>)
 8005e2a:	460f      	mov	r7, r1
 8005e2c:	f8d4 e000 	ldr.w	lr, [r4]
 8005e30:	e000      	b.n	8005e34 <_strtoul_r+0x10>
 8005e32:	4627      	mov	r7, r4
 8005e34:	463c      	mov	r4, r7
 8005e36:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005e3a:	eb0e 0605 	add.w	r6, lr, r5
 8005e3e:	7876      	ldrb	r6, [r6, #1]
 8005e40:	f006 0608 	and.w	r6, r6, #8
 8005e44:	f006 08ff 	and.w	r8, r6, #255	; 0xff
 8005e48:	2e00      	cmp	r6, #0
 8005e4a:	d1f2      	bne.n	8005e32 <_strtoul_r+0xe>
 8005e4c:	2d2d      	cmp	r5, #45	; 0x2d
 8005e4e:	d051      	beq.n	8005ef4 <_strtoul_r+0xd0>
 8005e50:	2d2b      	cmp	r5, #43	; 0x2b
 8005e52:	bf04      	itt	eq
 8005e54:	787d      	ldrbeq	r5, [r7, #1]
 8005e56:	1cbc      	addeq	r4, r7, #2
 8005e58:	b15b      	cbz	r3, 8005e72 <_strtoul_r+0x4e>
 8005e5a:	2b10      	cmp	r3, #16
 8005e5c:	d05b      	beq.n	8005f16 <_strtoul_r+0xf2>
 8005e5e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005e62:	fbb9 f9f3 	udiv	r9, r9, r3
 8005e66:	fb03 fb09 	mul.w	fp, r3, r9
 8005e6a:	ea6f 0b0b 	mvn.w	fp, fp
 8005e6e:	469a      	mov	sl, r3
 8005e70:	e007      	b.n	8005e82 <_strtoul_r+0x5e>
 8005e72:	2d30      	cmp	r5, #48	; 0x30
 8005e74:	d043      	beq.n	8005efe <_strtoul_r+0xda>
 8005e76:	230a      	movs	r3, #10
 8005e78:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8005f48 <_strtoul_r+0x124>
 8005e7c:	469a      	mov	sl, r3
 8005e7e:	f04f 0b05 	mov.w	fp, #5
 8005e82:	2700      	movs	r7, #0
 8005e84:	46bc      	mov	ip, r7
 8005e86:	e00c      	b.n	8005ea2 <_strtoul_r+0x7e>
 8005e88:	3d30      	subs	r5, #48	; 0x30
 8005e8a:	42ab      	cmp	r3, r5
 8005e8c:	dd19      	ble.n	8005ec2 <_strtoul_r+0x9e>
 8005e8e:	1c7e      	adds	r6, r7, #1
 8005e90:	d005      	beq.n	8005e9e <_strtoul_r+0x7a>
 8005e92:	45cc      	cmp	ip, r9
 8005e94:	d824      	bhi.n	8005ee0 <_strtoul_r+0xbc>
 8005e96:	d021      	beq.n	8005edc <_strtoul_r+0xb8>
 8005e98:	fb0a 5c0c 	mla	ip, sl, ip, r5
 8005e9c:	2701      	movs	r7, #1
 8005e9e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005ea2:	eb0e 0605 	add.w	r6, lr, r5
 8005ea6:	7876      	ldrb	r6, [r6, #1]
 8005ea8:	f016 0f04 	tst.w	r6, #4
 8005eac:	d1ec      	bne.n	8005e88 <_strtoul_r+0x64>
 8005eae:	f016 0603 	ands.w	r6, r6, #3
 8005eb2:	d006      	beq.n	8005ec2 <_strtoul_r+0x9e>
 8005eb4:	2e01      	cmp	r6, #1
 8005eb6:	bf0c      	ite	eq
 8005eb8:	2637      	moveq	r6, #55	; 0x37
 8005eba:	2657      	movne	r6, #87	; 0x57
 8005ebc:	1bad      	subs	r5, r5, r6
 8005ebe:	42ab      	cmp	r3, r5
 8005ec0:	dce5      	bgt.n	8005e8e <_strtoul_r+0x6a>
 8005ec2:	2f00      	cmp	r7, #0
 8005ec4:	db11      	blt.n	8005eea <_strtoul_r+0xc6>
 8005ec6:	f1c8 0000 	rsb	r0, r8, #0
 8005eca:	ea8c 0000 	eor.w	r0, ip, r0
 8005ece:	4440      	add	r0, r8
 8005ed0:	b14a      	cbz	r2, 8005ee6 <_strtoul_r+0xc2>
 8005ed2:	b107      	cbz	r7, 8005ed6 <_strtoul_r+0xb2>
 8005ed4:	1e61      	subs	r1, r4, #1
 8005ed6:	6011      	str	r1, [r2, #0]
 8005ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005edc:	455d      	cmp	r5, fp
 8005ede:	dddb      	ble.n	8005e98 <_strtoul_r+0x74>
 8005ee0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005ee4:	e7db      	b.n	8005e9e <_strtoul_r+0x7a>
 8005ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eea:	2322      	movs	r3, #34	; 0x22
 8005eec:	6003      	str	r3, [r0, #0]
 8005eee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ef2:	e7ed      	b.n	8005ed0 <_strtoul_r+0xac>
 8005ef4:	1cbc      	adds	r4, r7, #2
 8005ef6:	787d      	ldrb	r5, [r7, #1]
 8005ef8:	f04f 0801 	mov.w	r8, #1
 8005efc:	e7ac      	b.n	8005e58 <_strtoul_r+0x34>
 8005efe:	7823      	ldrb	r3, [r4, #0]
 8005f00:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005f04:	2b58      	cmp	r3, #88	; 0x58
 8005f06:	d013      	beq.n	8005f30 <_strtoul_r+0x10c>
 8005f08:	2308      	movs	r3, #8
 8005f0a:	469a      	mov	sl, r3
 8005f0c:	f04f 0b07 	mov.w	fp, #7
 8005f10:	f06f 4960 	mvn.w	r9, #3758096384	; 0xe0000000
 8005f14:	e7b5      	b.n	8005e82 <_strtoul_r+0x5e>
 8005f16:	2d30      	cmp	r5, #48	; 0x30
 8005f18:	d005      	beq.n	8005f26 <_strtoul_r+0x102>
 8005f1a:	f04f 0b0f 	mov.w	fp, #15
 8005f1e:	f06f 4970 	mvn.w	r9, #4026531840	; 0xf0000000
 8005f22:	469a      	mov	sl, r3
 8005f24:	e7ad      	b.n	8005e82 <_strtoul_r+0x5e>
 8005f26:	7826      	ldrb	r6, [r4, #0]
 8005f28:	f006 06df 	and.w	r6, r6, #223	; 0xdf
 8005f2c:	2e58      	cmp	r6, #88	; 0x58
 8005f2e:	d1f4      	bne.n	8005f1a <_strtoul_r+0xf6>
 8005f30:	f04f 0a10 	mov.w	sl, #16
 8005f34:	7865      	ldrb	r5, [r4, #1]
 8005f36:	4653      	mov	r3, sl
 8005f38:	f04f 0b0f 	mov.w	fp, #15
 8005f3c:	3402      	adds	r4, #2
 8005f3e:	f06f 4970 	mvn.w	r9, #4026531840	; 0xf0000000
 8005f42:	e79e      	b.n	8005e82 <_strtoul_r+0x5e>
 8005f44:	2000019c 	.word	0x2000019c
 8005f48:	19999999 	.word	0x19999999

08005f4c <strtoul>:
 8005f4c:	b430      	push	{r4, r5}
 8005f4e:	4c04      	ldr	r4, [pc, #16]	; (8005f60 <strtoul+0x14>)
 8005f50:	460d      	mov	r5, r1
 8005f52:	4613      	mov	r3, r2
 8005f54:	4601      	mov	r1, r0
 8005f56:	462a      	mov	r2, r5
 8005f58:	6820      	ldr	r0, [r4, #0]
 8005f5a:	bc30      	pop	{r4, r5}
 8005f5c:	f7ff bf62 	b.w	8005e24 <_strtoul_r>
 8005f60:	200005c8 	.word	0x200005c8
 8005f64:	00000000 	.word	0x00000000

08005f68 <_vfprintf_r>:
 8005f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6c:	b0bd      	sub	sp, #244	; 0xf4
 8005f6e:	461c      	mov	r4, r3
 8005f70:	4689      	mov	r9, r1
 8005f72:	9204      	str	r2, [sp, #16]
 8005f74:	4607      	mov	r7, r0
 8005f76:	f002 fee7 	bl	8008d48 <_localeconv_r>
 8005f7a:	6803      	ldr	r3, [r0, #0]
 8005f7c:	9311      	str	r3, [sp, #68]	; 0x44
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7ff fee8 	bl	8005d54 <strlen>
 8005f84:	9408      	str	r4, [sp, #32]
 8005f86:	9012      	str	r0, [sp, #72]	; 0x48
 8005f88:	b11f      	cbz	r7, 8005f92 <_vfprintf_r+0x2a>
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f000 80f3 	beq.w	8006178 <_vfprintf_r+0x210>
 8005f92:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 8005f96:	b293      	uxth	r3, r2
 8005f98:	049e      	lsls	r6, r3, #18
 8005f9a:	d40a      	bmi.n	8005fb2 <_vfprintf_r+0x4a>
 8005f9c:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
 8005fa0:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8005fa4:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8005fa8:	f8a9 300c 	strh.w	r3, [r9, #12]
 8005fac:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	071d      	lsls	r5, r3, #28
 8005fb4:	f140 80aa 	bpl.w	800610c <_vfprintf_r+0x1a4>
 8005fb8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8005fbc:	2a00      	cmp	r2, #0
 8005fbe:	f000 80a5 	beq.w	800610c <_vfprintf_r+0x1a4>
 8005fc2:	f003 031a 	and.w	r3, r3, #26
 8005fc6:	2b0a      	cmp	r3, #10
 8005fc8:	f000 80ac 	beq.w	8006124 <_vfprintf_r+0x1bc>
 8005fcc:	ed9f 7b6e 	vldr	d7, [pc, #440]	; 8006188 <_vfprintf_r+0x220>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8005fd6:	930d      	str	r3, [sp, #52]	; 0x34
 8005fd8:	9321      	str	r3, [sp, #132]	; 0x84
 8005fda:	9320      	str	r3, [sp, #128]	; 0x80
 8005fdc:	9310      	str	r3, [sp, #64]	; 0x40
 8005fde:	9313      	str	r3, [sp, #76]	; 0x4c
 8005fe0:	9305      	str	r3, [sp, #20]
 8005fe2:	ab2c      	add	r3, sp, #176	; 0xb0
 8005fe4:	931f      	str	r3, [sp, #124]	; 0x7c
 8005fe6:	461c      	mov	r4, r3
 8005fe8:	46b8      	mov	r8, r7
 8005fea:	9d04      	ldr	r5, [sp, #16]
 8005fec:	782b      	ldrb	r3, [r5, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f000 80c6 	beq.w	8006180 <_vfprintf_r+0x218>
 8005ff4:	2b25      	cmp	r3, #37	; 0x25
 8005ff6:	d102      	bne.n	8005ffe <_vfprintf_r+0x96>
 8005ff8:	e0c2      	b.n	8006180 <_vfprintf_r+0x218>
 8005ffa:	2b25      	cmp	r3, #37	; 0x25
 8005ffc:	d003      	beq.n	8006006 <_vfprintf_r+0x9e>
 8005ffe:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1f9      	bne.n	8005ffa <_vfprintf_r+0x92>
 8006006:	9b04      	ldr	r3, [sp, #16]
 8006008:	1aee      	subs	r6, r5, r3
 800600a:	b17e      	cbz	r6, 800602c <_vfprintf_r+0xc4>
 800600c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800600e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006010:	9904      	ldr	r1, [sp, #16]
 8006012:	6021      	str	r1, [r4, #0]
 8006014:	3301      	adds	r3, #1
 8006016:	4432      	add	r2, r6
 8006018:	2b07      	cmp	r3, #7
 800601a:	6066      	str	r6, [r4, #4]
 800601c:	9221      	str	r2, [sp, #132]	; 0x84
 800601e:	9320      	str	r3, [sp, #128]	; 0x80
 8006020:	f300 8093 	bgt.w	800614a <_vfprintf_r+0x1e2>
 8006024:	3408      	adds	r4, #8
 8006026:	9b05      	ldr	r3, [sp, #20]
 8006028:	4433      	add	r3, r6
 800602a:	9305      	str	r3, [sp, #20]
 800602c:	782b      	ldrb	r3, [r5, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 8093 	beq.w	800615a <_vfprintf_r+0x1f2>
 8006034:	2300      	movs	r3, #0
 8006036:	1c69      	adds	r1, r5, #1
 8006038:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800603c:	786d      	ldrb	r5, [r5, #1]
 800603e:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8006042:	461a      	mov	r2, r3
 8006044:	9306      	str	r3, [sp, #24]
 8006046:	9302      	str	r3, [sp, #8]
 8006048:	4656      	mov	r6, sl
 800604a:	1c4b      	adds	r3, r1, #1
 800604c:	f1a5 0120 	sub.w	r1, r5, #32
 8006050:	2958      	cmp	r1, #88	; 0x58
 8006052:	f200 83cd 	bhi.w	80067f0 <_vfprintf_r+0x888>
 8006056:	e8df f011 	tbh	[pc, r1, lsl #1]
 800605a:	025c      	.short	0x025c
 800605c:	03cb03cb 	.word	0x03cb03cb
 8006060:	03cb0302 	.word	0x03cb0302
 8006064:	03cb03cb 	.word	0x03cb03cb
 8006068:	03cb03cb 	.word	0x03cb03cb
 800606c:	030903cb 	.word	0x030903cb
 8006070:	03cb02d2 	.word	0x03cb02d2
 8006074:	035301f8 	.word	0x035301f8
 8006078:	02d603cb 	.word	0x02d603cb
 800607c:	02dd02dd 	.word	0x02dd02dd
 8006080:	02dd02dd 	.word	0x02dd02dd
 8006084:	02dd02dd 	.word	0x02dd02dd
 8006088:	02dd02dd 	.word	0x02dd02dd
 800608c:	03cb02dd 	.word	0x03cb02dd
 8006090:	03cb03cb 	.word	0x03cb03cb
 8006094:	03cb03cb 	.word	0x03cb03cb
 8006098:	03cb03cb 	.word	0x03cb03cb
 800609c:	03cb03cb 	.word	0x03cb03cb
 80060a0:	027103cb 	.word	0x027103cb
 80060a4:	03cb0293 	.word	0x03cb0293
 80060a8:	03cb0293 	.word	0x03cb0293
 80060ac:	03cb03cb 	.word	0x03cb03cb
 80060b0:	02cb03cb 	.word	0x02cb03cb
 80060b4:	03cb03cb 	.word	0x03cb03cb
 80060b8:	03cb036e 	.word	0x03cb036e
 80060bc:	03cb03cb 	.word	0x03cb03cb
 80060c0:	03cb03cb 	.word	0x03cb03cb
 80060c4:	03cb03b5 	.word	0x03cb03b5
 80060c8:	038b03cb 	.word	0x038b03cb
 80060cc:	03cb03cb 	.word	0x03cb03cb
 80060d0:	03cb03cb 	.word	0x03cb03cb
 80060d4:	03cb03cb 	.word	0x03cb03cb
 80060d8:	03cb03cb 	.word	0x03cb03cb
 80060dc:	03cb03cb 	.word	0x03cb03cb
 80060e0:	031703a0 	.word	0x031703a0
 80060e4:	02930293 	.word	0x02930293
 80060e8:	03300293 	.word	0x03300293
 80060ec:	03cb0317 	.word	0x03cb0317
 80060f0:	033703cb 	.word	0x033703cb
 80060f4:	034103cb 	.word	0x034103cb
 80060f8:	02ec01ff 	.word	0x02ec01ff
 80060fc:	03cb0263 	.word	0x03cb0263
 8006100:	03cb0211 	.word	0x03cb0211
 8006104:	03cb009b 	.word	0x03cb009b
 8006108:	023603cb 	.word	0x023603cb
 800610c:	4638      	mov	r0, r7
 800610e:	4649      	mov	r1, r9
 8006110:	f001 f97a 	bl	8007408 <__swsetup_r>
 8006114:	b9a0      	cbnz	r0, 8006140 <_vfprintf_r+0x1d8>
 8006116:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800611a:	f003 031a 	and.w	r3, r3, #26
 800611e:	2b0a      	cmp	r3, #10
 8006120:	f47f af54 	bne.w	8005fcc <_vfprintf_r+0x64>
 8006124:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
 8006128:	2b00      	cmp	r3, #0
 800612a:	f6ff af4f 	blt.w	8005fcc <_vfprintf_r+0x64>
 800612e:	4638      	mov	r0, r7
 8006130:	4649      	mov	r1, r9
 8006132:	9a04      	ldr	r2, [sp, #16]
 8006134:	4623      	mov	r3, r4
 8006136:	f001 f92b 	bl	8007390 <__sbprintf>
 800613a:	b03d      	add	sp, #244	; 0xf4
 800613c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006144:	b03d      	add	sp, #244	; 0xf4
 8006146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800614a:	4640      	mov	r0, r8
 800614c:	4649      	mov	r1, r9
 800614e:	aa1f      	add	r2, sp, #124	; 0x7c
 8006150:	f003 ff7e 	bl	800a050 <__sprint_r>
 8006154:	b940      	cbnz	r0, 8006168 <_vfprintf_r+0x200>
 8006156:	ac2c      	add	r4, sp, #176	; 0xb0
 8006158:	e765      	b.n	8006026 <_vfprintf_r+0xbe>
 800615a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800615c:	b123      	cbz	r3, 8006168 <_vfprintf_r+0x200>
 800615e:	4640      	mov	r0, r8
 8006160:	4649      	mov	r1, r9
 8006162:	aa1f      	add	r2, sp, #124	; 0x7c
 8006164:	f003 ff74 	bl	800a050 <__sprint_r>
 8006168:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800616c:	065a      	lsls	r2, r3, #25
 800616e:	d4e7      	bmi.n	8006140 <_vfprintf_r+0x1d8>
 8006170:	9805      	ldr	r0, [sp, #20]
 8006172:	b03d      	add	sp, #244	; 0xf4
 8006174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006178:	4638      	mov	r0, r7
 800617a:	f002 fadf 	bl	800873c <__sinit>
 800617e:	e708      	b.n	8005f92 <_vfprintf_r+0x2a>
 8006180:	9d04      	ldr	r5, [sp, #16]
 8006182:	e753      	b.n	800602c <_vfprintf_r+0xc4>
 8006184:	f3af 8000 	nop.w
	...
 8006190:	9304      	str	r3, [sp, #16]
 8006192:	9b02      	ldr	r3, [sp, #8]
 8006194:	46b2      	mov	sl, r6
 8006196:	069e      	lsls	r6, r3, #26
 8006198:	f140 831e 	bpl.w	80067d8 <_vfprintf_r+0x870>
 800619c:	9f08      	ldr	r7, [sp, #32]
 800619e:	3707      	adds	r7, #7
 80061a0:	f027 0307 	bic.w	r3, r7, #7
 80061a4:	f103 0208 	add.w	r2, r3, #8
 80061a8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80061ac:	9208      	str	r2, [sp, #32]
 80061ae:	2301      	movs	r3, #1
 80061b0:	f04f 0c00 	mov.w	ip, #0
 80061b4:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 80061b8:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80061bc:	f1ba 0f00 	cmp.w	sl, #0
 80061c0:	db03      	blt.n	80061ca <_vfprintf_r+0x262>
 80061c2:	9a02      	ldr	r2, [sp, #8]
 80061c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061c8:	9202      	str	r2, [sp, #8]
 80061ca:	ea56 0207 	orrs.w	r2, r6, r7
 80061ce:	f040 831f 	bne.w	8006810 <_vfprintf_r+0x8a8>
 80061d2:	f1ba 0f00 	cmp.w	sl, #0
 80061d6:	f000 841c 	beq.w	8006a12 <_vfprintf_r+0xaaa>
 80061da:	2b01      	cmp	r3, #1
 80061dc:	f000 8320 	beq.w	8006820 <_vfprintf_r+0x8b8>
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	f000 8452 	beq.w	8006a8a <_vfprintf_r+0xb22>
 80061e6:	a92c      	add	r1, sp, #176	; 0xb0
 80061e8:	08f2      	lsrs	r2, r6, #3
 80061ea:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 80061ee:	08f8      	lsrs	r0, r7, #3
 80061f0:	f006 0307 	and.w	r3, r6, #7
 80061f4:	4607      	mov	r7, r0
 80061f6:	4616      	mov	r6, r2
 80061f8:	3330      	adds	r3, #48	; 0x30
 80061fa:	ea56 0207 	orrs.w	r2, r6, r7
 80061fe:	f801 3d01 	strb.w	r3, [r1, #-1]!
 8006202:	d1f1      	bne.n	80061e8 <_vfprintf_r+0x280>
 8006204:	9a02      	ldr	r2, [sp, #8]
 8006206:	910a      	str	r1, [sp, #40]	; 0x28
 8006208:	07d0      	lsls	r0, r2, #31
 800620a:	f100 84f9 	bmi.w	8006c00 <_vfprintf_r+0xc98>
 800620e:	ab2c      	add	r3, sp, #176	; 0xb0
 8006210:	1a5b      	subs	r3, r3, r1
 8006212:	9307      	str	r3, [sp, #28]
 8006214:	9a07      	ldr	r2, [sp, #28]
 8006216:	4592      	cmp	sl, r2
 8006218:	4653      	mov	r3, sl
 800621a:	bfb8      	it	lt
 800621c:	4613      	movlt	r3, r2
 800621e:	9303      	str	r3, [sp, #12]
 8006220:	2300      	movs	r3, #0
 8006222:	930c      	str	r3, [sp, #48]	; 0x30
 8006224:	f1bc 0f00 	cmp.w	ip, #0
 8006228:	d002      	beq.n	8006230 <_vfprintf_r+0x2c8>
 800622a:	9b03      	ldr	r3, [sp, #12]
 800622c:	3301      	adds	r3, #1
 800622e:	9303      	str	r3, [sp, #12]
 8006230:	9b02      	ldr	r3, [sp, #8]
 8006232:	f013 0302 	ands.w	r3, r3, #2
 8006236:	9309      	str	r3, [sp, #36]	; 0x24
 8006238:	d002      	beq.n	8006240 <_vfprintf_r+0x2d8>
 800623a:	9b03      	ldr	r3, [sp, #12]
 800623c:	3302      	adds	r3, #2
 800623e:	9303      	str	r3, [sp, #12]
 8006240:	9b02      	ldr	r3, [sp, #8]
 8006242:	f013 0684 	ands.w	r6, r3, #132	; 0x84
 8006246:	f040 82e0 	bne.w	800680a <_vfprintf_r+0x8a2>
 800624a:	9b06      	ldr	r3, [sp, #24]
 800624c:	9a03      	ldr	r2, [sp, #12]
 800624e:	ebc2 0a03 	rsb	sl, r2, r3
 8006252:	f1ba 0f00 	cmp.w	sl, #0
 8006256:	f340 82d8 	ble.w	800680a <_vfprintf_r+0x8a2>
 800625a:	f1ba 0f10 	cmp.w	sl, #16
 800625e:	9921      	ldr	r1, [sp, #132]	; 0x84
 8006260:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006262:	4fb3      	ldr	r7, [pc, #716]	; (8006530 <_vfprintf_r+0x5c8>)
 8006264:	bfc8      	it	gt
 8006266:	f04f 0b10 	movgt.w	fp, #16
 800626a:	dc07      	bgt.n	800627c <_vfprintf_r+0x314>
 800626c:	e01e      	b.n	80062ac <_vfprintf_r+0x344>
 800626e:	f1aa 0a10 	sub.w	sl, sl, #16
 8006272:	f1ba 0f10 	cmp.w	sl, #16
 8006276:	f104 0408 	add.w	r4, r4, #8
 800627a:	dd17      	ble.n	80062ac <_vfprintf_r+0x344>
 800627c:	3201      	adds	r2, #1
 800627e:	3110      	adds	r1, #16
 8006280:	2a07      	cmp	r2, #7
 8006282:	9121      	str	r1, [sp, #132]	; 0x84
 8006284:	9220      	str	r2, [sp, #128]	; 0x80
 8006286:	e884 0880 	stmia.w	r4, {r7, fp}
 800628a:	ddf0      	ble.n	800626e <_vfprintf_r+0x306>
 800628c:	4640      	mov	r0, r8
 800628e:	4649      	mov	r1, r9
 8006290:	aa1f      	add	r2, sp, #124	; 0x7c
 8006292:	f003 fedd 	bl	800a050 <__sprint_r>
 8006296:	2800      	cmp	r0, #0
 8006298:	f47f af66 	bne.w	8006168 <_vfprintf_r+0x200>
 800629c:	f1aa 0a10 	sub.w	sl, sl, #16
 80062a0:	f1ba 0f10 	cmp.w	sl, #16
 80062a4:	9921      	ldr	r1, [sp, #132]	; 0x84
 80062a6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80062a8:	ac2c      	add	r4, sp, #176	; 0xb0
 80062aa:	dce7      	bgt.n	800627c <_vfprintf_r+0x314>
 80062ac:	3201      	adds	r2, #1
 80062ae:	eb0a 0b01 	add.w	fp, sl, r1
 80062b2:	2a07      	cmp	r2, #7
 80062b4:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80062b8:	9220      	str	r2, [sp, #128]	; 0x80
 80062ba:	e884 0480 	stmia.w	r4, {r7, sl}
 80062be:	f300 844a 	bgt.w	8006b56 <_vfprintf_r+0xbee>
 80062c2:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 80062c6:	3408      	adds	r4, #8
 80062c8:	f1bc 0f00 	cmp.w	ip, #0
 80062cc:	d00f      	beq.n	80062ee <_vfprintf_r+0x386>
 80062ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80062d0:	3301      	adds	r3, #1
 80062d2:	f10b 0b01 	add.w	fp, fp, #1
 80062d6:	f10d 015f 	add.w	r1, sp, #95	; 0x5f
 80062da:	2201      	movs	r2, #1
 80062dc:	2b07      	cmp	r3, #7
 80062de:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80062e2:	9320      	str	r3, [sp, #128]	; 0x80
 80062e4:	e884 0006 	stmia.w	r4, {r1, r2}
 80062e8:	f300 83b1 	bgt.w	8006a4e <_vfprintf_r+0xae6>
 80062ec:	3408      	adds	r4, #8
 80062ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062f0:	b173      	cbz	r3, 8006310 <_vfprintf_r+0x3a8>
 80062f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80062f4:	3301      	adds	r3, #1
 80062f6:	f10b 0b02 	add.w	fp, fp, #2
 80062fa:	a918      	add	r1, sp, #96	; 0x60
 80062fc:	2202      	movs	r2, #2
 80062fe:	2b07      	cmp	r3, #7
 8006300:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8006304:	9320      	str	r3, [sp, #128]	; 0x80
 8006306:	e884 0006 	stmia.w	r4, {r1, r2}
 800630a:	f300 83ac 	bgt.w	8006a66 <_vfprintf_r+0xafe>
 800630e:	3408      	adds	r4, #8
 8006310:	2e80      	cmp	r6, #128	; 0x80
 8006312:	f000 82f0 	beq.w	80068f6 <_vfprintf_r+0x98e>
 8006316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006318:	9a07      	ldr	r2, [sp, #28]
 800631a:	ebc2 0a03 	rsb	sl, r2, r3
 800631e:	f1ba 0f00 	cmp.w	sl, #0
 8006322:	dd32      	ble.n	800638a <_vfprintf_r+0x422>
 8006324:	f1ba 0f10 	cmp.w	sl, #16
 8006328:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800632a:	4f82      	ldr	r7, [pc, #520]	; (8006534 <_vfprintf_r+0x5cc>)
 800632c:	dd22      	ble.n	8006374 <_vfprintf_r+0x40c>
 800632e:	2610      	movs	r6, #16
 8006330:	465b      	mov	r3, fp
 8006332:	e006      	b.n	8006342 <_vfprintf_r+0x3da>
 8006334:	f1aa 0a10 	sub.w	sl, sl, #16
 8006338:	f1ba 0f10 	cmp.w	sl, #16
 800633c:	f104 0408 	add.w	r4, r4, #8
 8006340:	dd17      	ble.n	8006372 <_vfprintf_r+0x40a>
 8006342:	3201      	adds	r2, #1
 8006344:	3310      	adds	r3, #16
 8006346:	2a07      	cmp	r2, #7
 8006348:	9321      	str	r3, [sp, #132]	; 0x84
 800634a:	9220      	str	r2, [sp, #128]	; 0x80
 800634c:	6027      	str	r7, [r4, #0]
 800634e:	6066      	str	r6, [r4, #4]
 8006350:	ddf0      	ble.n	8006334 <_vfprintf_r+0x3cc>
 8006352:	4640      	mov	r0, r8
 8006354:	4649      	mov	r1, r9
 8006356:	aa1f      	add	r2, sp, #124	; 0x7c
 8006358:	f003 fe7a 	bl	800a050 <__sprint_r>
 800635c:	2800      	cmp	r0, #0
 800635e:	f47f af03 	bne.w	8006168 <_vfprintf_r+0x200>
 8006362:	f1aa 0a10 	sub.w	sl, sl, #16
 8006366:	f1ba 0f10 	cmp.w	sl, #16
 800636a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800636c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800636e:	ac2c      	add	r4, sp, #176	; 0xb0
 8006370:	dce7      	bgt.n	8006342 <_vfprintf_r+0x3da>
 8006372:	469b      	mov	fp, r3
 8006374:	3201      	adds	r2, #1
 8006376:	44d3      	add	fp, sl
 8006378:	2a07      	cmp	r2, #7
 800637a:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 800637e:	9220      	str	r2, [sp, #128]	; 0x80
 8006380:	e884 0480 	stmia.w	r4, {r7, sl}
 8006384:	f300 8357 	bgt.w	8006a36 <_vfprintf_r+0xace>
 8006388:	3408      	adds	r4, #8
 800638a:	9b02      	ldr	r3, [sp, #8]
 800638c:	05db      	lsls	r3, r3, #23
 800638e:	f100 825b 	bmi.w	8006848 <_vfprintf_r+0x8e0>
 8006392:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006394:	9907      	ldr	r1, [sp, #28]
 8006396:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006398:	6022      	str	r2, [r4, #0]
 800639a:	3301      	adds	r3, #1
 800639c:	448b      	add	fp, r1
 800639e:	2b07      	cmp	r3, #7
 80063a0:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80063a4:	6061      	str	r1, [r4, #4]
 80063a6:	9320      	str	r3, [sp, #128]	; 0x80
 80063a8:	f300 831d 	bgt.w	80069e6 <_vfprintf_r+0xa7e>
 80063ac:	3408      	adds	r4, #8
 80063ae:	9b02      	ldr	r3, [sp, #8]
 80063b0:	0759      	lsls	r1, r3, #29
 80063b2:	d53a      	bpl.n	800642a <_vfprintf_r+0x4c2>
 80063b4:	9b06      	ldr	r3, [sp, #24]
 80063b6:	9a03      	ldr	r2, [sp, #12]
 80063b8:	1a9d      	subs	r5, r3, r2
 80063ba:	2d00      	cmp	r5, #0
 80063bc:	dd35      	ble.n	800642a <_vfprintf_r+0x4c2>
 80063be:	2d10      	cmp	r5, #16
 80063c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80063c2:	4f5b      	ldr	r7, [pc, #364]	; (8006530 <_vfprintf_r+0x5c8>)
 80063c4:	dd1e      	ble.n	8006404 <_vfprintf_r+0x49c>
 80063c6:	2610      	movs	r6, #16
 80063c8:	465a      	mov	r2, fp
 80063ca:	e004      	b.n	80063d6 <_vfprintf_r+0x46e>
 80063cc:	3d10      	subs	r5, #16
 80063ce:	2d10      	cmp	r5, #16
 80063d0:	f104 0408 	add.w	r4, r4, #8
 80063d4:	dd15      	ble.n	8006402 <_vfprintf_r+0x49a>
 80063d6:	3301      	adds	r3, #1
 80063d8:	3210      	adds	r2, #16
 80063da:	2b07      	cmp	r3, #7
 80063dc:	9221      	str	r2, [sp, #132]	; 0x84
 80063de:	9320      	str	r3, [sp, #128]	; 0x80
 80063e0:	6027      	str	r7, [r4, #0]
 80063e2:	6066      	str	r6, [r4, #4]
 80063e4:	ddf2      	ble.n	80063cc <_vfprintf_r+0x464>
 80063e6:	4640      	mov	r0, r8
 80063e8:	4649      	mov	r1, r9
 80063ea:	aa1f      	add	r2, sp, #124	; 0x7c
 80063ec:	f003 fe30 	bl	800a050 <__sprint_r>
 80063f0:	2800      	cmp	r0, #0
 80063f2:	f47f aeb9 	bne.w	8006168 <_vfprintf_r+0x200>
 80063f6:	3d10      	subs	r5, #16
 80063f8:	2d10      	cmp	r5, #16
 80063fa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80063fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80063fe:	ac2c      	add	r4, sp, #176	; 0xb0
 8006400:	dce9      	bgt.n	80063d6 <_vfprintf_r+0x46e>
 8006402:	4693      	mov	fp, r2
 8006404:	3301      	adds	r3, #1
 8006406:	44ab      	add	fp, r5
 8006408:	2b07      	cmp	r3, #7
 800640a:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 800640e:	9320      	str	r3, [sp, #128]	; 0x80
 8006410:	6027      	str	r7, [r4, #0]
 8006412:	6065      	str	r5, [r4, #4]
 8006414:	dd09      	ble.n	800642a <_vfprintf_r+0x4c2>
 8006416:	4640      	mov	r0, r8
 8006418:	4649      	mov	r1, r9
 800641a:	aa1f      	add	r2, sp, #124	; 0x7c
 800641c:	f003 fe18 	bl	800a050 <__sprint_r>
 8006420:	2800      	cmp	r0, #0
 8006422:	f47f aea1 	bne.w	8006168 <_vfprintf_r+0x200>
 8006426:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800642a:	9b05      	ldr	r3, [sp, #20]
 800642c:	9a03      	ldr	r2, [sp, #12]
 800642e:	9906      	ldr	r1, [sp, #24]
 8006430:	428a      	cmp	r2, r1
 8006432:	bfac      	ite	ge
 8006434:	189b      	addge	r3, r3, r2
 8006436:	185b      	addlt	r3, r3, r1
 8006438:	9305      	str	r3, [sp, #20]
 800643a:	f1bb 0f00 	cmp.w	fp, #0
 800643e:	f040 82de 	bne.w	80069fe <_vfprintf_r+0xa96>
 8006442:	2300      	movs	r3, #0
 8006444:	9320      	str	r3, [sp, #128]	; 0x80
 8006446:	ac2c      	add	r4, sp, #176	; 0xb0
 8006448:	e5cf      	b.n	8005fea <_vfprintf_r+0x82>
 800644a:	4619      	mov	r1, r3
 800644c:	9802      	ldr	r0, [sp, #8]
 800644e:	781d      	ldrb	r5, [r3, #0]
 8006450:	f040 0004 	orr.w	r0, r0, #4
 8006454:	9002      	str	r0, [sp, #8]
 8006456:	e5f8      	b.n	800604a <_vfprintf_r+0xe2>
 8006458:	9304      	str	r3, [sp, #16]
 800645a:	9b02      	ldr	r3, [sp, #8]
 800645c:	f013 0320 	ands.w	r3, r3, #32
 8006460:	46b2      	mov	sl, r6
 8006462:	f000 8173 	beq.w	800674c <_vfprintf_r+0x7e4>
 8006466:	9f08      	ldr	r7, [sp, #32]
 8006468:	3707      	adds	r7, #7
 800646a:	f027 0307 	bic.w	r3, r7, #7
 800646e:	f103 0208 	add.w	r2, r3, #8
 8006472:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006476:	9208      	str	r2, [sp, #32]
 8006478:	2300      	movs	r3, #0
 800647a:	e699      	b.n	80061b0 <_vfprintf_r+0x248>
 800647c:	9a08      	ldr	r2, [sp, #32]
 800647e:	9304      	str	r3, [sp, #16]
 8006480:	6813      	ldr	r3, [r2, #0]
 8006482:	930a      	str	r3, [sp, #40]	; 0x28
 8006484:	f04f 0b00 	mov.w	fp, #0
 8006488:	f88d b05f 	strb.w	fp, [sp, #95]	; 0x5f
 800648c:	1d17      	adds	r7, r2, #4
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 865e 	beq.w	8007150 <_vfprintf_r+0x11e8>
 8006494:	2e00      	cmp	r6, #0
 8006496:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006498:	f2c0 8612 	blt.w	80070c0 <_vfprintf_r+0x1158>
 800649c:	4659      	mov	r1, fp
 800649e:	4632      	mov	r2, r6
 80064a0:	f002 ff60 	bl	8009364 <memchr>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	f000 868f 	beq.w	80071c8 <_vfprintf_r+0x1260>
 80064aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064ac:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80064b0:	1ac3      	subs	r3, r0, r3
 80064b2:	9307      	str	r3, [sp, #28]
 80064b4:	9708      	str	r7, [sp, #32]
 80064b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80064ba:	9303      	str	r3, [sp, #12]
 80064bc:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80064c0:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 80064c4:	e6ae      	b.n	8006224 <_vfprintf_r+0x2bc>
 80064c6:	9304      	str	r3, [sp, #16]
 80064c8:	4b1b      	ldr	r3, [pc, #108]	; (8006538 <_vfprintf_r+0x5d0>)
 80064ca:	9310      	str	r3, [sp, #64]	; 0x40
 80064cc:	9b02      	ldr	r3, [sp, #8]
 80064ce:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80064d2:	0699      	lsls	r1, r3, #26
 80064d4:	46b2      	mov	sl, r6
 80064d6:	f140 8155 	bpl.w	8006784 <_vfprintf_r+0x81c>
 80064da:	9f08      	ldr	r7, [sp, #32]
 80064dc:	3707      	adds	r7, #7
 80064de:	f027 0307 	bic.w	r3, r7, #7
 80064e2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80064e6:	f103 0208 	add.w	r2, r3, #8
 80064ea:	9208      	str	r2, [sp, #32]
 80064ec:	9b02      	ldr	r3, [sp, #8]
 80064ee:	07db      	lsls	r3, r3, #31
 80064f0:	f140 82e4 	bpl.w	8006abc <_vfprintf_r+0xb54>
 80064f4:	ea56 0307 	orrs.w	r3, r6, r7
 80064f8:	f000 82e0 	beq.w	8006abc <_vfprintf_r+0xb54>
 80064fc:	9a02      	ldr	r2, [sp, #8]
 80064fe:	f88d 5061 	strb.w	r5, [sp, #97]	; 0x61
 8006502:	2330      	movs	r3, #48	; 0x30
 8006504:	f042 0202 	orr.w	r2, r2, #2
 8006508:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800650c:	9202      	str	r2, [sp, #8]
 800650e:	2302      	movs	r3, #2
 8006510:	e64e      	b.n	80061b0 <_vfprintf_r+0x248>
 8006512:	781d      	ldrb	r5, [r3, #0]
 8006514:	4619      	mov	r1, r3
 8006516:	2a00      	cmp	r2, #0
 8006518:	f47f ad97 	bne.w	800604a <_vfprintf_r+0xe2>
 800651c:	2220      	movs	r2, #32
 800651e:	e594      	b.n	800604a <_vfprintf_r+0xe2>
 8006520:	9902      	ldr	r1, [sp, #8]
 8006522:	f041 0120 	orr.w	r1, r1, #32
 8006526:	9102      	str	r1, [sp, #8]
 8006528:	781d      	ldrb	r5, [r3, #0]
 800652a:	4619      	mov	r1, r3
 800652c:	e58d      	b.n	800604a <_vfprintf_r+0xe2>
 800652e:	bf00      	nop
 8006530:	08019e64 	.word	0x08019e64
 8006534:	08019e10 	.word	0x08019e10
 8006538:	08019e44 	.word	0x08019e44
 800653c:	9304      	str	r3, [sp, #16]
 800653e:	9b02      	ldr	r3, [sp, #8]
 8006540:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8006544:	f043 0310 	orr.w	r3, r3, #16
 8006548:	9302      	str	r3, [sp, #8]
 800654a:	9b02      	ldr	r3, [sp, #8]
 800654c:	0698      	lsls	r0, r3, #26
 800654e:	46b2      	mov	sl, r6
 8006550:	f140 80a2 	bpl.w	8006698 <_vfprintf_r+0x730>
 8006554:	9f08      	ldr	r7, [sp, #32]
 8006556:	3707      	adds	r7, #7
 8006558:	f027 0707 	bic.w	r7, r7, #7
 800655c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006560:	f107 0108 	add.w	r1, r7, #8
 8006564:	9108      	str	r1, [sp, #32]
 8006566:	4616      	mov	r6, r2
 8006568:	461f      	mov	r7, r3
 800656a:	2a00      	cmp	r2, #0
 800656c:	f173 0300 	sbcs.w	r3, r3, #0
 8006570:	f2c0 841c 	blt.w	8006dac <_vfprintf_r+0xe44>
 8006574:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8006578:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 800657c:	2301      	movs	r3, #1
 800657e:	e61d      	b.n	80061bc <_vfprintf_r+0x254>
 8006580:	9304      	str	r3, [sp, #16]
 8006582:	9b02      	ldr	r3, [sp, #8]
 8006584:	9f08      	ldr	r7, [sp, #32]
 8006586:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800658a:	071b      	lsls	r3, r3, #28
 800658c:	46b2      	mov	sl, r6
 800658e:	46b3      	mov	fp, r6
 8006590:	f107 0707 	add.w	r7, r7, #7
 8006594:	f140 849b 	bpl.w	8006ece <_vfprintf_r+0xf66>
 8006598:	f027 0307 	bic.w	r3, r7, #7
 800659c:	ed93 7b00 	vldr	d7, [r3]
 80065a0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80065a4:	f103 0208 	add.w	r2, r3, #8
 80065a8:	9208      	str	r2, [sp, #32]
 80065aa:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 80065ae:	f003 fca3 	bl	8009ef8 <__fpclassifyd>
 80065b2:	2801      	cmp	r0, #1
 80065b4:	f040 8408 	bne.w	8006dc8 <_vfprintf_r+0xe60>
 80065b8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80065bc:	2200      	movs	r2, #0
 80065be:	2300      	movs	r3, #0
 80065c0:	f7fa faf2 	bl	8000ba8 <__aeabi_dcmplt>
 80065c4:	2800      	cmp	r0, #0
 80065c6:	f040 85ec 	bne.w	80071a2 <_vfprintf_r+0x123a>
 80065ca:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 80065ce:	9e02      	ldr	r6, [sp, #8]
 80065d0:	4a99      	ldr	r2, [pc, #612]	; (8006838 <_vfprintf_r+0x8d0>)
 80065d2:	4b9a      	ldr	r3, [pc, #616]	; (800683c <_vfprintf_r+0x8d4>)
 80065d4:	2103      	movs	r1, #3
 80065d6:	2000      	movs	r0, #0
 80065d8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 80065dc:	2d47      	cmp	r5, #71	; 0x47
 80065de:	bfd8      	it	le
 80065e0:	461a      	movle	r2, r3
 80065e2:	9103      	str	r1, [sp, #12]
 80065e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80065e6:	9602      	str	r6, [sp, #8]
 80065e8:	920a      	str	r2, [sp, #40]	; 0x28
 80065ea:	9107      	str	r1, [sp, #28]
 80065ec:	900c      	str	r0, [sp, #48]	; 0x30
 80065ee:	e619      	b.n	8006224 <_vfprintf_r+0x2bc>
 80065f0:	9902      	ldr	r1, [sp, #8]
 80065f2:	f041 0108 	orr.w	r1, r1, #8
 80065f6:	9102      	str	r1, [sp, #8]
 80065f8:	781d      	ldrb	r5, [r3, #0]
 80065fa:	4619      	mov	r1, r3
 80065fc:	e525      	b.n	800604a <_vfprintf_r+0xe2>
 80065fe:	781d      	ldrb	r5, [r3, #0]
 8006600:	4619      	mov	r1, r3
 8006602:	222b      	movs	r2, #43	; 0x2b
 8006604:	e521      	b.n	800604a <_vfprintf_r+0xe2>
 8006606:	9902      	ldr	r1, [sp, #8]
 8006608:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800660c:	9102      	str	r1, [sp, #8]
 800660e:	781d      	ldrb	r5, [r3, #0]
 8006610:	4619      	mov	r1, r3
 8006612:	e51a      	b.n	800604a <_vfprintf_r+0xe2>
 8006614:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8006618:	2100      	movs	r1, #0
 800661a:	f813 5b01 	ldrb.w	r5, [r3], #1
 800661e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006622:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8006626:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 800662a:	2809      	cmp	r0, #9
 800662c:	d9f5      	bls.n	800661a <_vfprintf_r+0x6b2>
 800662e:	9106      	str	r1, [sp, #24]
 8006630:	e50c      	b.n	800604c <_vfprintf_r+0xe4>
 8006632:	9908      	ldr	r1, [sp, #32]
 8006634:	9304      	str	r3, [sp, #16]
 8006636:	2330      	movs	r3, #48	; 0x30
 8006638:	9a02      	ldr	r2, [sp, #8]
 800663a:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800663e:	460b      	mov	r3, r1
 8006640:	3304      	adds	r3, #4
 8006642:	2578      	movs	r5, #120	; 0x78
 8006644:	f042 0202 	orr.w	r2, r2, #2
 8006648:	9308      	str	r3, [sp, #32]
 800664a:	4b7d      	ldr	r3, [pc, #500]	; (8006840 <_vfprintf_r+0x8d8>)
 800664c:	9310      	str	r3, [sp, #64]	; 0x40
 800664e:	46b2      	mov	sl, r6
 8006650:	9202      	str	r2, [sp, #8]
 8006652:	680e      	ldr	r6, [r1, #0]
 8006654:	f88d 5061 	strb.w	r5, [sp, #97]	; 0x61
 8006658:	2700      	movs	r7, #0
 800665a:	2302      	movs	r3, #2
 800665c:	e5a8      	b.n	80061b0 <_vfprintf_r+0x248>
 800665e:	9902      	ldr	r1, [sp, #8]
 8006660:	f041 0101 	orr.w	r1, r1, #1
 8006664:	9102      	str	r1, [sp, #8]
 8006666:	781d      	ldrb	r5, [r3, #0]
 8006668:	4619      	mov	r1, r3
 800666a:	e4ee      	b.n	800604a <_vfprintf_r+0xe2>
 800666c:	9d08      	ldr	r5, [sp, #32]
 800666e:	6829      	ldr	r1, [r5, #0]
 8006670:	9106      	str	r1, [sp, #24]
 8006672:	4608      	mov	r0, r1
 8006674:	2800      	cmp	r0, #0
 8006676:	4629      	mov	r1, r5
 8006678:	f101 0104 	add.w	r1, r1, #4
 800667c:	f2c0 84ee 	blt.w	800705c <_vfprintf_r+0x10f4>
 8006680:	9108      	str	r1, [sp, #32]
 8006682:	781d      	ldrb	r5, [r3, #0]
 8006684:	4619      	mov	r1, r3
 8006686:	e4e0      	b.n	800604a <_vfprintf_r+0xe2>
 8006688:	9304      	str	r3, [sp, #16]
 800668a:	9b02      	ldr	r3, [sp, #8]
 800668c:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8006690:	0698      	lsls	r0, r3, #26
 8006692:	46b2      	mov	sl, r6
 8006694:	f53f af5e 	bmi.w	8006554 <_vfprintf_r+0x5ec>
 8006698:	9b02      	ldr	r3, [sp, #8]
 800669a:	06d9      	lsls	r1, r3, #27
 800669c:	f100 829b 	bmi.w	8006bd6 <_vfprintf_r+0xc6e>
 80066a0:	9b02      	ldr	r3, [sp, #8]
 80066a2:	065a      	lsls	r2, r3, #25
 80066a4:	f140 8297 	bpl.w	8006bd6 <_vfprintf_r+0xc6e>
 80066a8:	9908      	ldr	r1, [sp, #32]
 80066aa:	f9b1 6000 	ldrsh.w	r6, [r1]
 80066ae:	3104      	adds	r1, #4
 80066b0:	17f7      	asrs	r7, r6, #31
 80066b2:	4632      	mov	r2, r6
 80066b4:	463b      	mov	r3, r7
 80066b6:	9108      	str	r1, [sp, #32]
 80066b8:	e757      	b.n	800656a <_vfprintf_r+0x602>
 80066ba:	9902      	ldr	r1, [sp, #8]
 80066bc:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80066c0:	9102      	str	r1, [sp, #8]
 80066c2:	781d      	ldrb	r5, [r3, #0]
 80066c4:	4619      	mov	r1, r3
 80066c6:	e4c0      	b.n	800604a <_vfprintf_r+0xe2>
 80066c8:	781d      	ldrb	r5, [r3, #0]
 80066ca:	9902      	ldr	r1, [sp, #8]
 80066cc:	2d6c      	cmp	r5, #108	; 0x6c
 80066ce:	f000 84be 	beq.w	800704e <_vfprintf_r+0x10e6>
 80066d2:	f041 0110 	orr.w	r1, r1, #16
 80066d6:	9102      	str	r1, [sp, #8]
 80066d8:	4619      	mov	r1, r3
 80066da:	e4b6      	b.n	800604a <_vfprintf_r+0xe2>
 80066dc:	9304      	str	r3, [sp, #16]
 80066de:	9b02      	ldr	r3, [sp, #8]
 80066e0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80066e4:	069a      	lsls	r2, r3, #26
 80066e6:	f140 83fd 	bpl.w	8006ee4 <_vfprintf_r+0xf7c>
 80066ea:	9a08      	ldr	r2, [sp, #32]
 80066ec:	9905      	ldr	r1, [sp, #20]
 80066ee:	6813      	ldr	r3, [r2, #0]
 80066f0:	17cf      	asrs	r7, r1, #31
 80066f2:	4608      	mov	r0, r1
 80066f4:	3204      	adds	r2, #4
 80066f6:	4639      	mov	r1, r7
 80066f8:	9208      	str	r2, [sp, #32]
 80066fa:	e9c3 0100 	strd	r0, r1, [r3]
 80066fe:	e474      	b.n	8005fea <_vfprintf_r+0x82>
 8006700:	781d      	ldrb	r5, [r3, #0]
 8006702:	2d2a      	cmp	r5, #42	; 0x2a
 8006704:	f103 0101 	add.w	r1, r3, #1
 8006708:	f000 862a 	beq.w	8007360 <_vfprintf_r+0x13f8>
 800670c:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8006710:	2809      	cmp	r0, #9
 8006712:	460b      	mov	r3, r1
 8006714:	f04f 0600 	mov.w	r6, #0
 8006718:	f63f ac98 	bhi.w	800604c <_vfprintf_r+0xe4>
 800671c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8006720:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8006724:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8006728:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 800672c:	2809      	cmp	r0, #9
 800672e:	d9f5      	bls.n	800671c <_vfprintf_r+0x7b4>
 8006730:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 8006734:	e48a      	b.n	800604c <_vfprintf_r+0xe4>
 8006736:	9304      	str	r3, [sp, #16]
 8006738:	9b02      	ldr	r3, [sp, #8]
 800673a:	f043 0310 	orr.w	r3, r3, #16
 800673e:	9302      	str	r3, [sp, #8]
 8006740:	9b02      	ldr	r3, [sp, #8]
 8006742:	f013 0320 	ands.w	r3, r3, #32
 8006746:	46b2      	mov	sl, r6
 8006748:	f47f ae8d 	bne.w	8006466 <_vfprintf_r+0x4fe>
 800674c:	9a02      	ldr	r2, [sp, #8]
 800674e:	f012 0210 	ands.w	r2, r2, #16
 8006752:	f040 8238 	bne.w	8006bc6 <_vfprintf_r+0xc5e>
 8006756:	9b02      	ldr	r3, [sp, #8]
 8006758:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800675c:	f000 8233 	beq.w	8006bc6 <_vfprintf_r+0xc5e>
 8006760:	9908      	ldr	r1, [sp, #32]
 8006762:	4613      	mov	r3, r2
 8006764:	460a      	mov	r2, r1
 8006766:	3204      	adds	r2, #4
 8006768:	880e      	ldrh	r6, [r1, #0]
 800676a:	9208      	str	r2, [sp, #32]
 800676c:	2700      	movs	r7, #0
 800676e:	e51f      	b.n	80061b0 <_vfprintf_r+0x248>
 8006770:	9304      	str	r3, [sp, #16]
 8006772:	4b34      	ldr	r3, [pc, #208]	; (8006844 <_vfprintf_r+0x8dc>)
 8006774:	9310      	str	r3, [sp, #64]	; 0x40
 8006776:	9b02      	ldr	r3, [sp, #8]
 8006778:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800677c:	0699      	lsls	r1, r3, #26
 800677e:	46b2      	mov	sl, r6
 8006780:	f53f aeab 	bmi.w	80064da <_vfprintf_r+0x572>
 8006784:	9b02      	ldr	r3, [sp, #8]
 8006786:	06da      	lsls	r2, r3, #27
 8006788:	f140 83d1 	bpl.w	8006f2e <_vfprintf_r+0xfc6>
 800678c:	9a08      	ldr	r2, [sp, #32]
 800678e:	4613      	mov	r3, r2
 8006790:	3304      	adds	r3, #4
 8006792:	6816      	ldr	r6, [r2, #0]
 8006794:	9308      	str	r3, [sp, #32]
 8006796:	2700      	movs	r7, #0
 8006798:	e6a8      	b.n	80064ec <_vfprintf_r+0x584>
 800679a:	9908      	ldr	r1, [sp, #32]
 800679c:	9304      	str	r3, [sp, #16]
 800679e:	680a      	ldr	r2, [r1, #0]
 80067a0:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 80067a4:	2300      	movs	r3, #0
 80067a6:	2201      	movs	r2, #1
 80067a8:	3104      	adds	r1, #4
 80067aa:	469c      	mov	ip, r3
 80067ac:	9203      	str	r2, [sp, #12]
 80067ae:	9108      	str	r1, [sp, #32]
 80067b0:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80067b4:	ab22      	add	r3, sp, #136	; 0x88
 80067b6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80067ba:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 80067be:	9207      	str	r2, [sp, #28]
 80067c0:	930a      	str	r3, [sp, #40]	; 0x28
 80067c2:	e535      	b.n	8006230 <_vfprintf_r+0x2c8>
 80067c4:	9304      	str	r3, [sp, #16]
 80067c6:	9b02      	ldr	r3, [sp, #8]
 80067c8:	f043 0310 	orr.w	r3, r3, #16
 80067cc:	9302      	str	r3, [sp, #8]
 80067ce:	9b02      	ldr	r3, [sp, #8]
 80067d0:	46b2      	mov	sl, r6
 80067d2:	069e      	lsls	r6, r3, #26
 80067d4:	f53f ace2 	bmi.w	800619c <_vfprintf_r+0x234>
 80067d8:	9b02      	ldr	r3, [sp, #8]
 80067da:	06d8      	lsls	r0, r3, #27
 80067dc:	f140 8399 	bpl.w	8006f12 <_vfprintf_r+0xfaa>
 80067e0:	9a08      	ldr	r2, [sp, #32]
 80067e2:	4613      	mov	r3, r2
 80067e4:	3204      	adds	r2, #4
 80067e6:	681e      	ldr	r6, [r3, #0]
 80067e8:	9208      	str	r2, [sp, #32]
 80067ea:	2301      	movs	r3, #1
 80067ec:	2700      	movs	r7, #0
 80067ee:	e4df      	b.n	80061b0 <_vfprintf_r+0x248>
 80067f0:	9304      	str	r3, [sp, #16]
 80067f2:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80067f6:	2d00      	cmp	r5, #0
 80067f8:	f43f acaf 	beq.w	800615a <_vfprintf_r+0x1f2>
 80067fc:	2300      	movs	r3, #0
 80067fe:	2201      	movs	r2, #1
 8006800:	469c      	mov	ip, r3
 8006802:	9203      	str	r2, [sp, #12]
 8006804:	f88d 5088 	strb.w	r5, [sp, #136]	; 0x88
 8006808:	e7d2      	b.n	80067b0 <_vfprintf_r+0x848>
 800680a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800680e:	e55b      	b.n	80062c8 <_vfprintf_r+0x360>
 8006810:	2b01      	cmp	r3, #1
 8006812:	f47f ace5 	bne.w	80061e0 <_vfprintf_r+0x278>
 8006816:	2f00      	cmp	r7, #0
 8006818:	bf08      	it	eq
 800681a:	2e0a      	cmpeq	r6, #10
 800681c:	f080 81ff 	bcs.w	8006c1e <_vfprintf_r+0xcb6>
 8006820:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
 8006824:	3630      	adds	r6, #48	; 0x30
 8006826:	f80b 6d41 	strb.w	r6, [fp, #-65]!
 800682a:	ab2c      	add	r3, sp, #176	; 0xb0
 800682c:	ebcb 0303 	rsb	r3, fp, r3
 8006830:	9307      	str	r3, [sp, #28]
 8006832:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8006836:	e4ed      	b.n	8006214 <_vfprintf_r+0x2ac>
 8006838:	08019e24 	.word	0x08019e24
 800683c:	08019e20 	.word	0x08019e20
 8006840:	08019e44 	.word	0x08019e44
 8006844:	08019e30 	.word	0x08019e30
 8006848:	2d65      	cmp	r5, #101	; 0x65
 800684a:	f340 808a 	ble.w	8006962 <_vfprintf_r+0x9fa>
 800684e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006852:	2200      	movs	r2, #0
 8006854:	2300      	movs	r3, #0
 8006856:	f7fa f99d 	bl	8000b94 <__aeabi_dcmpeq>
 800685a:	2800      	cmp	r0, #0
 800685c:	f000 8131 	beq.w	8006ac2 <_vfprintf_r+0xb5a>
 8006860:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006862:	4aae      	ldr	r2, [pc, #696]	; (8006b1c <_vfprintf_r+0xbb4>)
 8006864:	6022      	str	r2, [r4, #0]
 8006866:	3301      	adds	r3, #1
 8006868:	f10b 0b01 	add.w	fp, fp, #1
 800686c:	2201      	movs	r2, #1
 800686e:	2b07      	cmp	r3, #7
 8006870:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8006874:	9320      	str	r3, [sp, #128]	; 0x80
 8006876:	6062      	str	r2, [r4, #4]
 8006878:	f300 8372 	bgt.w	8006f60 <_vfprintf_r+0xff8>
 800687c:	3408      	adds	r4, #8
 800687e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006880:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006882:	4293      	cmp	r3, r2
 8006884:	db03      	blt.n	800688e <_vfprintf_r+0x926>
 8006886:	9b02      	ldr	r3, [sp, #8]
 8006888:	07df      	lsls	r7, r3, #31
 800688a:	f57f ad90 	bpl.w	80063ae <_vfprintf_r+0x446>
 800688e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006890:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006892:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006894:	6022      	str	r2, [r4, #0]
 8006896:	3301      	adds	r3, #1
 8006898:	448b      	add	fp, r1
 800689a:	2b07      	cmp	r3, #7
 800689c:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80068a0:	6061      	str	r1, [r4, #4]
 80068a2:	9320      	str	r3, [sp, #128]	; 0x80
 80068a4:	f300 83e1 	bgt.w	800706a <_vfprintf_r+0x1102>
 80068a8:	3408      	adds	r4, #8
 80068aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068ac:	1e5d      	subs	r5, r3, #1
 80068ae:	2d00      	cmp	r5, #0
 80068b0:	f77f ad7d 	ble.w	80063ae <_vfprintf_r+0x446>
 80068b4:	2d10      	cmp	r5, #16
 80068b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80068b8:	4f99      	ldr	r7, [pc, #612]	; (8006b20 <_vfprintf_r+0xbb8>)
 80068ba:	f340 8196 	ble.w	8006bea <_vfprintf_r+0xc82>
 80068be:	2610      	movs	r6, #16
 80068c0:	465a      	mov	r2, fp
 80068c2:	e004      	b.n	80068ce <_vfprintf_r+0x966>
 80068c4:	3408      	adds	r4, #8
 80068c6:	3d10      	subs	r5, #16
 80068c8:	2d10      	cmp	r5, #16
 80068ca:	f340 818d 	ble.w	8006be8 <_vfprintf_r+0xc80>
 80068ce:	3301      	adds	r3, #1
 80068d0:	3210      	adds	r2, #16
 80068d2:	2b07      	cmp	r3, #7
 80068d4:	9221      	str	r2, [sp, #132]	; 0x84
 80068d6:	9320      	str	r3, [sp, #128]	; 0x80
 80068d8:	6027      	str	r7, [r4, #0]
 80068da:	6066      	str	r6, [r4, #4]
 80068dc:	ddf2      	ble.n	80068c4 <_vfprintf_r+0x95c>
 80068de:	4640      	mov	r0, r8
 80068e0:	4649      	mov	r1, r9
 80068e2:	aa1f      	add	r2, sp, #124	; 0x7c
 80068e4:	f003 fbb4 	bl	800a050 <__sprint_r>
 80068e8:	2800      	cmp	r0, #0
 80068ea:	f47f ac3d 	bne.w	8006168 <_vfprintf_r+0x200>
 80068ee:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80068f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80068f2:	ac2c      	add	r4, sp, #176	; 0xb0
 80068f4:	e7e7      	b.n	80068c6 <_vfprintf_r+0x95e>
 80068f6:	9b06      	ldr	r3, [sp, #24]
 80068f8:	9a03      	ldr	r2, [sp, #12]
 80068fa:	1a9e      	subs	r6, r3, r2
 80068fc:	2e00      	cmp	r6, #0
 80068fe:	f77f ad0a 	ble.w	8006316 <_vfprintf_r+0x3ae>
 8006902:	2e10      	cmp	r6, #16
 8006904:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006906:	4f86      	ldr	r7, [pc, #536]	; (8006b20 <_vfprintf_r+0xbb8>)
 8006908:	dd1f      	ble.n	800694a <_vfprintf_r+0x9e2>
 800690a:	f04f 0a10 	mov.w	sl, #16
 800690e:	465b      	mov	r3, fp
 8006910:	e004      	b.n	800691c <_vfprintf_r+0x9b4>
 8006912:	3e10      	subs	r6, #16
 8006914:	2e10      	cmp	r6, #16
 8006916:	f104 0408 	add.w	r4, r4, #8
 800691a:	dd15      	ble.n	8006948 <_vfprintf_r+0x9e0>
 800691c:	3201      	adds	r2, #1
 800691e:	3310      	adds	r3, #16
 8006920:	2a07      	cmp	r2, #7
 8006922:	9321      	str	r3, [sp, #132]	; 0x84
 8006924:	9220      	str	r2, [sp, #128]	; 0x80
 8006926:	e884 0480 	stmia.w	r4, {r7, sl}
 800692a:	ddf2      	ble.n	8006912 <_vfprintf_r+0x9aa>
 800692c:	4640      	mov	r0, r8
 800692e:	4649      	mov	r1, r9
 8006930:	aa1f      	add	r2, sp, #124	; 0x7c
 8006932:	f003 fb8d 	bl	800a050 <__sprint_r>
 8006936:	2800      	cmp	r0, #0
 8006938:	f47f ac16 	bne.w	8006168 <_vfprintf_r+0x200>
 800693c:	3e10      	subs	r6, #16
 800693e:	2e10      	cmp	r6, #16
 8006940:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006942:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006944:	ac2c      	add	r4, sp, #176	; 0xb0
 8006946:	dce9      	bgt.n	800691c <_vfprintf_r+0x9b4>
 8006948:	469b      	mov	fp, r3
 800694a:	3201      	adds	r2, #1
 800694c:	44b3      	add	fp, r6
 800694e:	2a07      	cmp	r2, #7
 8006950:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8006954:	9220      	str	r2, [sp, #128]	; 0x80
 8006956:	6027      	str	r7, [r4, #0]
 8006958:	6066      	str	r6, [r4, #4]
 800695a:	f300 821a 	bgt.w	8006d92 <_vfprintf_r+0xe2a>
 800695e:	3408      	adds	r4, #8
 8006960:	e4d9      	b.n	8006316 <_vfprintf_r+0x3ae>
 8006962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006964:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006966:	2b01      	cmp	r3, #1
 8006968:	f340 81d5 	ble.w	8006d16 <_vfprintf_r+0xdae>
 800696c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800696e:	6023      	str	r3, [r4, #0]
 8006970:	3501      	adds	r5, #1
 8006972:	f10b 0601 	add.w	r6, fp, #1
 8006976:	2301      	movs	r3, #1
 8006978:	2d07      	cmp	r5, #7
 800697a:	9621      	str	r6, [sp, #132]	; 0x84
 800697c:	9520      	str	r5, [sp, #128]	; 0x80
 800697e:	6063      	str	r3, [r4, #4]
 8006980:	f300 81e5 	bgt.w	8006d4e <_vfprintf_r+0xde6>
 8006984:	3408      	adds	r4, #8
 8006986:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006988:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800698a:	6023      	str	r3, [r4, #0]
 800698c:	3501      	adds	r5, #1
 800698e:	4416      	add	r6, r2
 8006990:	2d07      	cmp	r5, #7
 8006992:	9621      	str	r6, [sp, #132]	; 0x84
 8006994:	9520      	str	r5, [sp, #128]	; 0x80
 8006996:	6062      	str	r2, [r4, #4]
 8006998:	f300 81ef 	bgt.w	8006d7a <_vfprintf_r+0xe12>
 800699c:	3408      	adds	r4, #8
 800699e:	2300      	movs	r3, #0
 80069a0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80069a4:	2200      	movs	r2, #0
 80069a6:	f7fa f8f5 	bl	8000b94 <__aeabi_dcmpeq>
 80069aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069ac:	2800      	cmp	r0, #0
 80069ae:	f040 80e1 	bne.w	8006b74 <_vfprintf_r+0xc0c>
 80069b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069b4:	3b01      	subs	r3, #1
 80069b6:	3501      	adds	r5, #1
 80069b8:	3201      	adds	r2, #1
 80069ba:	441e      	add	r6, r3
 80069bc:	2d07      	cmp	r5, #7
 80069be:	9520      	str	r5, [sp, #128]	; 0x80
 80069c0:	9621      	str	r6, [sp, #132]	; 0x84
 80069c2:	6022      	str	r2, [r4, #0]
 80069c4:	6063      	str	r3, [r4, #4]
 80069c6:	f300 81b6 	bgt.w	8006d36 <_vfprintf_r+0xdce>
 80069ca:	3408      	adds	r4, #8
 80069cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80069ce:	6062      	str	r2, [r4, #4]
 80069d0:	3501      	adds	r5, #1
 80069d2:	eb06 0b02 	add.w	fp, r6, r2
 80069d6:	ab1b      	add	r3, sp, #108	; 0x6c
 80069d8:	2d07      	cmp	r5, #7
 80069da:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80069de:	9520      	str	r5, [sp, #128]	; 0x80
 80069e0:	6023      	str	r3, [r4, #0]
 80069e2:	f77f ace3 	ble.w	80063ac <_vfprintf_r+0x444>
 80069e6:	4640      	mov	r0, r8
 80069e8:	4649      	mov	r1, r9
 80069ea:	aa1f      	add	r2, sp, #124	; 0x7c
 80069ec:	f003 fb30 	bl	800a050 <__sprint_r>
 80069f0:	2800      	cmp	r0, #0
 80069f2:	f47f abb9 	bne.w	8006168 <_vfprintf_r+0x200>
 80069f6:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 80069fa:	ac2c      	add	r4, sp, #176	; 0xb0
 80069fc:	e4d7      	b.n	80063ae <_vfprintf_r+0x446>
 80069fe:	4640      	mov	r0, r8
 8006a00:	4649      	mov	r1, r9
 8006a02:	aa1f      	add	r2, sp, #124	; 0x7c
 8006a04:	f003 fb24 	bl	800a050 <__sprint_r>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	f43f ad1a 	beq.w	8006442 <_vfprintf_r+0x4da>
 8006a0e:	f7ff bbab 	b.w	8006168 <_vfprintf_r+0x200>
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d133      	bne.n	8006a7e <_vfprintf_r+0xb16>
 8006a16:	9b02      	ldr	r3, [sp, #8]
 8006a18:	07da      	lsls	r2, r3, #31
 8006a1a:	d530      	bpl.n	8006a7e <_vfprintf_r+0xb16>
 8006a1c:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
 8006a20:	2330      	movs	r3, #48	; 0x30
 8006a22:	f80b 3d41 	strb.w	r3, [fp, #-65]!
 8006a26:	ab2c      	add	r3, sp, #176	; 0xb0
 8006a28:	ebcb 0303 	rsb	r3, fp, r3
 8006a2c:	9307      	str	r3, [sp, #28]
 8006a2e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8006a32:	f7ff bbef 	b.w	8006214 <_vfprintf_r+0x2ac>
 8006a36:	4640      	mov	r0, r8
 8006a38:	4649      	mov	r1, r9
 8006a3a:	aa1f      	add	r2, sp, #124	; 0x7c
 8006a3c:	f003 fb08 	bl	800a050 <__sprint_r>
 8006a40:	2800      	cmp	r0, #0
 8006a42:	f47f ab91 	bne.w	8006168 <_vfprintf_r+0x200>
 8006a46:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8006a4a:	ac2c      	add	r4, sp, #176	; 0xb0
 8006a4c:	e49d      	b.n	800638a <_vfprintf_r+0x422>
 8006a4e:	4640      	mov	r0, r8
 8006a50:	4649      	mov	r1, r9
 8006a52:	aa1f      	add	r2, sp, #124	; 0x7c
 8006a54:	f003 fafc 	bl	800a050 <__sprint_r>
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	f47f ab85 	bne.w	8006168 <_vfprintf_r+0x200>
 8006a5e:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8006a62:	ac2c      	add	r4, sp, #176	; 0xb0
 8006a64:	e443      	b.n	80062ee <_vfprintf_r+0x386>
 8006a66:	4640      	mov	r0, r8
 8006a68:	4649      	mov	r1, r9
 8006a6a:	aa1f      	add	r2, sp, #124	; 0x7c
 8006a6c:	f003 faf0 	bl	800a050 <__sprint_r>
 8006a70:	2800      	cmp	r0, #0
 8006a72:	f47f ab79 	bne.w	8006168 <_vfprintf_r+0x200>
 8006a76:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8006a7a:	ac2c      	add	r4, sp, #176	; 0xb0
 8006a7c:	e448      	b.n	8006310 <_vfprintf_r+0x3a8>
 8006a7e:	ab2c      	add	r3, sp, #176	; 0xb0
 8006a80:	f8cd a01c 	str.w	sl, [sp, #28]
 8006a84:	930a      	str	r3, [sp, #40]	; 0x28
 8006a86:	f7ff bbc5 	b.w	8006214 <_vfprintf_r+0x2ac>
 8006a8a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006a8c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
 8006a90:	0933      	lsrs	r3, r6, #4
 8006a92:	f006 010f 	and.w	r1, r6, #15
 8006a96:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8006a9a:	093a      	lsrs	r2, r7, #4
 8006a9c:	461e      	mov	r6, r3
 8006a9e:	4617      	mov	r7, r2
 8006aa0:	5c43      	ldrb	r3, [r0, r1]
 8006aa2:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8006aa6:	ea56 0307 	orrs.w	r3, r6, r7
 8006aaa:	d1f1      	bne.n	8006a90 <_vfprintf_r+0xb28>
 8006aac:	465a      	mov	r2, fp
 8006aae:	ab2c      	add	r3, sp, #176	; 0xb0
 8006ab0:	1a9b      	subs	r3, r3, r2
 8006ab2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8006ab6:	9307      	str	r3, [sp, #28]
 8006ab8:	f7ff bbac 	b.w	8006214 <_vfprintf_r+0x2ac>
 8006abc:	2302      	movs	r3, #2
 8006abe:	f7ff bb77 	b.w	80061b0 <_vfprintf_r+0x248>
 8006ac2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006ac4:	2d00      	cmp	r5, #0
 8006ac6:	f340 8257 	ble.w	8006f78 <_vfprintf_r+0x1010>
 8006aca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006acc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006ace:	428a      	cmp	r2, r1
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	bfa8      	it	ge
 8006ad4:	460b      	movge	r3, r1
 8006ad6:	461d      	mov	r5, r3
 8006ad8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ada:	2d00      	cmp	r5, #0
 8006adc:	eb01 0a02 	add.w	sl, r1, r2
 8006ae0:	dd0b      	ble.n	8006afa <_vfprintf_r+0xb92>
 8006ae2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006ae4:	6021      	str	r1, [r4, #0]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	44ab      	add	fp, r5
 8006aea:	2b07      	cmp	r3, #7
 8006aec:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8006af0:	6065      	str	r5, [r4, #4]
 8006af2:	9320      	str	r3, [sp, #128]	; 0x80
 8006af4:	f300 8309 	bgt.w	800710a <_vfprintf_r+0x11a2>
 8006af8:	3408      	adds	r4, #8
 8006afa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006afc:	2d00      	cmp	r5, #0
 8006afe:	bfa8      	it	ge
 8006b00:	1b5b      	subge	r3, r3, r5
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	461d      	mov	r5, r3
 8006b06:	f340 80b0 	ble.w	8006c6a <_vfprintf_r+0xd02>
 8006b0a:	2d10      	cmp	r5, #16
 8006b0c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006b0e:	4f04      	ldr	r7, [pc, #16]	; (8006b20 <_vfprintf_r+0xbb8>)
 8006b10:	f340 821a 	ble.w	8006f48 <_vfprintf_r+0xfe0>
 8006b14:	2610      	movs	r6, #16
 8006b16:	465a      	mov	r2, fp
 8006b18:	e009      	b.n	8006b2e <_vfprintf_r+0xbc6>
 8006b1a:	bf00      	nop
 8006b1c:	08019e60 	.word	0x08019e60
 8006b20:	08019e10 	.word	0x08019e10
 8006b24:	3408      	adds	r4, #8
 8006b26:	3d10      	subs	r5, #16
 8006b28:	2d10      	cmp	r5, #16
 8006b2a:	f340 820c 	ble.w	8006f46 <_vfprintf_r+0xfde>
 8006b2e:	3301      	adds	r3, #1
 8006b30:	3210      	adds	r2, #16
 8006b32:	2b07      	cmp	r3, #7
 8006b34:	9221      	str	r2, [sp, #132]	; 0x84
 8006b36:	9320      	str	r3, [sp, #128]	; 0x80
 8006b38:	6027      	str	r7, [r4, #0]
 8006b3a:	6066      	str	r6, [r4, #4]
 8006b3c:	ddf2      	ble.n	8006b24 <_vfprintf_r+0xbbc>
 8006b3e:	4640      	mov	r0, r8
 8006b40:	4649      	mov	r1, r9
 8006b42:	aa1f      	add	r2, sp, #124	; 0x7c
 8006b44:	f003 fa84 	bl	800a050 <__sprint_r>
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	f47f ab0d 	bne.w	8006168 <_vfprintf_r+0x200>
 8006b4e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006b50:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006b52:	ac2c      	add	r4, sp, #176	; 0xb0
 8006b54:	e7e7      	b.n	8006b26 <_vfprintf_r+0xbbe>
 8006b56:	4640      	mov	r0, r8
 8006b58:	4649      	mov	r1, r9
 8006b5a:	aa1f      	add	r2, sp, #124	; 0x7c
 8006b5c:	f003 fa78 	bl	800a050 <__sprint_r>
 8006b60:	2800      	cmp	r0, #0
 8006b62:	f47f ab01 	bne.w	8006168 <_vfprintf_r+0x200>
 8006b66:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8006b6a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8006b6e:	ac2c      	add	r4, sp, #176	; 0xb0
 8006b70:	f7ff bbaa 	b.w	80062c8 <_vfprintf_r+0x360>
 8006b74:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8006b78:	f1ba 0f00 	cmp.w	sl, #0
 8006b7c:	f77f af26 	ble.w	80069cc <_vfprintf_r+0xa64>
 8006b80:	f1ba 0f10 	cmp.w	sl, #16
 8006b84:	4f8f      	ldr	r7, [pc, #572]	; (8006dc4 <_vfprintf_r+0xe5c>)
 8006b86:	bfc8      	it	gt
 8006b88:	f04f 0b10 	movgt.w	fp, #16
 8006b8c:	dc07      	bgt.n	8006b9e <_vfprintf_r+0xc36>
 8006b8e:	e0ea      	b.n	8006d66 <_vfprintf_r+0xdfe>
 8006b90:	3408      	adds	r4, #8
 8006b92:	f1aa 0a10 	sub.w	sl, sl, #16
 8006b96:	f1ba 0f10 	cmp.w	sl, #16
 8006b9a:	f340 80e4 	ble.w	8006d66 <_vfprintf_r+0xdfe>
 8006b9e:	3501      	adds	r5, #1
 8006ba0:	3610      	adds	r6, #16
 8006ba2:	2d07      	cmp	r5, #7
 8006ba4:	9621      	str	r6, [sp, #132]	; 0x84
 8006ba6:	9520      	str	r5, [sp, #128]	; 0x80
 8006ba8:	e884 0880 	stmia.w	r4, {r7, fp}
 8006bac:	ddf0      	ble.n	8006b90 <_vfprintf_r+0xc28>
 8006bae:	4640      	mov	r0, r8
 8006bb0:	4649      	mov	r1, r9
 8006bb2:	aa1f      	add	r2, sp, #124	; 0x7c
 8006bb4:	f003 fa4c 	bl	800a050 <__sprint_r>
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	f47f aad5 	bne.w	8006168 <_vfprintf_r+0x200>
 8006bbe:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8006bc0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006bc2:	ac2c      	add	r4, sp, #176	; 0xb0
 8006bc4:	e7e5      	b.n	8006b92 <_vfprintf_r+0xc2a>
 8006bc6:	9908      	ldr	r1, [sp, #32]
 8006bc8:	460a      	mov	r2, r1
 8006bca:	3204      	adds	r2, #4
 8006bcc:	680e      	ldr	r6, [r1, #0]
 8006bce:	9208      	str	r2, [sp, #32]
 8006bd0:	2700      	movs	r7, #0
 8006bd2:	f7ff baed 	b.w	80061b0 <_vfprintf_r+0x248>
 8006bd6:	9a08      	ldr	r2, [sp, #32]
 8006bd8:	6816      	ldr	r6, [r2, #0]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	3304      	adds	r3, #4
 8006bde:	17f7      	asrs	r7, r6, #31
 8006be0:	9308      	str	r3, [sp, #32]
 8006be2:	4632      	mov	r2, r6
 8006be4:	463b      	mov	r3, r7
 8006be6:	e4c0      	b.n	800656a <_vfprintf_r+0x602>
 8006be8:	4693      	mov	fp, r2
 8006bea:	3301      	adds	r3, #1
 8006bec:	44ab      	add	fp, r5
 8006bee:	2b07      	cmp	r3, #7
 8006bf0:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8006bf4:	9320      	str	r3, [sp, #128]	; 0x80
 8006bf6:	6027      	str	r7, [r4, #0]
 8006bf8:	6065      	str	r5, [r4, #4]
 8006bfa:	f77f abd7 	ble.w	80063ac <_vfprintf_r+0x444>
 8006bfe:	e6f2      	b.n	80069e6 <_vfprintf_r+0xa7e>
 8006c00:	2b30      	cmp	r3, #48	; 0x30
 8006c02:	f000 823e 	beq.w	8007082 <_vfprintf_r+0x111a>
 8006c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	a82c      	add	r0, sp, #176	; 0xb0
 8006c0e:	930a      	str	r3, [sp, #40]	; 0x28
 8006c10:	1a82      	subs	r2, r0, r2
 8006c12:	2330      	movs	r3, #48	; 0x30
 8006c14:	9207      	str	r2, [sp, #28]
 8006c16:	f801 3c01 	strb.w	r3, [r1, #-1]
 8006c1a:	f7ff bafb 	b.w	8006214 <_vfprintf_r+0x2ac>
 8006c1e:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
 8006c22:	f8cd c00c 	str.w	ip, [sp, #12]
 8006c26:	4630      	mov	r0, r6
 8006c28:	4639      	mov	r1, r7
 8006c2a:	220a      	movs	r2, #10
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	f7fa f80b 	bl	8000c48 <__aeabi_uldivmod>
 8006c32:	3230      	adds	r2, #48	; 0x30
 8006c34:	4630      	mov	r0, r6
 8006c36:	4639      	mov	r1, r7
 8006c38:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	220a      	movs	r2, #10
 8006c40:	f7fa f802 	bl	8000c48 <__aeabi_uldivmod>
 8006c44:	4606      	mov	r6, r0
 8006c46:	460f      	mov	r7, r1
 8006c48:	ea56 0307 	orrs.w	r3, r6, r7
 8006c4c:	d1eb      	bne.n	8006c26 <_vfprintf_r+0xcbe>
 8006c4e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006c52:	e72b      	b.n	8006aac <_vfprintf_r+0xb44>
 8006c54:	4640      	mov	r0, r8
 8006c56:	4649      	mov	r1, r9
 8006c58:	aa1f      	add	r2, sp, #124	; 0x7c
 8006c5a:	f003 f9f9 	bl	800a050 <__sprint_r>
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	f47f aa82 	bne.w	8006168 <_vfprintf_r+0x200>
 8006c64:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8006c68:	ac2c      	add	r4, sp, #176	; 0xb0
 8006c6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c6c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006c6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006c70:	440a      	add	r2, r1
 8006c72:	4616      	mov	r6, r2
 8006c74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c76:	4293      	cmp	r3, r2
 8006c78:	db3e      	blt.n	8006cf8 <_vfprintf_r+0xd90>
 8006c7a:	9a02      	ldr	r2, [sp, #8]
 8006c7c:	07d5      	lsls	r5, r2, #31
 8006c7e:	d43b      	bmi.n	8006cf8 <_vfprintf_r+0xd90>
 8006c80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c82:	ebc6 050a 	rsb	r5, r6, sl
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	429d      	cmp	r5, r3
 8006c8a:	bfa8      	it	ge
 8006c8c:	461d      	movge	r5, r3
 8006c8e:	2d00      	cmp	r5, #0
 8006c90:	462f      	mov	r7, r5
 8006c92:	dd0b      	ble.n	8006cac <_vfprintf_r+0xd44>
 8006c94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006c96:	6026      	str	r6, [r4, #0]
 8006c98:	3201      	adds	r2, #1
 8006c9a:	44ab      	add	fp, r5
 8006c9c:	2a07      	cmp	r2, #7
 8006c9e:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8006ca2:	6065      	str	r5, [r4, #4]
 8006ca4:	9220      	str	r2, [sp, #128]	; 0x80
 8006ca6:	f300 8266 	bgt.w	8007176 <_vfprintf_r+0x120e>
 8006caa:	3408      	adds	r4, #8
 8006cac:	2f00      	cmp	r7, #0
 8006cae:	bfac      	ite	ge
 8006cb0:	1bdd      	subge	r5, r3, r7
 8006cb2:	461d      	movlt	r5, r3
 8006cb4:	2d00      	cmp	r5, #0
 8006cb6:	f77f ab7a 	ble.w	80063ae <_vfprintf_r+0x446>
 8006cba:	2d10      	cmp	r5, #16
 8006cbc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006cbe:	4f41      	ldr	r7, [pc, #260]	; (8006dc4 <_vfprintf_r+0xe5c>)
 8006cc0:	dd93      	ble.n	8006bea <_vfprintf_r+0xc82>
 8006cc2:	2610      	movs	r6, #16
 8006cc4:	465a      	mov	r2, fp
 8006cc6:	e003      	b.n	8006cd0 <_vfprintf_r+0xd68>
 8006cc8:	3408      	adds	r4, #8
 8006cca:	3d10      	subs	r5, #16
 8006ccc:	2d10      	cmp	r5, #16
 8006cce:	dd8b      	ble.n	8006be8 <_vfprintf_r+0xc80>
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	3210      	adds	r2, #16
 8006cd4:	2b07      	cmp	r3, #7
 8006cd6:	9221      	str	r2, [sp, #132]	; 0x84
 8006cd8:	9320      	str	r3, [sp, #128]	; 0x80
 8006cda:	6027      	str	r7, [r4, #0]
 8006cdc:	6066      	str	r6, [r4, #4]
 8006cde:	ddf3      	ble.n	8006cc8 <_vfprintf_r+0xd60>
 8006ce0:	4640      	mov	r0, r8
 8006ce2:	4649      	mov	r1, r9
 8006ce4:	aa1f      	add	r2, sp, #124	; 0x7c
 8006ce6:	f003 f9b3 	bl	800a050 <__sprint_r>
 8006cea:	2800      	cmp	r0, #0
 8006cec:	f47f aa3c 	bne.w	8006168 <_vfprintf_r+0x200>
 8006cf0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006cf2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006cf4:	ac2c      	add	r4, sp, #176	; 0xb0
 8006cf6:	e7e8      	b.n	8006cca <_vfprintf_r+0xd62>
 8006cf8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006cfa:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006cfc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006cfe:	6021      	str	r1, [r4, #0]
 8006d00:	3201      	adds	r2, #1
 8006d02:	4483      	add	fp, r0
 8006d04:	2a07      	cmp	r2, #7
 8006d06:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8006d0a:	6060      	str	r0, [r4, #4]
 8006d0c:	9220      	str	r2, [sp, #128]	; 0x80
 8006d0e:	f300 8208 	bgt.w	8007122 <_vfprintf_r+0x11ba>
 8006d12:	3408      	adds	r4, #8
 8006d14:	e7b4      	b.n	8006c80 <_vfprintf_r+0xd18>
 8006d16:	9b02      	ldr	r3, [sp, #8]
 8006d18:	07d8      	lsls	r0, r3, #31
 8006d1a:	f53f ae27 	bmi.w	800696c <_vfprintf_r+0xa04>
 8006d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d20:	6023      	str	r3, [r4, #0]
 8006d22:	3501      	adds	r5, #1
 8006d24:	f10b 0601 	add.w	r6, fp, #1
 8006d28:	2301      	movs	r3, #1
 8006d2a:	2d07      	cmp	r5, #7
 8006d2c:	9621      	str	r6, [sp, #132]	; 0x84
 8006d2e:	9520      	str	r5, [sp, #128]	; 0x80
 8006d30:	6063      	str	r3, [r4, #4]
 8006d32:	f77f ae4a 	ble.w	80069ca <_vfprintf_r+0xa62>
 8006d36:	4640      	mov	r0, r8
 8006d38:	4649      	mov	r1, r9
 8006d3a:	aa1f      	add	r2, sp, #124	; 0x7c
 8006d3c:	f003 f988 	bl	800a050 <__sprint_r>
 8006d40:	2800      	cmp	r0, #0
 8006d42:	f47f aa11 	bne.w	8006168 <_vfprintf_r+0x200>
 8006d46:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8006d48:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006d4a:	ac2c      	add	r4, sp, #176	; 0xb0
 8006d4c:	e63e      	b.n	80069cc <_vfprintf_r+0xa64>
 8006d4e:	4640      	mov	r0, r8
 8006d50:	4649      	mov	r1, r9
 8006d52:	aa1f      	add	r2, sp, #124	; 0x7c
 8006d54:	f003 f97c 	bl	800a050 <__sprint_r>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	f47f aa05 	bne.w	8006168 <_vfprintf_r+0x200>
 8006d5e:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8006d60:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006d62:	ac2c      	add	r4, sp, #176	; 0xb0
 8006d64:	e60f      	b.n	8006986 <_vfprintf_r+0xa1e>
 8006d66:	3501      	adds	r5, #1
 8006d68:	4456      	add	r6, sl
 8006d6a:	2d07      	cmp	r5, #7
 8006d6c:	9621      	str	r6, [sp, #132]	; 0x84
 8006d6e:	9520      	str	r5, [sp, #128]	; 0x80
 8006d70:	e884 0480 	stmia.w	r4, {r7, sl}
 8006d74:	f77f ae29 	ble.w	80069ca <_vfprintf_r+0xa62>
 8006d78:	e7dd      	b.n	8006d36 <_vfprintf_r+0xdce>
 8006d7a:	4640      	mov	r0, r8
 8006d7c:	4649      	mov	r1, r9
 8006d7e:	aa1f      	add	r2, sp, #124	; 0x7c
 8006d80:	f003 f966 	bl	800a050 <__sprint_r>
 8006d84:	2800      	cmp	r0, #0
 8006d86:	f47f a9ef 	bne.w	8006168 <_vfprintf_r+0x200>
 8006d8a:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8006d8c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006d8e:	ac2c      	add	r4, sp, #176	; 0xb0
 8006d90:	e605      	b.n	800699e <_vfprintf_r+0xa36>
 8006d92:	4640      	mov	r0, r8
 8006d94:	4649      	mov	r1, r9
 8006d96:	aa1f      	add	r2, sp, #124	; 0x7c
 8006d98:	f003 f95a 	bl	800a050 <__sprint_r>
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	f47f a9e3 	bne.w	8006168 <_vfprintf_r+0x200>
 8006da2:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8006da6:	ac2c      	add	r4, sp, #176	; 0xb0
 8006da8:	f7ff bab5 	b.w	8006316 <_vfprintf_r+0x3ae>
 8006dac:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8006db0:	4276      	negs	r6, r6
 8006db2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8006db6:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 8006dba:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	f7ff b9fc 	b.w	80061bc <_vfprintf_r+0x254>
 8006dc4:	08019e10 	.word	0x08019e10
 8006dc8:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8006dcc:	f003 f894 	bl	8009ef8 <__fpclassifyd>
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	f000 8116 	beq.w	8007002 <_vfprintf_r+0x109a>
 8006dd6:	f025 0320 	bic.w	r3, r5, #32
 8006dda:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8006dde:	9303      	str	r3, [sp, #12]
 8006de0:	f000 8260 	beq.w	80072a4 <_vfprintf_r+0x133c>
 8006de4:	2b47      	cmp	r3, #71	; 0x47
 8006de6:	d105      	bne.n	8006df4 <_vfprintf_r+0xe8c>
 8006de8:	f1ba 0f00 	cmp.w	sl, #0
 8006dec:	bf14      	ite	ne
 8006dee:	46d3      	movne	fp, sl
 8006df0:	f04f 0b01 	moveq.w	fp, #1
 8006df4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006df6:	9a02      	ldr	r2, [sp, #8]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dfe:	9209      	str	r2, [sp, #36]	; 0x24
 8006e00:	f2c0 8260 	blt.w	80072c4 <_vfprintf_r+0x135c>
 8006e04:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 8006e08:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8006e0c:	f04f 0a00 	mov.w	sl, #0
 8006e10:	2d66      	cmp	r5, #102	; 0x66
 8006e12:	f000 815e 	beq.w	80070d2 <_vfprintf_r+0x116a>
 8006e16:	2d46      	cmp	r5, #70	; 0x46
 8006e18:	f000 815b 	beq.w	80070d2 <_vfprintf_r+0x116a>
 8006e1c:	9b03      	ldr	r3, [sp, #12]
 8006e1e:	2b45      	cmp	r3, #69	; 0x45
 8006e20:	bf0c      	ite	eq
 8006e22:	f10b 0701 	addeq.w	r7, fp, #1
 8006e26:	465f      	movne	r7, fp
 8006e28:	aa1a      	add	r2, sp, #104	; 0x68
 8006e2a:	ab1d      	add	r3, sp, #116	; 0x74
 8006e2c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8006e30:	4640      	mov	r0, r8
 8006e32:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8006e36:	2102      	movs	r1, #2
 8006e38:	463a      	mov	r2, r7
 8006e3a:	ab19      	add	r3, sp, #100	; 0x64
 8006e3c:	f000 fbec 	bl	8007618 <_dtoa_r>
 8006e40:	2d67      	cmp	r5, #103	; 0x67
 8006e42:	900a      	str	r0, [sp, #40]	; 0x28
 8006e44:	d002      	beq.n	8006e4c <_vfprintf_r+0xee4>
 8006e46:	2d47      	cmp	r5, #71	; 0x47
 8006e48:	f040 8151 	bne.w	80070ee <_vfprintf_r+0x1186>
 8006e4c:	9b02      	ldr	r3, [sp, #8]
 8006e4e:	07db      	lsls	r3, r3, #31
 8006e50:	f140 8241 	bpl.w	80072d6 <_vfprintf_r+0x136e>
 8006e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e56:	19de      	adds	r6, r3, r7
 8006e58:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	2300      	movs	r3, #0
 8006e60:	f7f9 fe98 	bl	8000b94 <__aeabi_dcmpeq>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	f040 81ad 	bne.w	80071c4 <_vfprintf_r+0x125c>
 8006e6a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e6c:	429e      	cmp	r6, r3
 8006e6e:	d906      	bls.n	8006e7e <_vfprintf_r+0xf16>
 8006e70:	2130      	movs	r1, #48	; 0x30
 8006e72:	1c5a      	adds	r2, r3, #1
 8006e74:	921d      	str	r2, [sp, #116]	; 0x74
 8006e76:	7019      	strb	r1, [r3, #0]
 8006e78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e7a:	429e      	cmp	r6, r3
 8006e7c:	d8f9      	bhi.n	8006e72 <_vfprintf_r+0xf0a>
 8006e7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e80:	1a9b      	subs	r3, r3, r2
 8006e82:	930d      	str	r3, [sp, #52]	; 0x34
 8006e84:	9b03      	ldr	r3, [sp, #12]
 8006e86:	2b47      	cmp	r3, #71	; 0x47
 8006e88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e8a:	f000 8183 	beq.w	8007194 <_vfprintf_r+0x122c>
 8006e8e:	2d65      	cmp	r5, #101	; 0x65
 8006e90:	f340 81a6 	ble.w	80071e0 <_vfprintf_r+0x1278>
 8006e94:	2d66      	cmp	r5, #102	; 0x66
 8006e96:	930c      	str	r3, [sp, #48]	; 0x30
 8006e98:	f000 821f 	beq.w	80072da <_vfprintf_r+0x1372>
 8006e9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	f300 8202 	bgt.w	80072aa <_vfprintf_r+0x1342>
 8006ea6:	9b02      	ldr	r3, [sp, #8]
 8006ea8:	07d9      	lsls	r1, r3, #31
 8006eaa:	f100 8239 	bmi.w	8007320 <_vfprintf_r+0x13b8>
 8006eae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006eb2:	9207      	str	r2, [sp, #28]
 8006eb4:	f1ba 0f00 	cmp.w	sl, #0
 8006eb8:	f040 8179 	bne.w	80071ae <_vfprintf_r+0x1246>
 8006ebc:	9303      	str	r3, [sp, #12]
 8006ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ec0:	9302      	str	r3, [sp, #8]
 8006ec2:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8006ec6:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 8006eca:	f7ff b9ab 	b.w	8006224 <_vfprintf_r+0x2bc>
 8006ece:	f027 0707 	bic.w	r7, r7, #7
 8006ed2:	ed97 7b00 	vldr	d7, [r7]
 8006ed6:	f107 0308 	add.w	r3, r7, #8
 8006eda:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8006ede:	9308      	str	r3, [sp, #32]
 8006ee0:	f7ff bb63 	b.w	80065aa <_vfprintf_r+0x642>
 8006ee4:	9b02      	ldr	r3, [sp, #8]
 8006ee6:	06db      	lsls	r3, r3, #27
 8006ee8:	d40b      	bmi.n	8006f02 <_vfprintf_r+0xf9a>
 8006eea:	9b02      	ldr	r3, [sp, #8]
 8006eec:	065f      	lsls	r7, r3, #25
 8006eee:	d508      	bpl.n	8006f02 <_vfprintf_r+0xf9a>
 8006ef0:	9a08      	ldr	r2, [sp, #32]
 8006ef2:	6813      	ldr	r3, [r2, #0]
 8006ef4:	3204      	adds	r2, #4
 8006ef6:	9208      	str	r2, [sp, #32]
 8006ef8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8006efc:	801a      	strh	r2, [r3, #0]
 8006efe:	f7ff b874 	b.w	8005fea <_vfprintf_r+0x82>
 8006f02:	9a08      	ldr	r2, [sp, #32]
 8006f04:	6813      	ldr	r3, [r2, #0]
 8006f06:	3204      	adds	r2, #4
 8006f08:	9208      	str	r2, [sp, #32]
 8006f0a:	9a05      	ldr	r2, [sp, #20]
 8006f0c:	601a      	str	r2, [r3, #0]
 8006f0e:	f7ff b86c 	b.w	8005fea <_vfprintf_r+0x82>
 8006f12:	9b02      	ldr	r3, [sp, #8]
 8006f14:	9a08      	ldr	r2, [sp, #32]
 8006f16:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	f43f ac62 	beq.w	80067e4 <_vfprintf_r+0x87c>
 8006f20:	8816      	ldrh	r6, [r2, #0]
 8006f22:	3204      	adds	r2, #4
 8006f24:	2700      	movs	r7, #0
 8006f26:	2301      	movs	r3, #1
 8006f28:	9208      	str	r2, [sp, #32]
 8006f2a:	f7ff b941 	b.w	80061b0 <_vfprintf_r+0x248>
 8006f2e:	9b02      	ldr	r3, [sp, #8]
 8006f30:	9a08      	ldr	r2, [sp, #32]
 8006f32:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006f36:	4613      	mov	r3, r2
 8006f38:	d076      	beq.n	8007028 <_vfprintf_r+0x10c0>
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	8816      	ldrh	r6, [r2, #0]
 8006f3e:	9308      	str	r3, [sp, #32]
 8006f40:	2700      	movs	r7, #0
 8006f42:	f7ff bad3 	b.w	80064ec <_vfprintf_r+0x584>
 8006f46:	4693      	mov	fp, r2
 8006f48:	3301      	adds	r3, #1
 8006f4a:	44ab      	add	fp, r5
 8006f4c:	2b07      	cmp	r3, #7
 8006f4e:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8006f52:	9320      	str	r3, [sp, #128]	; 0x80
 8006f54:	6027      	str	r7, [r4, #0]
 8006f56:	6065      	str	r5, [r4, #4]
 8006f58:	f73f ae7c 	bgt.w	8006c54 <_vfprintf_r+0xcec>
 8006f5c:	3408      	adds	r4, #8
 8006f5e:	e684      	b.n	8006c6a <_vfprintf_r+0xd02>
 8006f60:	4640      	mov	r0, r8
 8006f62:	4649      	mov	r1, r9
 8006f64:	aa1f      	add	r2, sp, #124	; 0x7c
 8006f66:	f003 f873 	bl	800a050 <__sprint_r>
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	f47f a8fc 	bne.w	8006168 <_vfprintf_r+0x200>
 8006f70:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8006f74:	ac2c      	add	r4, sp, #176	; 0xb0
 8006f76:	e482      	b.n	800687e <_vfprintf_r+0x916>
 8006f78:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006f7a:	4ab0      	ldr	r2, [pc, #704]	; (800723c <_vfprintf_r+0x12d4>)
 8006f7c:	6022      	str	r2, [r4, #0]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	f10b 0b01 	add.w	fp, fp, #1
 8006f84:	2201      	movs	r2, #1
 8006f86:	2b07      	cmp	r3, #7
 8006f88:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 8006f8c:	9320      	str	r3, [sp, #128]	; 0x80
 8006f8e:	6062      	str	r2, [r4, #4]
 8006f90:	dc50      	bgt.n	8007034 <_vfprintf_r+0x10cc>
 8006f92:	3408      	adds	r4, #8
 8006f94:	b92d      	cbnz	r5, 8006fa2 <_vfprintf_r+0x103a>
 8006f96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f98:	b91b      	cbnz	r3, 8006fa2 <_vfprintf_r+0x103a>
 8006f9a:	9b02      	ldr	r3, [sp, #8]
 8006f9c:	07de      	lsls	r6, r3, #31
 8006f9e:	f57f aa06 	bpl.w	80063ae <_vfprintf_r+0x446>
 8006fa2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006fa4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006fa6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006fa8:	6022      	str	r2, [r4, #0]
 8006faa:	3301      	adds	r3, #1
 8006fac:	eb0b 0201 	add.w	r2, fp, r1
 8006fb0:	2b07      	cmp	r3, #7
 8006fb2:	9221      	str	r2, [sp, #132]	; 0x84
 8006fb4:	6061      	str	r1, [r4, #4]
 8006fb6:	9320      	str	r3, [sp, #128]	; 0x80
 8006fb8:	f300 8167 	bgt.w	800728a <_vfprintf_r+0x1322>
 8006fbc:	3408      	adds	r4, #8
 8006fbe:	426d      	negs	r5, r5
 8006fc0:	2d00      	cmp	r5, #0
 8006fc2:	dd6f      	ble.n	80070a4 <_vfprintf_r+0x113c>
 8006fc4:	2d10      	cmp	r5, #16
 8006fc6:	4f9e      	ldr	r7, [pc, #632]	; (8007240 <_vfprintf_r+0x12d8>)
 8006fc8:	bfc8      	it	gt
 8006fca:	2610      	movgt	r6, #16
 8006fcc:	dc05      	bgt.n	8006fda <_vfprintf_r+0x1072>
 8006fce:	e0b5      	b.n	800713c <_vfprintf_r+0x11d4>
 8006fd0:	3408      	adds	r4, #8
 8006fd2:	3d10      	subs	r5, #16
 8006fd4:	2d10      	cmp	r5, #16
 8006fd6:	f340 80b1 	ble.w	800713c <_vfprintf_r+0x11d4>
 8006fda:	3301      	adds	r3, #1
 8006fdc:	3210      	adds	r2, #16
 8006fde:	2b07      	cmp	r3, #7
 8006fe0:	9221      	str	r2, [sp, #132]	; 0x84
 8006fe2:	9320      	str	r3, [sp, #128]	; 0x80
 8006fe4:	6027      	str	r7, [r4, #0]
 8006fe6:	6066      	str	r6, [r4, #4]
 8006fe8:	ddf2      	ble.n	8006fd0 <_vfprintf_r+0x1068>
 8006fea:	4640      	mov	r0, r8
 8006fec:	4649      	mov	r1, r9
 8006fee:	aa1f      	add	r2, sp, #124	; 0x7c
 8006ff0:	f003 f82e 	bl	800a050 <__sprint_r>
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	f47f a8b7 	bne.w	8006168 <_vfprintf_r+0x200>
 8006ffa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ffc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006ffe:	ac2c      	add	r4, sp, #176	; 0xb0
 8007000:	e7e7      	b.n	8006fd2 <_vfprintf_r+0x106a>
 8007002:	9e02      	ldr	r6, [sp, #8]
 8007004:	4a8f      	ldr	r2, [pc, #572]	; (8007244 <_vfprintf_r+0x12dc>)
 8007006:	4b90      	ldr	r3, [pc, #576]	; (8007248 <_vfprintf_r+0x12e0>)
 8007008:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 800700c:	900b      	str	r0, [sp, #44]	; 0x2c
 800700e:	2103      	movs	r1, #3
 8007010:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8007014:	2d47      	cmp	r5, #71	; 0x47
 8007016:	bfd8      	it	le
 8007018:	461a      	movle	r2, r3
 800701a:	9103      	str	r1, [sp, #12]
 800701c:	9602      	str	r6, [sp, #8]
 800701e:	900c      	str	r0, [sp, #48]	; 0x30
 8007020:	920a      	str	r2, [sp, #40]	; 0x28
 8007022:	9107      	str	r1, [sp, #28]
 8007024:	f7ff b8fe 	b.w	8006224 <_vfprintf_r+0x2bc>
 8007028:	3304      	adds	r3, #4
 800702a:	6816      	ldr	r6, [r2, #0]
 800702c:	9308      	str	r3, [sp, #32]
 800702e:	2700      	movs	r7, #0
 8007030:	f7ff ba5c 	b.w	80064ec <_vfprintf_r+0x584>
 8007034:	4640      	mov	r0, r8
 8007036:	4649      	mov	r1, r9
 8007038:	aa1f      	add	r2, sp, #124	; 0x7c
 800703a:	f003 f809 	bl	800a050 <__sprint_r>
 800703e:	2800      	cmp	r0, #0
 8007040:	f47f a892 	bne.w	8006168 <_vfprintf_r+0x200>
 8007044:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007046:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800704a:	ac2c      	add	r4, sp, #176	; 0xb0
 800704c:	e7a2      	b.n	8006f94 <_vfprintf_r+0x102c>
 800704e:	f041 0120 	orr.w	r1, r1, #32
 8007052:	9102      	str	r1, [sp, #8]
 8007054:	785d      	ldrb	r5, [r3, #1]
 8007056:	1c59      	adds	r1, r3, #1
 8007058:	f7fe bff7 	b.w	800604a <_vfprintf_r+0xe2>
 800705c:	9806      	ldr	r0, [sp, #24]
 800705e:	9108      	str	r1, [sp, #32]
 8007060:	4240      	negs	r0, r0
 8007062:	9006      	str	r0, [sp, #24]
 8007064:	4619      	mov	r1, r3
 8007066:	f7ff b9f1 	b.w	800644c <_vfprintf_r+0x4e4>
 800706a:	4640      	mov	r0, r8
 800706c:	4649      	mov	r1, r9
 800706e:	aa1f      	add	r2, sp, #124	; 0x7c
 8007070:	f002 ffee 	bl	800a050 <__sprint_r>
 8007074:	2800      	cmp	r0, #0
 8007076:	f47f a877 	bne.w	8006168 <_vfprintf_r+0x200>
 800707a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800707e:	ac2c      	add	r4, sp, #176	; 0xb0
 8007080:	e413      	b.n	80068aa <_vfprintf_r+0x942>
 8007082:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007084:	ab2c      	add	r3, sp, #176	; 0xb0
 8007086:	1a9b      	subs	r3, r3, r2
 8007088:	9307      	str	r3, [sp, #28]
 800708a:	f7ff b8c3 	b.w	8006214 <_vfprintf_r+0x2ac>
 800708e:	4640      	mov	r0, r8
 8007090:	4649      	mov	r1, r9
 8007092:	aa1f      	add	r2, sp, #124	; 0x7c
 8007094:	f002 ffdc 	bl	800a050 <__sprint_r>
 8007098:	2800      	cmp	r0, #0
 800709a:	f47f a865 	bne.w	8006168 <_vfprintf_r+0x200>
 800709e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80070a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80070a2:	ac2c      	add	r4, sp, #176	; 0xb0
 80070a4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80070a6:	6060      	str	r0, [r4, #4]
 80070a8:	3301      	adds	r3, #1
 80070aa:	eb02 0b00 	add.w	fp, r2, r0
 80070ae:	2b07      	cmp	r3, #7
 80070b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070b2:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 80070b6:	9320      	str	r3, [sp, #128]	; 0x80
 80070b8:	6022      	str	r2, [r4, #0]
 80070ba:	f77f a977 	ble.w	80063ac <_vfprintf_r+0x444>
 80070be:	e492      	b.n	80069e6 <_vfprintf_r+0xa7e>
 80070c0:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80070c4:	f7fe fe46 	bl	8005d54 <strlen>
 80070c8:	9708      	str	r7, [sp, #32]
 80070ca:	9007      	str	r0, [sp, #28]
 80070cc:	4603      	mov	r3, r0
 80070ce:	f7ff b9f2 	b.w	80064b6 <_vfprintf_r+0x54e>
 80070d2:	aa1a      	add	r2, sp, #104	; 0x68
 80070d4:	ab1d      	add	r3, sp, #116	; 0x74
 80070d6:	e88d 000c 	stmia.w	sp, {r2, r3}
 80070da:	4640      	mov	r0, r8
 80070dc:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 80070e0:	2103      	movs	r1, #3
 80070e2:	465a      	mov	r2, fp
 80070e4:	ab19      	add	r3, sp, #100	; 0x64
 80070e6:	f000 fa97 	bl	8007618 <_dtoa_r>
 80070ea:	465f      	mov	r7, fp
 80070ec:	900a      	str	r0, [sp, #40]	; 0x28
 80070ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070f0:	19de      	adds	r6, r3, r7
 80070f2:	9b03      	ldr	r3, [sp, #12]
 80070f4:	2b46      	cmp	r3, #70	; 0x46
 80070f6:	f47f aeaf 	bne.w	8006e58 <_vfprintf_r+0xef0>
 80070fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	2b30      	cmp	r3, #48	; 0x30
 8007100:	f000 8100 	beq.w	8007304 <_vfprintf_r+0x139c>
 8007104:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8007106:	443e      	add	r6, r7
 8007108:	e6a6      	b.n	8006e58 <_vfprintf_r+0xef0>
 800710a:	4640      	mov	r0, r8
 800710c:	4649      	mov	r1, r9
 800710e:	aa1f      	add	r2, sp, #124	; 0x7c
 8007110:	f002 ff9e 	bl	800a050 <__sprint_r>
 8007114:	2800      	cmp	r0, #0
 8007116:	f47f a827 	bne.w	8006168 <_vfprintf_r+0x200>
 800711a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800711e:	ac2c      	add	r4, sp, #176	; 0xb0
 8007120:	e4eb      	b.n	8006afa <_vfprintf_r+0xb92>
 8007122:	4640      	mov	r0, r8
 8007124:	4649      	mov	r1, r9
 8007126:	aa1f      	add	r2, sp, #124	; 0x7c
 8007128:	f002 ff92 	bl	800a050 <__sprint_r>
 800712c:	2800      	cmp	r0, #0
 800712e:	f47f a81b 	bne.w	8006168 <_vfprintf_r+0x200>
 8007132:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007134:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 8007138:	ac2c      	add	r4, sp, #176	; 0xb0
 800713a:	e5a1      	b.n	8006c80 <_vfprintf_r+0xd18>
 800713c:	3301      	adds	r3, #1
 800713e:	442a      	add	r2, r5
 8007140:	2b07      	cmp	r3, #7
 8007142:	9221      	str	r2, [sp, #132]	; 0x84
 8007144:	9320      	str	r3, [sp, #128]	; 0x80
 8007146:	6027      	str	r7, [r4, #0]
 8007148:	6065      	str	r5, [r4, #4]
 800714a:	dca0      	bgt.n	800708e <_vfprintf_r+0x1126>
 800714c:	3408      	adds	r4, #8
 800714e:	e7a9      	b.n	80070a4 <_vfprintf_r+0x113c>
 8007150:	2e06      	cmp	r6, #6
 8007152:	4633      	mov	r3, r6
 8007154:	bf28      	it	cs
 8007156:	2306      	movcs	r3, #6
 8007158:	9307      	str	r3, [sp, #28]
 800715a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800715e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8007162:	9303      	str	r3, [sp, #12]
 8007164:	4b39      	ldr	r3, [pc, #228]	; (800724c <_vfprintf_r+0x12e4>)
 8007166:	9708      	str	r7, [sp, #32]
 8007168:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800716c:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8007170:	930a      	str	r3, [sp, #40]	; 0x28
 8007172:	f7ff b857 	b.w	8006224 <_vfprintf_r+0x2bc>
 8007176:	4640      	mov	r0, r8
 8007178:	4649      	mov	r1, r9
 800717a:	aa1f      	add	r2, sp, #124	; 0x7c
 800717c:	f002 ff68 	bl	800a050 <__sprint_r>
 8007180:	2800      	cmp	r0, #0
 8007182:	f47e aff1 	bne.w	8006168 <_vfprintf_r+0x200>
 8007186:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007188:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800718a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	ac2c      	add	r4, sp, #176	; 0xb0
 8007192:	e58b      	b.n	8006cac <_vfprintf_r+0xd44>
 8007194:	1cdf      	adds	r7, r3, #3
 8007196:	db22      	blt.n	80071de <_vfprintf_r+0x1276>
 8007198:	459b      	cmp	fp, r3
 800719a:	db20      	blt.n	80071de <_vfprintf_r+0x1276>
 800719c:	930c      	str	r3, [sp, #48]	; 0x30
 800719e:	2567      	movs	r5, #103	; 0x67
 80071a0:	e67c      	b.n	8006e9c <_vfprintf_r+0xf34>
 80071a2:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 80071a6:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 80071aa:	f7ff ba10 	b.w	80065ce <_vfprintf_r+0x666>
 80071ae:	9303      	str	r3, [sp, #12]
 80071b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071b2:	9302      	str	r3, [sp, #8]
 80071b4:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 80071b8:	2300      	movs	r3, #0
 80071ba:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
 80071be:	930b      	str	r3, [sp, #44]	; 0x2c
 80071c0:	f7ff b833 	b.w	800622a <_vfprintf_r+0x2c2>
 80071c4:	4633      	mov	r3, r6
 80071c6:	e65a      	b.n	8006e7e <_vfprintf_r+0xf16>
 80071c8:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 80071cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80071ce:	9708      	str	r7, [sp, #32]
 80071d0:	900c      	str	r0, [sp, #48]	; 0x30
 80071d2:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
 80071d6:	9303      	str	r3, [sp, #12]
 80071d8:	9607      	str	r6, [sp, #28]
 80071da:	f7ff b823 	b.w	8006224 <_vfprintf_r+0x2bc>
 80071de:	3d02      	subs	r5, #2
 80071e0:	3b01      	subs	r3, #1
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	9319      	str	r3, [sp, #100]	; 0x64
 80071e6:	bfba      	itte	lt
 80071e8:	425b      	neglt	r3, r3
 80071ea:	222d      	movlt	r2, #45	; 0x2d
 80071ec:	222b      	movge	r2, #43	; 0x2b
 80071ee:	2b09      	cmp	r3, #9
 80071f0:	f88d 506c 	strb.w	r5, [sp, #108]	; 0x6c
 80071f4:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 80071f8:	f340 8098 	ble.w	800732c <_vfprintf_r+0x13c4>
 80071fc:	f10d 067b 	add.w	r6, sp, #123	; 0x7b
 8007200:	4630      	mov	r0, r6
 8007202:	4a13      	ldr	r2, [pc, #76]	; (8007250 <_vfprintf_r+0x12e8>)
 8007204:	fb82 2103 	smull	r2, r1, r2, r3
 8007208:	17da      	asrs	r2, r3, #31
 800720a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 800720e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8007212:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8007216:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800721a:	2a09      	cmp	r2, #9
 800721c:	4613      	mov	r3, r2
 800721e:	f800 1d01 	strb.w	r1, [r0, #-1]!
 8007222:	dcee      	bgt.n	8007202 <_vfprintf_r+0x129a>
 8007224:	4602      	mov	r2, r0
 8007226:	3330      	adds	r3, #48	; 0x30
 8007228:	b2d9      	uxtb	r1, r3
 800722a:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800722e:	4296      	cmp	r6, r2
 8007230:	f240 80a9 	bls.w	8007386 <_vfprintf_r+0x141e>
 8007234:	f10d 026e 	add.w	r2, sp, #110	; 0x6e
 8007238:	4603      	mov	r3, r0
 800723a:	e00d      	b.n	8007258 <_vfprintf_r+0x12f0>
 800723c:	08019e60 	.word	0x08019e60
 8007240:	08019e10 	.word	0x08019e10
 8007244:	08019e2c 	.word	0x08019e2c
 8007248:	08019e28 	.word	0x08019e28
 800724c:	08019e58 	.word	0x08019e58
 8007250:	66666667 	.word	0x66666667
 8007254:	f813 1b01 	ldrb.w	r1, [r3], #1
 8007258:	f802 1b01 	strb.w	r1, [r2], #1
 800725c:	42b3      	cmp	r3, r6
 800725e:	d1f9      	bne.n	8007254 <_vfprintf_r+0x12ec>
 8007260:	ab1f      	add	r3, sp, #124	; 0x7c
 8007262:	1a1b      	subs	r3, r3, r0
 8007264:	f10d 026e 	add.w	r2, sp, #110	; 0x6e
 8007268:	4413      	add	r3, r2
 800726a:	aa1b      	add	r2, sp, #108	; 0x6c
 800726c:	1a9b      	subs	r3, r3, r2
 800726e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007270:	9313      	str	r3, [sp, #76]	; 0x4c
 8007272:	2a01      	cmp	r2, #1
 8007274:	4413      	add	r3, r2
 8007276:	9307      	str	r3, [sp, #28]
 8007278:	dd69      	ble.n	800734e <_vfprintf_r+0x13e6>
 800727a:	9b07      	ldr	r3, [sp, #28]
 800727c:	2200      	movs	r2, #0
 800727e:	3301      	adds	r3, #1
 8007280:	9307      	str	r3, [sp, #28]
 8007282:	920c      	str	r2, [sp, #48]	; 0x30
 8007284:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007288:	e614      	b.n	8006eb4 <_vfprintf_r+0xf4c>
 800728a:	4640      	mov	r0, r8
 800728c:	4649      	mov	r1, r9
 800728e:	aa1f      	add	r2, sp, #124	; 0x7c
 8007290:	f002 fede 	bl	800a050 <__sprint_r>
 8007294:	2800      	cmp	r0, #0
 8007296:	f47e af67 	bne.w	8006168 <_vfprintf_r+0x200>
 800729a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800729c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800729e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80072a0:	ac2c      	add	r4, sp, #176	; 0xb0
 80072a2:	e68c      	b.n	8006fbe <_vfprintf_r+0x1056>
 80072a4:	f04f 0b06 	mov.w	fp, #6
 80072a8:	e5a4      	b.n	8006df4 <_vfprintf_r+0xe8c>
 80072aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	bfd8      	it	le
 80072b0:	f1c3 0602 	rsble	r6, r3, #2
 80072b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072b6:	bfc8      	it	gt
 80072b8:	2601      	movgt	r6, #1
 80072ba:	18f3      	adds	r3, r6, r3
 80072bc:	9307      	str	r3, [sp, #28]
 80072be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80072c2:	e5f7      	b.n	8006eb4 <_vfprintf_r+0xf4c>
 80072c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80072c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072cc:	9014      	str	r0, [sp, #80]	; 0x50
 80072ce:	9315      	str	r3, [sp, #84]	; 0x54
 80072d0:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 80072d4:	e59c      	b.n	8006e10 <_vfprintf_r+0xea8>
 80072d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80072d8:	e5d1      	b.n	8006e7e <_vfprintf_r+0xf16>
 80072da:	2b00      	cmp	r3, #0
 80072dc:	dd2e      	ble.n	800733c <_vfprintf_r+0x13d4>
 80072de:	f1bb 0f00 	cmp.w	fp, #0
 80072e2:	d107      	bne.n	80072f4 <_vfprintf_r+0x138c>
 80072e4:	9b02      	ldr	r3, [sp, #8]
 80072e6:	07de      	lsls	r6, r3, #31
 80072e8:	d404      	bmi.n	80072f4 <_vfprintf_r+0x138c>
 80072ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072ec:	9207      	str	r2, [sp, #28]
 80072ee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80072f2:	e5df      	b.n	8006eb4 <_vfprintf_r+0xf4c>
 80072f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072f6:	f10b 0601 	add.w	r6, fp, #1
 80072fa:	4433      	add	r3, r6
 80072fc:	9307      	str	r3, [sp, #28]
 80072fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007302:	e5d7      	b.n	8006eb4 <_vfprintf_r+0xf4c>
 8007304:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8007308:	2200      	movs	r2, #0
 800730a:	2300      	movs	r3, #0
 800730c:	f7f9 fc42 	bl	8000b94 <__aeabi_dcmpeq>
 8007310:	2800      	cmp	r0, #0
 8007312:	f47f aef7 	bne.w	8007104 <_vfprintf_r+0x119c>
 8007316:	f1c7 0701 	rsb	r7, r7, #1
 800731a:	9719      	str	r7, [sp, #100]	; 0x64
 800731c:	443e      	add	r6, r7
 800731e:	e59b      	b.n	8006e58 <_vfprintf_r+0xef0>
 8007320:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007322:	3301      	adds	r3, #1
 8007324:	9307      	str	r3, [sp, #28]
 8007326:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800732a:	e5c3      	b.n	8006eb4 <_vfprintf_r+0xf4c>
 800732c:	3330      	adds	r3, #48	; 0x30
 800732e:	2230      	movs	r2, #48	; 0x30
 8007330:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8007334:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8007338:	ab1c      	add	r3, sp, #112	; 0x70
 800733a:	e796      	b.n	800726a <_vfprintf_r+0x1302>
 800733c:	f1bb 0f00 	cmp.w	fp, #0
 8007340:	d11b      	bne.n	800737a <_vfprintf_r+0x1412>
 8007342:	9b02      	ldr	r3, [sp, #8]
 8007344:	07d8      	lsls	r0, r3, #31
 8007346:	d418      	bmi.n	800737a <_vfprintf_r+0x1412>
 8007348:	2301      	movs	r3, #1
 800734a:	9307      	str	r3, [sp, #28]
 800734c:	e5b2      	b.n	8006eb4 <_vfprintf_r+0xf4c>
 800734e:	9b02      	ldr	r3, [sp, #8]
 8007350:	f013 0301 	ands.w	r3, r3, #1
 8007354:	d191      	bne.n	800727a <_vfprintf_r+0x1312>
 8007356:	930c      	str	r3, [sp, #48]	; 0x30
 8007358:	9b07      	ldr	r3, [sp, #28]
 800735a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800735e:	e5a9      	b.n	8006eb4 <_vfprintf_r+0xf4c>
 8007360:	9d08      	ldr	r5, [sp, #32]
 8007362:	682e      	ldr	r6, [r5, #0]
 8007364:	4628      	mov	r0, r5
 8007366:	3004      	adds	r0, #4
 8007368:	2e00      	cmp	r6, #0
 800736a:	785d      	ldrb	r5, [r3, #1]
 800736c:	9008      	str	r0, [sp, #32]
 800736e:	f6be ae6c 	bge.w	800604a <_vfprintf_r+0xe2>
 8007372:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8007376:	f7fe be68 	b.w	800604a <_vfprintf_r+0xe2>
 800737a:	f10b 0302 	add.w	r3, fp, #2
 800737e:	9307      	str	r3, [sp, #28]
 8007380:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007384:	e596      	b.n	8006eb4 <_vfprintf_r+0xf4c>
 8007386:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 800738a:	e76e      	b.n	800726a <_vfprintf_r+0x1302>
 800738c:	f3af 8000 	nop.w

08007390 <__sbprintf>:
 8007390:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8007394:	460c      	mov	r4, r1
 8007396:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 800739a:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 800739e:	69e7      	ldr	r7, [r4, #28]
 80073a0:	6e49      	ldr	r1, [r1, #100]	; 0x64
 80073a2:	f8b4 900e 	ldrh.w	r9, [r4, #14]
 80073a6:	9119      	str	r1, [sp, #100]	; 0x64
 80073a8:	ad1a      	add	r5, sp, #104	; 0x68
 80073aa:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80073ae:	f02e 0e02 	bic.w	lr, lr, #2
 80073b2:	f04f 0c00 	mov.w	ip, #0
 80073b6:	9707      	str	r7, [sp, #28]
 80073b8:	4669      	mov	r1, sp
 80073ba:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80073bc:	9500      	str	r5, [sp, #0]
 80073be:	9504      	str	r5, [sp, #16]
 80073c0:	9602      	str	r6, [sp, #8]
 80073c2:	9605      	str	r6, [sp, #20]
 80073c4:	f8ad e00c 	strh.w	lr, [sp, #12]
 80073c8:	f8ad 900e 	strh.w	r9, [sp, #14]
 80073cc:	9709      	str	r7, [sp, #36]	; 0x24
 80073ce:	f8cd c018 	str.w	ip, [sp, #24]
 80073d2:	4606      	mov	r6, r0
 80073d4:	f7fe fdc8 	bl	8005f68 <_vfprintf_r>
 80073d8:	1e05      	subs	r5, r0, #0
 80073da:	db07      	blt.n	80073ec <__sbprintf+0x5c>
 80073dc:	4630      	mov	r0, r6
 80073de:	4669      	mov	r1, sp
 80073e0:	f001 f918 	bl	8008614 <_fflush_r>
 80073e4:	2800      	cmp	r0, #0
 80073e6:	bf18      	it	ne
 80073e8:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 80073ec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80073f0:	065b      	lsls	r3, r3, #25
 80073f2:	d503      	bpl.n	80073fc <__sbprintf+0x6c>
 80073f4:	89a3      	ldrh	r3, [r4, #12]
 80073f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073fa:	81a3      	strh	r3, [r4, #12]
 80073fc:	4628      	mov	r0, r5
 80073fe:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 8007402:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8007406:	bf00      	nop

08007408 <__swsetup_r>:
 8007408:	b538      	push	{r3, r4, r5, lr}
 800740a:	4b2f      	ldr	r3, [pc, #188]	; (80074c8 <__swsetup_r+0xc0>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4605      	mov	r5, r0
 8007410:	460c      	mov	r4, r1
 8007412:	b113      	cbz	r3, 800741a <__swsetup_r+0x12>
 8007414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007416:	2a00      	cmp	r2, #0
 8007418:	d036      	beq.n	8007488 <__swsetup_r+0x80>
 800741a:	89a2      	ldrh	r2, [r4, #12]
 800741c:	b293      	uxth	r3, r2
 800741e:	0718      	lsls	r0, r3, #28
 8007420:	d50c      	bpl.n	800743c <__swsetup_r+0x34>
 8007422:	6920      	ldr	r0, [r4, #16]
 8007424:	b1a8      	cbz	r0, 8007452 <__swsetup_r+0x4a>
 8007426:	f013 0201 	ands.w	r2, r3, #1
 800742a:	d01e      	beq.n	800746a <__swsetup_r+0x62>
 800742c:	6963      	ldr	r3, [r4, #20]
 800742e:	2200      	movs	r2, #0
 8007430:	425b      	negs	r3, r3
 8007432:	61a3      	str	r3, [r4, #24]
 8007434:	60a2      	str	r2, [r4, #8]
 8007436:	b1f0      	cbz	r0, 8007476 <__swsetup_r+0x6e>
 8007438:	2000      	movs	r0, #0
 800743a:	bd38      	pop	{r3, r4, r5, pc}
 800743c:	06d9      	lsls	r1, r3, #27
 800743e:	d53b      	bpl.n	80074b8 <__swsetup_r+0xb0>
 8007440:	0758      	lsls	r0, r3, #29
 8007442:	d425      	bmi.n	8007490 <__swsetup_r+0x88>
 8007444:	6920      	ldr	r0, [r4, #16]
 8007446:	f042 0308 	orr.w	r3, r2, #8
 800744a:	81a3      	strh	r3, [r4, #12]
 800744c:	b29b      	uxth	r3, r3
 800744e:	2800      	cmp	r0, #0
 8007450:	d1e9      	bne.n	8007426 <__swsetup_r+0x1e>
 8007452:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8007456:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800745a:	d0e4      	beq.n	8007426 <__swsetup_r+0x1e>
 800745c:	4628      	mov	r0, r5
 800745e:	4621      	mov	r1, r4
 8007460:	f001 fc76 	bl	8008d50 <__smakebuf_r>
 8007464:	89a3      	ldrh	r3, [r4, #12]
 8007466:	6920      	ldr	r0, [r4, #16]
 8007468:	e7dd      	b.n	8007426 <__swsetup_r+0x1e>
 800746a:	0799      	lsls	r1, r3, #30
 800746c:	bf58      	it	pl
 800746e:	6962      	ldrpl	r2, [r4, #20]
 8007470:	60a2      	str	r2, [r4, #8]
 8007472:	2800      	cmp	r0, #0
 8007474:	d1e0      	bne.n	8007438 <__swsetup_r+0x30>
 8007476:	89a3      	ldrh	r3, [r4, #12]
 8007478:	061a      	lsls	r2, r3, #24
 800747a:	d5de      	bpl.n	800743a <__swsetup_r+0x32>
 800747c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007480:	81a3      	strh	r3, [r4, #12]
 8007482:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007486:	bd38      	pop	{r3, r4, r5, pc}
 8007488:	4618      	mov	r0, r3
 800748a:	f001 f957 	bl	800873c <__sinit>
 800748e:	e7c4      	b.n	800741a <__swsetup_r+0x12>
 8007490:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007492:	b149      	cbz	r1, 80074a8 <__swsetup_r+0xa0>
 8007494:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8007498:	4299      	cmp	r1, r3
 800749a:	d003      	beq.n	80074a4 <__swsetup_r+0x9c>
 800749c:	4628      	mov	r0, r5
 800749e:	f001 f9bb 	bl	8008818 <_free_r>
 80074a2:	89a2      	ldrh	r2, [r4, #12]
 80074a4:	2300      	movs	r3, #0
 80074a6:	6323      	str	r3, [r4, #48]	; 0x30
 80074a8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 80074ac:	2300      	movs	r3, #0
 80074ae:	6920      	ldr	r0, [r4, #16]
 80074b0:	6063      	str	r3, [r4, #4]
 80074b2:	b292      	uxth	r2, r2
 80074b4:	6020      	str	r0, [r4, #0]
 80074b6:	e7c6      	b.n	8007446 <__swsetup_r+0x3e>
 80074b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074bc:	2309      	movs	r3, #9
 80074be:	602b      	str	r3, [r5, #0]
 80074c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074c4:	81a2      	strh	r2, [r4, #12]
 80074c6:	bd38      	pop	{r3, r4, r5, pc}
 80074c8:	200005c8 	.word	0x200005c8

080074cc <register_fini>:
 80074cc:	4b02      	ldr	r3, [pc, #8]	; (80074d8 <register_fini+0xc>)
 80074ce:	b113      	cbz	r3, 80074d6 <register_fini+0xa>
 80074d0:	4802      	ldr	r0, [pc, #8]	; (80074dc <register_fini+0x10>)
 80074d2:	f000 b805 	b.w	80074e0 <atexit>
 80074d6:	4770      	bx	lr
 80074d8:	00000000 	.word	0x00000000
 80074dc:	08008751 	.word	0x08008751

080074e0 <atexit>:
 80074e0:	4601      	mov	r1, r0
 80074e2:	2000      	movs	r0, #0
 80074e4:	4602      	mov	r2, r0
 80074e6:	4603      	mov	r3, r0
 80074e8:	f002 be12 	b.w	800a110 <__register_exitproc>

080074ec <quorem>:
 80074ec:	6902      	ldr	r2, [r0, #16]
 80074ee:	690b      	ldr	r3, [r1, #16]
 80074f0:	4293      	cmp	r3, r2
 80074f2:	f300 808f 	bgt.w	8007614 <quorem+0x128>
 80074f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074fa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80074fe:	f101 0714 	add.w	r7, r1, #20
 8007502:	f100 0b14 	add.w	fp, r0, #20
 8007506:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 800750a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 800750e:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8007512:	b083      	sub	sp, #12
 8007514:	3201      	adds	r2, #1
 8007516:	fbb3 f9f2 	udiv	r9, r3, r2
 800751a:	eb0b 0304 	add.w	r3, fp, r4
 800751e:	9400      	str	r4, [sp, #0]
 8007520:	eb07 0a04 	add.w	sl, r7, r4
 8007524:	9301      	str	r3, [sp, #4]
 8007526:	f1b9 0f00 	cmp.w	r9, #0
 800752a:	d03b      	beq.n	80075a4 <quorem+0xb8>
 800752c:	2600      	movs	r6, #0
 800752e:	4632      	mov	r2, r6
 8007530:	46bc      	mov	ip, r7
 8007532:	46de      	mov	lr, fp
 8007534:	4634      	mov	r4, r6
 8007536:	f85c 6b04 	ldr.w	r6, [ip], #4
 800753a:	f8de 5000 	ldr.w	r5, [lr]
 800753e:	b2b3      	uxth	r3, r6
 8007540:	0c36      	lsrs	r6, r6, #16
 8007542:	fb03 4409 	mla	r4, r3, r9, r4
 8007546:	fb06 f609 	mul.w	r6, r6, r9
 800754a:	eb06 4614 	add.w	r6, r6, r4, lsr #16
 800754e:	b2a3      	uxth	r3, r4
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	b2b4      	uxth	r4, r6
 8007554:	fa13 f385 	uxtah	r3, r3, r5
 8007558:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
 800755c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007560:	b29b      	uxth	r3, r3
 8007562:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007566:	45e2      	cmp	sl, ip
 8007568:	ea4f 4224 	mov.w	r2, r4, asr #16
 800756c:	f84e 3b04 	str.w	r3, [lr], #4
 8007570:	ea4f 4416 	mov.w	r4, r6, lsr #16
 8007574:	d2df      	bcs.n	8007536 <quorem+0x4a>
 8007576:	9b00      	ldr	r3, [sp, #0]
 8007578:	f85b 3003 	ldr.w	r3, [fp, r3]
 800757c:	b993      	cbnz	r3, 80075a4 <quorem+0xb8>
 800757e:	9c01      	ldr	r4, [sp, #4]
 8007580:	1f23      	subs	r3, r4, #4
 8007582:	459b      	cmp	fp, r3
 8007584:	d20c      	bcs.n	80075a0 <quorem+0xb4>
 8007586:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800758a:	b94b      	cbnz	r3, 80075a0 <quorem+0xb4>
 800758c:	f1a4 0308 	sub.w	r3, r4, #8
 8007590:	e002      	b.n	8007598 <quorem+0xac>
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	3b04      	subs	r3, #4
 8007596:	b91a      	cbnz	r2, 80075a0 <quorem+0xb4>
 8007598:	459b      	cmp	fp, r3
 800759a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800759e:	d3f8      	bcc.n	8007592 <quorem+0xa6>
 80075a0:	f8c0 8010 	str.w	r8, [r0, #16]
 80075a4:	4604      	mov	r4, r0
 80075a6:	f002 f999 	bl	80098dc <__mcmp>
 80075aa:	2800      	cmp	r0, #0
 80075ac:	db2e      	blt.n	800760c <quorem+0x120>
 80075ae:	f109 0901 	add.w	r9, r9, #1
 80075b2:	465d      	mov	r5, fp
 80075b4:	2300      	movs	r3, #0
 80075b6:	f857 1b04 	ldr.w	r1, [r7], #4
 80075ba:	6828      	ldr	r0, [r5, #0]
 80075bc:	b28a      	uxth	r2, r1
 80075be:	1a9a      	subs	r2, r3, r2
 80075c0:	0c09      	lsrs	r1, r1, #16
 80075c2:	fa12 f280 	uxtah	r2, r2, r0
 80075c6:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 80075ca:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80075ce:	b291      	uxth	r1, r2
 80075d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80075d4:	45ba      	cmp	sl, r7
 80075d6:	f845 1b04 	str.w	r1, [r5], #4
 80075da:	ea4f 4323 	mov.w	r3, r3, asr #16
 80075de:	d2ea      	bcs.n	80075b6 <quorem+0xca>
 80075e0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 80075e4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 80075e8:	b982      	cbnz	r2, 800760c <quorem+0x120>
 80075ea:	1f1a      	subs	r2, r3, #4
 80075ec:	4593      	cmp	fp, r2
 80075ee:	d20b      	bcs.n	8007608 <quorem+0x11c>
 80075f0:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80075f4:	b942      	cbnz	r2, 8007608 <quorem+0x11c>
 80075f6:	3b08      	subs	r3, #8
 80075f8:	e002      	b.n	8007600 <quorem+0x114>
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	3b04      	subs	r3, #4
 80075fe:	b91a      	cbnz	r2, 8007608 <quorem+0x11c>
 8007600:	459b      	cmp	fp, r3
 8007602:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007606:	d3f8      	bcc.n	80075fa <quorem+0x10e>
 8007608:	f8c4 8010 	str.w	r8, [r4, #16]
 800760c:	4648      	mov	r0, r9
 800760e:	b003      	add	sp, #12
 8007610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007614:	2000      	movs	r0, #0
 8007616:	4770      	bx	lr

08007618 <_dtoa_r>:
 8007618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800761c:	b099      	sub	sp, #100	; 0x64
 800761e:	4604      	mov	r4, r0
 8007620:	9103      	str	r1, [sp, #12]
 8007622:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007624:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8007626:	9304      	str	r3, [sp, #16]
 8007628:	4692      	mov	sl, r2
 800762a:	ed8d 0b00 	vstr	d0, [sp]
 800762e:	b141      	cbz	r1, 8007642 <_dtoa_r+0x2a>
 8007630:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007632:	604a      	str	r2, [r1, #4]
 8007634:	2301      	movs	r3, #1
 8007636:	4093      	lsls	r3, r2
 8007638:	608b      	str	r3, [r1, #8]
 800763a:	f001 ff6b 	bl	8009514 <_Bfree>
 800763e:	2300      	movs	r3, #0
 8007640:	6423      	str	r3, [r4, #64]	; 0x40
 8007642:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007646:	2b00      	cmp	r3, #0
 8007648:	4699      	mov	r9, r3
 800764a:	db36      	blt.n	80076ba <_dtoa_r+0xa2>
 800764c:	2300      	movs	r3, #0
 800764e:	602b      	str	r3, [r5, #0]
 8007650:	4ba5      	ldr	r3, [pc, #660]	; (80078e8 <_dtoa_r+0x2d0>)
 8007652:	461a      	mov	r2, r3
 8007654:	ea09 0303 	and.w	r3, r9, r3
 8007658:	4293      	cmp	r3, r2
 800765a:	d017      	beq.n	800768c <_dtoa_r+0x74>
 800765c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007660:	2200      	movs	r2, #0
 8007662:	2300      	movs	r3, #0
 8007664:	4630      	mov	r0, r6
 8007666:	4639      	mov	r1, r7
 8007668:	f7f9 fa94 	bl	8000b94 <__aeabi_dcmpeq>
 800766c:	4680      	mov	r8, r0
 800766e:	2800      	cmp	r0, #0
 8007670:	d02b      	beq.n	80076ca <_dtoa_r+0xb2>
 8007672:	9a04      	ldr	r2, [sp, #16]
 8007674:	2301      	movs	r3, #1
 8007676:	6013      	str	r3, [r2, #0]
 8007678:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800767a:	2b00      	cmp	r3, #0
 800767c:	f000 80cc 	beq.w	8007818 <_dtoa_r+0x200>
 8007680:	489a      	ldr	r0, [pc, #616]	; (80078ec <_dtoa_r+0x2d4>)
 8007682:	6018      	str	r0, [r3, #0]
 8007684:	3801      	subs	r0, #1
 8007686:	b019      	add	sp, #100	; 0x64
 8007688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800768c:	9a04      	ldr	r2, [sp, #16]
 800768e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007692:	6013      	str	r3, [r2, #0]
 8007694:	9b00      	ldr	r3, [sp, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	f000 80a7 	beq.w	80077ea <_dtoa_r+0x1d2>
 800769c:	4894      	ldr	r0, [pc, #592]	; (80078f0 <_dtoa_r+0x2d8>)
 800769e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d0f0      	beq.n	8007686 <_dtoa_r+0x6e>
 80076a4:	78c3      	ldrb	r3, [r0, #3]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f000 80b8 	beq.w	800781c <_dtoa_r+0x204>
 80076ac:	f100 0308 	add.w	r3, r0, #8
 80076b0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80076b2:	6013      	str	r3, [r2, #0]
 80076b4:	b019      	add	sp, #100	; 0x64
 80076b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ba:	9a01      	ldr	r2, [sp, #4]
 80076bc:	2301      	movs	r3, #1
 80076be:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
 80076c2:	602b      	str	r3, [r5, #0]
 80076c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80076c8:	e7c2      	b.n	8007650 <_dtoa_r+0x38>
 80076ca:	4620      	mov	r0, r4
 80076cc:	ec47 6b10 	vmov	d0, r6, r7
 80076d0:	a917      	add	r1, sp, #92	; 0x5c
 80076d2:	aa16      	add	r2, sp, #88	; 0x58
 80076d4:	f002 f990 	bl	80099f8 <__d2b>
 80076d8:	ea5f 5519 	movs.w	r5, r9, lsr #20
 80076dc:	4683      	mov	fp, r0
 80076de:	f040 808d 	bne.w	80077fc <_dtoa_r+0x1e4>
 80076e2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80076e6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80076e8:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 80076ec:	4445      	add	r5, r8
 80076ee:	429d      	cmp	r5, r3
 80076f0:	f2c0 829e 	blt.w	8007c30 <_dtoa_r+0x618>
 80076f4:	4a7f      	ldr	r2, [pc, #508]	; (80078f4 <_dtoa_r+0x2dc>)
 80076f6:	1b52      	subs	r2, r2, r5
 80076f8:	fa09 f902 	lsl.w	r9, r9, r2
 80076fc:	9a00      	ldr	r2, [sp, #0]
 80076fe:	f205 4312 	addw	r3, r5, #1042	; 0x412
 8007702:	fa22 f003 	lsr.w	r0, r2, r3
 8007706:	ea49 0000 	orr.w	r0, r9, r0
 800770a:	f7f8 ff65 	bl	80005d8 <__aeabi_ui2d>
 800770e:	2301      	movs	r3, #1
 8007710:	3d01      	subs	r5, #1
 8007712:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007716:	930f      	str	r3, [sp, #60]	; 0x3c
 8007718:	2200      	movs	r2, #0
 800771a:	4b77      	ldr	r3, [pc, #476]	; (80078f8 <_dtoa_r+0x2e0>)
 800771c:	f7f8 fe1e 	bl	800035c <__aeabi_dsub>
 8007720:	a36b      	add	r3, pc, #428	; (adr r3, 80078d0 <_dtoa_r+0x2b8>)
 8007722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007726:	f7f8 ffcd 	bl	80006c4 <__aeabi_dmul>
 800772a:	a36b      	add	r3, pc, #428	; (adr r3, 80078d8 <_dtoa_r+0x2c0>)
 800772c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007730:	f7f8 fe16 	bl	8000360 <__adddf3>
 8007734:	4606      	mov	r6, r0
 8007736:	4628      	mov	r0, r5
 8007738:	460f      	mov	r7, r1
 800773a:	f7f8 ff5d 	bl	80005f8 <__aeabi_i2d>
 800773e:	a368      	add	r3, pc, #416	; (adr r3, 80078e0 <_dtoa_r+0x2c8>)
 8007740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007744:	f7f8 ffbe 	bl	80006c4 <__aeabi_dmul>
 8007748:	4602      	mov	r2, r0
 800774a:	460b      	mov	r3, r1
 800774c:	4630      	mov	r0, r6
 800774e:	4639      	mov	r1, r7
 8007750:	f7f8 fe06 	bl	8000360 <__adddf3>
 8007754:	4606      	mov	r6, r0
 8007756:	460f      	mov	r7, r1
 8007758:	f7f9 fa4e 	bl	8000bf8 <__aeabi_d2iz>
 800775c:	4639      	mov	r1, r7
 800775e:	9005      	str	r0, [sp, #20]
 8007760:	2200      	movs	r2, #0
 8007762:	4630      	mov	r0, r6
 8007764:	2300      	movs	r3, #0
 8007766:	f7f9 fa1f 	bl	8000ba8 <__aeabi_dcmplt>
 800776a:	2800      	cmp	r0, #0
 800776c:	f040 81ab 	bne.w	8007ac6 <_dtoa_r+0x4ae>
 8007770:	9b05      	ldr	r3, [sp, #20]
 8007772:	2b16      	cmp	r3, #22
 8007774:	f200 81a4 	bhi.w	8007ac0 <_dtoa_r+0x4a8>
 8007778:	9a05      	ldr	r2, [sp, #20]
 800777a:	4b60      	ldr	r3, [pc, #384]	; (80078fc <_dtoa_r+0x2e4>)
 800777c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007780:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007784:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007788:	f7f9 fa2c 	bl	8000be4 <__aeabi_dcmpgt>
 800778c:	2800      	cmp	r0, #0
 800778e:	f000 8255 	beq.w	8007c3c <_dtoa_r+0x624>
 8007792:	9b05      	ldr	r3, [sp, #20]
 8007794:	3b01      	subs	r3, #1
 8007796:	9305      	str	r3, [sp, #20]
 8007798:	2300      	movs	r3, #0
 800779a:	930d      	str	r3, [sp, #52]	; 0x34
 800779c:	ebc5 0508 	rsb	r5, r5, r8
 80077a0:	1e6b      	subs	r3, r5, #1
 80077a2:	9306      	str	r3, [sp, #24]
 80077a4:	f100 81a6 	bmi.w	8007af4 <_dtoa_r+0x4dc>
 80077a8:	2300      	movs	r3, #0
 80077aa:	9307      	str	r3, [sp, #28]
 80077ac:	9b05      	ldr	r3, [sp, #20]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f2c0 8197 	blt.w	8007ae2 <_dtoa_r+0x4ca>
 80077b4:	9a06      	ldr	r2, [sp, #24]
 80077b6:	930c      	str	r3, [sp, #48]	; 0x30
 80077b8:	4611      	mov	r1, r2
 80077ba:	4419      	add	r1, r3
 80077bc:	2300      	movs	r3, #0
 80077be:	9106      	str	r1, [sp, #24]
 80077c0:	930a      	str	r3, [sp, #40]	; 0x28
 80077c2:	9b03      	ldr	r3, [sp, #12]
 80077c4:	2b09      	cmp	r3, #9
 80077c6:	d82b      	bhi.n	8007820 <_dtoa_r+0x208>
 80077c8:	2b05      	cmp	r3, #5
 80077ca:	f340 8673 	ble.w	80084b4 <_dtoa_r+0xe9c>
 80077ce:	3b04      	subs	r3, #4
 80077d0:	9303      	str	r3, [sp, #12]
 80077d2:	2700      	movs	r7, #0
 80077d4:	9b03      	ldr	r3, [sp, #12]
 80077d6:	3b02      	subs	r3, #2
 80077d8:	2b03      	cmp	r3, #3
 80077da:	f200 8651 	bhi.w	8008480 <_dtoa_r+0xe68>
 80077de:	e8df f013 	tbh	[pc, r3, lsl #1]
 80077e2:	03d1      	.short	0x03d1
 80077e4:	02b603c4 	.word	0x02b603c4
 80077e8:	0666      	.short	0x0666
 80077ea:	4b41      	ldr	r3, [pc, #260]	; (80078f0 <_dtoa_r+0x2d8>)
 80077ec:	4a44      	ldr	r2, [pc, #272]	; (8007900 <_dtoa_r+0x2e8>)
 80077ee:	f3c9 0013 	ubfx	r0, r9, #0, #20
 80077f2:	2800      	cmp	r0, #0
 80077f4:	bf14      	ite	ne
 80077f6:	4618      	movne	r0, r3
 80077f8:	4610      	moveq	r0, r2
 80077fa:	e750      	b.n	800769e <_dtoa_r+0x86>
 80077fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007800:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007804:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8007808:	4630      	mov	r0, r6
 800780a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800780e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007812:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007816:	e77f      	b.n	8007718 <_dtoa_r+0x100>
 8007818:	483a      	ldr	r0, [pc, #232]	; (8007904 <_dtoa_r+0x2ec>)
 800781a:	e734      	b.n	8007686 <_dtoa_r+0x6e>
 800781c:	1cc3      	adds	r3, r0, #3
 800781e:	e747      	b.n	80076b0 <_dtoa_r+0x98>
 8007820:	2100      	movs	r1, #0
 8007822:	6461      	str	r1, [r4, #68]	; 0x44
 8007824:	4620      	mov	r0, r4
 8007826:	468a      	mov	sl, r1
 8007828:	9103      	str	r1, [sp, #12]
 800782a:	f001 fe4d 	bl	80094c8 <_Balloc>
 800782e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007832:	9308      	str	r3, [sp, #32]
 8007834:	930e      	str	r3, [sp, #56]	; 0x38
 8007836:	2301      	movs	r3, #1
 8007838:	9009      	str	r0, [sp, #36]	; 0x24
 800783a:	6420      	str	r0, [r4, #64]	; 0x40
 800783c:	930b      	str	r3, [sp, #44]	; 0x2c
 800783e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007840:	2b00      	cmp	r3, #0
 8007842:	f2c0 80d3 	blt.w	80079ec <_dtoa_r+0x3d4>
 8007846:	9a05      	ldr	r2, [sp, #20]
 8007848:	2a0e      	cmp	r2, #14
 800784a:	f300 80cf 	bgt.w	80079ec <_dtoa_r+0x3d4>
 800784e:	4b2b      	ldr	r3, [pc, #172]	; (80078fc <_dtoa_r+0x2e4>)
 8007850:	f1ba 0f00 	cmp.w	sl, #0
 8007854:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007858:	e9d3 8900 	ldrd	r8, r9, [r3]
 800785c:	f2c0 8395 	blt.w	8007f8a <_dtoa_r+0x972>
 8007860:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007864:	4642      	mov	r2, r8
 8007866:	464b      	mov	r3, r9
 8007868:	4630      	mov	r0, r6
 800786a:	4639      	mov	r1, r7
 800786c:	f7f9 f854 	bl	8000918 <__aeabi_ddiv>
 8007870:	f7f9 f9c2 	bl	8000bf8 <__aeabi_d2iz>
 8007874:	4682      	mov	sl, r0
 8007876:	f7f8 febf 	bl	80005f8 <__aeabi_i2d>
 800787a:	4642      	mov	r2, r8
 800787c:	464b      	mov	r3, r9
 800787e:	f7f8 ff21 	bl	80006c4 <__aeabi_dmul>
 8007882:	460b      	mov	r3, r1
 8007884:	4602      	mov	r2, r0
 8007886:	4639      	mov	r1, r7
 8007888:	4630      	mov	r0, r6
 800788a:	f7f8 fd67 	bl	800035c <__aeabi_dsub>
 800788e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007890:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 8007894:	702b      	strb	r3, [r5, #0]
 8007896:	9b08      	ldr	r3, [sp, #32]
 8007898:	2b01      	cmp	r3, #1
 800789a:	4606      	mov	r6, r0
 800789c:	460f      	mov	r7, r1
 800789e:	f105 0501 	add.w	r5, r5, #1
 80078a2:	d063      	beq.n	800796c <_dtoa_r+0x354>
 80078a4:	2200      	movs	r2, #0
 80078a6:	4b18      	ldr	r3, [pc, #96]	; (8007908 <_dtoa_r+0x2f0>)
 80078a8:	f7f8 ff0c 	bl	80006c4 <__aeabi_dmul>
 80078ac:	2200      	movs	r2, #0
 80078ae:	2300      	movs	r3, #0
 80078b0:	4606      	mov	r6, r0
 80078b2:	460f      	mov	r7, r1
 80078b4:	f7f9 f96e 	bl	8000b94 <__aeabi_dcmpeq>
 80078b8:	2800      	cmp	r0, #0
 80078ba:	f040 8084 	bne.w	80079c6 <_dtoa_r+0x3ae>
 80078be:	f8cd b000 	str.w	fp, [sp]
 80078c2:	9403      	str	r4, [sp, #12]
 80078c4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80078c8:	9c08      	ldr	r4, [sp, #32]
 80078ca:	e02a      	b.n	8007922 <_dtoa_r+0x30a>
 80078cc:	f3af 8000 	nop.w
 80078d0:	636f4361 	.word	0x636f4361
 80078d4:	3fd287a7 	.word	0x3fd287a7
 80078d8:	8b60c8b3 	.word	0x8b60c8b3
 80078dc:	3fc68a28 	.word	0x3fc68a28
 80078e0:	509f79fb 	.word	0x509f79fb
 80078e4:	3fd34413 	.word	0x3fd34413
 80078e8:	7ff00000 	.word	0x7ff00000
 80078ec:	08019e61 	.word	0x08019e61
 80078f0:	08019e80 	.word	0x08019e80
 80078f4:	fffffc0e 	.word	0xfffffc0e
 80078f8:	3ff80000 	.word	0x3ff80000
 80078fc:	08019ea0 	.word	0x08019ea0
 8007900:	08019e74 	.word	0x08019e74
 8007904:	08019e60 	.word	0x08019e60
 8007908:	40240000 	.word	0x40240000
 800790c:	f7f8 feda 	bl	80006c4 <__aeabi_dmul>
 8007910:	2200      	movs	r2, #0
 8007912:	2300      	movs	r3, #0
 8007914:	4606      	mov	r6, r0
 8007916:	460f      	mov	r7, r1
 8007918:	f7f9 f93c 	bl	8000b94 <__aeabi_dcmpeq>
 800791c:	2800      	cmp	r0, #0
 800791e:	f040 83e4 	bne.w	80080ea <_dtoa_r+0xad2>
 8007922:	4642      	mov	r2, r8
 8007924:	464b      	mov	r3, r9
 8007926:	4630      	mov	r0, r6
 8007928:	4639      	mov	r1, r7
 800792a:	f7f8 fff5 	bl	8000918 <__aeabi_ddiv>
 800792e:	f7f9 f963 	bl	8000bf8 <__aeabi_d2iz>
 8007932:	4682      	mov	sl, r0
 8007934:	f7f8 fe60 	bl	80005f8 <__aeabi_i2d>
 8007938:	4642      	mov	r2, r8
 800793a:	464b      	mov	r3, r9
 800793c:	f7f8 fec2 	bl	80006c4 <__aeabi_dmul>
 8007940:	4602      	mov	r2, r0
 8007942:	460b      	mov	r3, r1
 8007944:	4630      	mov	r0, r6
 8007946:	4639      	mov	r1, r7
 8007948:	f7f8 fd08 	bl	800035c <__aeabi_dsub>
 800794c:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
 8007950:	f805 eb01 	strb.w	lr, [r5], #1
 8007954:	ebcb 0e05 	rsb	lr, fp, r5
 8007958:	4574      	cmp	r4, lr
 800795a:	4606      	mov	r6, r0
 800795c:	460f      	mov	r7, r1
 800795e:	f04f 0200 	mov.w	r2, #0
 8007962:	4bb7      	ldr	r3, [pc, #732]	; (8007c40 <_dtoa_r+0x628>)
 8007964:	d1d2      	bne.n	800790c <_dtoa_r+0x2f4>
 8007966:	f8dd b000 	ldr.w	fp, [sp]
 800796a:	9c03      	ldr	r4, [sp, #12]
 800796c:	4632      	mov	r2, r6
 800796e:	463b      	mov	r3, r7
 8007970:	4630      	mov	r0, r6
 8007972:	4639      	mov	r1, r7
 8007974:	f7f8 fcf4 	bl	8000360 <__adddf3>
 8007978:	4606      	mov	r6, r0
 800797a:	460f      	mov	r7, r1
 800797c:	4640      	mov	r0, r8
 800797e:	4649      	mov	r1, r9
 8007980:	4632      	mov	r2, r6
 8007982:	463b      	mov	r3, r7
 8007984:	f7f9 f910 	bl	8000ba8 <__aeabi_dcmplt>
 8007988:	b948      	cbnz	r0, 800799e <_dtoa_r+0x386>
 800798a:	4640      	mov	r0, r8
 800798c:	4649      	mov	r1, r9
 800798e:	4632      	mov	r2, r6
 8007990:	463b      	mov	r3, r7
 8007992:	f7f9 f8ff 	bl	8000b94 <__aeabi_dcmpeq>
 8007996:	b1b0      	cbz	r0, 80079c6 <_dtoa_r+0x3ae>
 8007998:	f01a 0f01 	tst.w	sl, #1
 800799c:	d013      	beq.n	80079c6 <_dtoa_r+0x3ae>
 800799e:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 80079a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079a4:	1e6b      	subs	r3, r5, #1
 80079a6:	e004      	b.n	80079b2 <_dtoa_r+0x39a>
 80079a8:	428b      	cmp	r3, r1
 80079aa:	f000 8448 	beq.w	800823e <_dtoa_r+0xc26>
 80079ae:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
 80079b2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80079b6:	f103 0501 	add.w	r5, r3, #1
 80079ba:	461a      	mov	r2, r3
 80079bc:	d0f4      	beq.n	80079a8 <_dtoa_r+0x390>
 80079be:	f108 0301 	add.w	r3, r8, #1
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	7013      	strb	r3, [r2, #0]
 80079c6:	4620      	mov	r0, r4
 80079c8:	4659      	mov	r1, fp
 80079ca:	f001 fda3 	bl	8009514 <_Bfree>
 80079ce:	2200      	movs	r2, #0
 80079d0:	9b05      	ldr	r3, [sp, #20]
 80079d2:	702a      	strb	r2, [r5, #0]
 80079d4:	9a04      	ldr	r2, [sp, #16]
 80079d6:	3301      	adds	r3, #1
 80079d8:	6013      	str	r3, [r2, #0]
 80079da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f000 834b 	beq.w	8008078 <_dtoa_r+0xa60>
 80079e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079e4:	601d      	str	r5, [r3, #0]
 80079e6:	b019      	add	sp, #100	; 0x64
 80079e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80079ee:	2a00      	cmp	r2, #0
 80079f0:	f000 8085 	beq.w	8007afe <_dtoa_r+0x4e6>
 80079f4:	9a03      	ldr	r2, [sp, #12]
 80079f6:	2a01      	cmp	r2, #1
 80079f8:	f340 830a 	ble.w	8008010 <_dtoa_r+0x9f8>
 80079fc:	9b08      	ldr	r3, [sp, #32]
 80079fe:	1e5f      	subs	r7, r3, #1
 8007a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a02:	42bb      	cmp	r3, r7
 8007a04:	f2c0 83a6 	blt.w	8008154 <_dtoa_r+0xb3c>
 8007a08:	1bdf      	subs	r7, r3, r7
 8007a0a:	9b08      	ldr	r3, [sp, #32]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f2c0 84a4 	blt.w	800835a <_dtoa_r+0xd42>
 8007a12:	9d07      	ldr	r5, [sp, #28]
 8007a14:	9b08      	ldr	r3, [sp, #32]
 8007a16:	9a07      	ldr	r2, [sp, #28]
 8007a18:	441a      	add	r2, r3
 8007a1a:	9207      	str	r2, [sp, #28]
 8007a1c:	9a06      	ldr	r2, [sp, #24]
 8007a1e:	4620      	mov	r0, r4
 8007a20:	441a      	add	r2, r3
 8007a22:	2101      	movs	r1, #1
 8007a24:	9206      	str	r2, [sp, #24]
 8007a26:	f001 fe0f 	bl	8009648 <__i2b>
 8007a2a:	4606      	mov	r6, r0
 8007a2c:	b165      	cbz	r5, 8007a48 <_dtoa_r+0x430>
 8007a2e:	9906      	ldr	r1, [sp, #24]
 8007a30:	2900      	cmp	r1, #0
 8007a32:	460b      	mov	r3, r1
 8007a34:	dd08      	ble.n	8007a48 <_dtoa_r+0x430>
 8007a36:	42a9      	cmp	r1, r5
 8007a38:	9a07      	ldr	r2, [sp, #28]
 8007a3a:	bfa8      	it	ge
 8007a3c:	462b      	movge	r3, r5
 8007a3e:	1ad2      	subs	r2, r2, r3
 8007a40:	1aed      	subs	r5, r5, r3
 8007a42:	1acb      	subs	r3, r1, r3
 8007a44:	9207      	str	r2, [sp, #28]
 8007a46:	9306      	str	r3, [sp, #24]
 8007a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	dd1a      	ble.n	8007a84 <_dtoa_r+0x46c>
 8007a4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f000 8378 	beq.w	8008146 <_dtoa_r+0xb2e>
 8007a56:	2f00      	cmp	r7, #0
 8007a58:	dd10      	ble.n	8007a7c <_dtoa_r+0x464>
 8007a5a:	4631      	mov	r1, r6
 8007a5c:	463a      	mov	r2, r7
 8007a5e:	4620      	mov	r0, r4
 8007a60:	f001 fe96 	bl	8009790 <__pow5mult>
 8007a64:	4606      	mov	r6, r0
 8007a66:	465a      	mov	r2, fp
 8007a68:	4631      	mov	r1, r6
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	f001 fdf6 	bl	800965c <__multiply>
 8007a70:	4659      	mov	r1, fp
 8007a72:	4680      	mov	r8, r0
 8007a74:	4620      	mov	r0, r4
 8007a76:	f001 fd4d 	bl	8009514 <_Bfree>
 8007a7a:	46c3      	mov	fp, r8
 8007a7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a7e:	1bda      	subs	r2, r3, r7
 8007a80:	f040 82a5 	bne.w	8007fce <_dtoa_r+0x9b6>
 8007a84:	4620      	mov	r0, r4
 8007a86:	2101      	movs	r1, #1
 8007a88:	f001 fdde 	bl	8009648 <__i2b>
 8007a8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	4680      	mov	r8, r0
 8007a92:	dd38      	ble.n	8007b06 <_dtoa_r+0x4ee>
 8007a94:	4601      	mov	r1, r0
 8007a96:	461a      	mov	r2, r3
 8007a98:	4620      	mov	r0, r4
 8007a9a:	f001 fe79 	bl	8009790 <__pow5mult>
 8007a9e:	9b03      	ldr	r3, [sp, #12]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	4680      	mov	r8, r0
 8007aa4:	f340 8299 	ble.w	8007fda <_dtoa_r+0x9c2>
 8007aa8:	f04f 0900 	mov.w	r9, #0
 8007aac:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007ab0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8007ab4:	6918      	ldr	r0, [r3, #16]
 8007ab6:	f001 fd79 	bl	80095ac <__hi0bits>
 8007aba:	f1c0 0020 	rsb	r0, r0, #32
 8007abe:	e02c      	b.n	8007b1a <_dtoa_r+0x502>
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	930d      	str	r3, [sp, #52]	; 0x34
 8007ac4:	e66a      	b.n	800779c <_dtoa_r+0x184>
 8007ac6:	9805      	ldr	r0, [sp, #20]
 8007ac8:	f7f8 fd96 	bl	80005f8 <__aeabi_i2d>
 8007acc:	4632      	mov	r2, r6
 8007ace:	463b      	mov	r3, r7
 8007ad0:	f7f9 f860 	bl	8000b94 <__aeabi_dcmpeq>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	f47f ae4b 	bne.w	8007770 <_dtoa_r+0x158>
 8007ada:	9b05      	ldr	r3, [sp, #20]
 8007adc:	3b01      	subs	r3, #1
 8007ade:	9305      	str	r3, [sp, #20]
 8007ae0:	e646      	b.n	8007770 <_dtoa_r+0x158>
 8007ae2:	9a07      	ldr	r2, [sp, #28]
 8007ae4:	9b05      	ldr	r3, [sp, #20]
 8007ae6:	1ad2      	subs	r2, r2, r3
 8007ae8:	425b      	negs	r3, r3
 8007aea:	930a      	str	r3, [sp, #40]	; 0x28
 8007aec:	2300      	movs	r3, #0
 8007aee:	9207      	str	r2, [sp, #28]
 8007af0:	930c      	str	r3, [sp, #48]	; 0x30
 8007af2:	e666      	b.n	80077c2 <_dtoa_r+0x1aa>
 8007af4:	425b      	negs	r3, r3
 8007af6:	9307      	str	r3, [sp, #28]
 8007af8:	2300      	movs	r3, #0
 8007afa:	9306      	str	r3, [sp, #24]
 8007afc:	e656      	b.n	80077ac <_dtoa_r+0x194>
 8007afe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007b00:	9d07      	ldr	r5, [sp, #28]
 8007b02:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007b04:	e792      	b.n	8007a2c <_dtoa_r+0x414>
 8007b06:	9b03      	ldr	r3, [sp, #12]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	f340 82b8 	ble.w	800807e <_dtoa_r+0xa66>
 8007b0e:	f04f 0900 	mov.w	r9, #0
 8007b12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1c9      	bne.n	8007aac <_dtoa_r+0x494>
 8007b18:	2001      	movs	r0, #1
 8007b1a:	9b06      	ldr	r3, [sp, #24]
 8007b1c:	4418      	add	r0, r3
 8007b1e:	f010 001f 	ands.w	r0, r0, #31
 8007b22:	f000 8083 	beq.w	8007c2c <_dtoa_r+0x614>
 8007b26:	f1c0 0320 	rsb	r3, r0, #32
 8007b2a:	2b04      	cmp	r3, #4
 8007b2c:	f340 84b9 	ble.w	80084a2 <_dtoa_r+0xe8a>
 8007b30:	f1c0 001c 	rsb	r0, r0, #28
 8007b34:	9b07      	ldr	r3, [sp, #28]
 8007b36:	4403      	add	r3, r0
 8007b38:	9307      	str	r3, [sp, #28]
 8007b3a:	9b06      	ldr	r3, [sp, #24]
 8007b3c:	4403      	add	r3, r0
 8007b3e:	4405      	add	r5, r0
 8007b40:	9306      	str	r3, [sp, #24]
 8007b42:	9b07      	ldr	r3, [sp, #28]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	dd05      	ble.n	8007b54 <_dtoa_r+0x53c>
 8007b48:	4659      	mov	r1, fp
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f001 fe6f 	bl	8009830 <__lshift>
 8007b52:	4683      	mov	fp, r0
 8007b54:	9b06      	ldr	r3, [sp, #24]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	dd05      	ble.n	8007b66 <_dtoa_r+0x54e>
 8007b5a:	4641      	mov	r1, r8
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	4620      	mov	r0, r4
 8007b60:	f001 fe66 	bl	8009830 <__lshift>
 8007b64:	4680      	mov	r8, r0
 8007b66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f040 826a 	bne.w	8008042 <_dtoa_r+0xa2a>
 8007b6e:	9b08      	ldr	r3, [sp, #32]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f340 8297 	ble.w	80080a4 <_dtoa_r+0xa8c>
 8007b76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d171      	bne.n	8007c60 <_dtoa_r+0x648>
 8007b7c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007b80:	9f08      	ldr	r7, [sp, #32]
 8007b82:	464d      	mov	r5, r9
 8007b84:	e002      	b.n	8007b8c <_dtoa_r+0x574>
 8007b86:	f001 fccf 	bl	8009528 <__multadd>
 8007b8a:	4683      	mov	fp, r0
 8007b8c:	4641      	mov	r1, r8
 8007b8e:	4658      	mov	r0, fp
 8007b90:	f7ff fcac 	bl	80074ec <quorem>
 8007b94:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 8007b98:	f805 cb01 	strb.w	ip, [r5], #1
 8007b9c:	ebc9 0305 	rsb	r3, r9, r5
 8007ba0:	42bb      	cmp	r3, r7
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	4659      	mov	r1, fp
 8007ba6:	f04f 020a 	mov.w	r2, #10
 8007baa:	f04f 0300 	mov.w	r3, #0
 8007bae:	dbea      	blt.n	8007b86 <_dtoa_r+0x56e>
 8007bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bb2:	9a08      	ldr	r2, [sp, #32]
 8007bb4:	2a01      	cmp	r2, #1
 8007bb6:	bfac      	ite	ge
 8007bb8:	189b      	addge	r3, r3, r2
 8007bba:	3301      	addlt	r3, #1
 8007bbc:	461d      	mov	r5, r3
 8007bbe:	f04f 0a00 	mov.w	sl, #0
 8007bc2:	4659      	mov	r1, fp
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	f8cd c000 	str.w	ip, [sp]
 8007bcc:	f001 fe30 	bl	8009830 <__lshift>
 8007bd0:	4641      	mov	r1, r8
 8007bd2:	4683      	mov	fp, r0
 8007bd4:	f001 fe82 	bl	80098dc <__mcmp>
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	f8dd c000 	ldr.w	ip, [sp]
 8007bde:	f340 82ef 	ble.w	80081c0 <_dtoa_r+0xba8>
 8007be2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007be6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007be8:	1e6b      	subs	r3, r5, #1
 8007bea:	e004      	b.n	8007bf6 <_dtoa_r+0x5de>
 8007bec:	428b      	cmp	r3, r1
 8007bee:	f000 8275 	beq.w	80080dc <_dtoa_r+0xac4>
 8007bf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bf6:	2a39      	cmp	r2, #57	; 0x39
 8007bf8:	f103 0501 	add.w	r5, r3, #1
 8007bfc:	d0f6      	beq.n	8007bec <_dtoa_r+0x5d4>
 8007bfe:	3201      	adds	r2, #1
 8007c00:	701a      	strb	r2, [r3, #0]
 8007c02:	4641      	mov	r1, r8
 8007c04:	4620      	mov	r0, r4
 8007c06:	f001 fc85 	bl	8009514 <_Bfree>
 8007c0a:	2e00      	cmp	r6, #0
 8007c0c:	f43f aedb 	beq.w	80079c6 <_dtoa_r+0x3ae>
 8007c10:	f1ba 0f00 	cmp.w	sl, #0
 8007c14:	d005      	beq.n	8007c22 <_dtoa_r+0x60a>
 8007c16:	45b2      	cmp	sl, r6
 8007c18:	d003      	beq.n	8007c22 <_dtoa_r+0x60a>
 8007c1a:	4651      	mov	r1, sl
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f001 fc79 	bl	8009514 <_Bfree>
 8007c22:	4631      	mov	r1, r6
 8007c24:	4620      	mov	r0, r4
 8007c26:	f001 fc75 	bl	8009514 <_Bfree>
 8007c2a:	e6cc      	b.n	80079c6 <_dtoa_r+0x3ae>
 8007c2c:	201c      	movs	r0, #28
 8007c2e:	e781      	b.n	8007b34 <_dtoa_r+0x51c>
 8007c30:	4b04      	ldr	r3, [pc, #16]	; (8007c44 <_dtoa_r+0x62c>)
 8007c32:	9a00      	ldr	r2, [sp, #0]
 8007c34:	1b5b      	subs	r3, r3, r5
 8007c36:	fa02 f003 	lsl.w	r0, r2, r3
 8007c3a:	e566      	b.n	800770a <_dtoa_r+0xf2>
 8007c3c:	900d      	str	r0, [sp, #52]	; 0x34
 8007c3e:	e5ad      	b.n	800779c <_dtoa_r+0x184>
 8007c40:	40240000 	.word	0x40240000
 8007c44:	fffffbee 	.word	0xfffffbee
 8007c48:	4631      	mov	r1, r6
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	220a      	movs	r2, #10
 8007c50:	f001 fc6a 	bl	8009528 <__multadd>
 8007c54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	4606      	mov	r6, r0
 8007c5a:	f340 840b 	ble.w	8008474 <_dtoa_r+0xe5c>
 8007c5e:	9308      	str	r3, [sp, #32]
 8007c60:	2d00      	cmp	r5, #0
 8007c62:	dd05      	ble.n	8007c70 <_dtoa_r+0x658>
 8007c64:	4631      	mov	r1, r6
 8007c66:	462a      	mov	r2, r5
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f001 fde1 	bl	8009830 <__lshift>
 8007c6e:	4606      	mov	r6, r0
 8007c70:	f1b9 0f00 	cmp.w	r9, #0
 8007c74:	f040 82ed 	bne.w	8008252 <_dtoa_r+0xc3a>
 8007c78:	46b1      	mov	r9, r6
 8007c7a:	9b08      	ldr	r3, [sp, #32]
 8007c7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	18d3      	adds	r3, r2, r3
 8007c82:	9308      	str	r3, [sp, #32]
 8007c84:	9b00      	ldr	r3, [sp, #0]
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	930a      	str	r3, [sp, #40]	; 0x28
 8007c8c:	4617      	mov	r7, r2
 8007c8e:	4641      	mov	r1, r8
 8007c90:	4658      	mov	r0, fp
 8007c92:	f7ff fc2b 	bl	80074ec <quorem>
 8007c96:	4631      	mov	r1, r6
 8007c98:	4605      	mov	r5, r0
 8007c9a:	4658      	mov	r0, fp
 8007c9c:	f001 fe1e 	bl	80098dc <__mcmp>
 8007ca0:	464a      	mov	r2, r9
 8007ca2:	4682      	mov	sl, r0
 8007ca4:	4641      	mov	r1, r8
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	f001 fe3c 	bl	8009924 <__mdiff>
 8007cac:	68c2      	ldr	r2, [r0, #12]
 8007cae:	4603      	mov	r3, r0
 8007cb0:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 8007cb4:	2a00      	cmp	r2, #0
 8007cb6:	f040 81ba 	bne.w	800802e <_dtoa_r+0xa16>
 8007cba:	4619      	mov	r1, r3
 8007cbc:	4658      	mov	r0, fp
 8007cbe:	f8cd c01c 	str.w	ip, [sp, #28]
 8007cc2:	9306      	str	r3, [sp, #24]
 8007cc4:	f001 fe0a 	bl	80098dc <__mcmp>
 8007cc8:	9b06      	ldr	r3, [sp, #24]
 8007cca:	9000      	str	r0, [sp, #0]
 8007ccc:	4619      	mov	r1, r3
 8007cce:	4620      	mov	r0, r4
 8007cd0:	f001 fc20 	bl	8009514 <_Bfree>
 8007cd4:	9a00      	ldr	r2, [sp, #0]
 8007cd6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8007cda:	b92a      	cbnz	r2, 8007ce8 <_dtoa_r+0x6d0>
 8007cdc:	9b03      	ldr	r3, [sp, #12]
 8007cde:	b91b      	cbnz	r3, 8007ce8 <_dtoa_r+0x6d0>
 8007ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f000 83aa 	beq.w	800843c <_dtoa_r+0xe24>
 8007ce8:	f1ba 0f00 	cmp.w	sl, #0
 8007cec:	f2c0 824a 	blt.w	8008184 <_dtoa_r+0xb6c>
 8007cf0:	d105      	bne.n	8007cfe <_dtoa_r+0x6e6>
 8007cf2:	9b03      	ldr	r3, [sp, #12]
 8007cf4:	b91b      	cbnz	r3, 8007cfe <_dtoa_r+0x6e6>
 8007cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f000 8243 	beq.w	8008184 <_dtoa_r+0xb6c>
 8007cfe:	2a00      	cmp	r2, #0
 8007d00:	f300 82bb 	bgt.w	800827a <_dtoa_r+0xc62>
 8007d04:	9b08      	ldr	r3, [sp, #32]
 8007d06:	f887 c000 	strb.w	ip, [r7]
 8007d0a:	f107 0a01 	add.w	sl, r7, #1
 8007d0e:	429f      	cmp	r7, r3
 8007d10:	4655      	mov	r5, sl
 8007d12:	f000 82be 	beq.w	8008292 <_dtoa_r+0xc7a>
 8007d16:	4659      	mov	r1, fp
 8007d18:	220a      	movs	r2, #10
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f001 fc03 	bl	8009528 <__multadd>
 8007d22:	454e      	cmp	r6, r9
 8007d24:	4683      	mov	fp, r0
 8007d26:	4631      	mov	r1, r6
 8007d28:	4620      	mov	r0, r4
 8007d2a:	f04f 020a 	mov.w	r2, #10
 8007d2e:	f04f 0300 	mov.w	r3, #0
 8007d32:	f000 8176 	beq.w	8008022 <_dtoa_r+0xa0a>
 8007d36:	f001 fbf7 	bl	8009528 <__multadd>
 8007d3a:	4649      	mov	r1, r9
 8007d3c:	4606      	mov	r6, r0
 8007d3e:	220a      	movs	r2, #10
 8007d40:	4620      	mov	r0, r4
 8007d42:	2300      	movs	r3, #0
 8007d44:	f001 fbf0 	bl	8009528 <__multadd>
 8007d48:	4657      	mov	r7, sl
 8007d4a:	4681      	mov	r9, r0
 8007d4c:	e79f      	b.n	8007c8e <_dtoa_r+0x676>
 8007d4e:	2301      	movs	r3, #1
 8007d50:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d52:	f1ba 0f00 	cmp.w	sl, #0
 8007d56:	f340 820c 	ble.w	8008172 <_dtoa_r+0xb5a>
 8007d5a:	4656      	mov	r6, sl
 8007d5c:	4655      	mov	r5, sl
 8007d5e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007d62:	f8cd a020 	str.w	sl, [sp, #32]
 8007d66:	2100      	movs	r1, #0
 8007d68:	2e17      	cmp	r6, #23
 8007d6a:	6461      	str	r1, [r4, #68]	; 0x44
 8007d6c:	d90a      	bls.n	8007d84 <_dtoa_r+0x76c>
 8007d6e:	2201      	movs	r2, #1
 8007d70:	2304      	movs	r3, #4
 8007d72:	005b      	lsls	r3, r3, #1
 8007d74:	f103 0014 	add.w	r0, r3, #20
 8007d78:	4286      	cmp	r6, r0
 8007d7a:	4611      	mov	r1, r2
 8007d7c:	f102 0201 	add.w	r2, r2, #1
 8007d80:	d2f7      	bcs.n	8007d72 <_dtoa_r+0x75a>
 8007d82:	6461      	str	r1, [r4, #68]	; 0x44
 8007d84:	4620      	mov	r0, r4
 8007d86:	f001 fb9f 	bl	80094c8 <_Balloc>
 8007d8a:	2d0e      	cmp	r5, #14
 8007d8c:	9009      	str	r0, [sp, #36]	; 0x24
 8007d8e:	6420      	str	r0, [r4, #64]	; 0x40
 8007d90:	f63f ad55 	bhi.w	800783e <_dtoa_r+0x226>
 8007d94:	2f00      	cmp	r7, #0
 8007d96:	f43f ad52 	beq.w	800783e <_dtoa_r+0x226>
 8007d9a:	ed9d 7b00 	vldr	d7, [sp]
 8007d9e:	9905      	ldr	r1, [sp, #20]
 8007da0:	2900      	cmp	r1, #0
 8007da2:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007da6:	f340 8223 	ble.w	80081f0 <_dtoa_r+0xbd8>
 8007daa:	4bb7      	ldr	r3, [pc, #732]	; (8008088 <_dtoa_r+0xa70>)
 8007dac:	f001 020f 	and.w	r2, r1, #15
 8007db0:	110d      	asrs	r5, r1, #4
 8007db2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007db6:	06e9      	lsls	r1, r5, #27
 8007db8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007dbc:	f140 81d2 	bpl.w	8008164 <_dtoa_r+0xb4c>
 8007dc0:	4bb2      	ldr	r3, [pc, #712]	; (800808c <_dtoa_r+0xa74>)
 8007dc2:	ec51 0b17 	vmov	r0, r1, d7
 8007dc6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007dca:	f7f8 fda5 	bl	8000918 <__aeabi_ddiv>
 8007dce:	e9cd 0100 	strd	r0, r1, [sp]
 8007dd2:	f005 050f 	and.w	r5, r5, #15
 8007dd6:	f04f 0803 	mov.w	r8, #3
 8007dda:	b18d      	cbz	r5, 8007e00 <_dtoa_r+0x7e8>
 8007ddc:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 800808c <_dtoa_r+0xa74>
 8007de0:	4630      	mov	r0, r6
 8007de2:	4639      	mov	r1, r7
 8007de4:	07ea      	lsls	r2, r5, #31
 8007de6:	d505      	bpl.n	8007df4 <_dtoa_r+0x7dc>
 8007de8:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007dec:	f7f8 fc6a 	bl	80006c4 <__aeabi_dmul>
 8007df0:	f108 0801 	add.w	r8, r8, #1
 8007df4:	106d      	asrs	r5, r5, #1
 8007df6:	f109 0908 	add.w	r9, r9, #8
 8007dfa:	d1f3      	bne.n	8007de4 <_dtoa_r+0x7cc>
 8007dfc:	4606      	mov	r6, r0
 8007dfe:	460f      	mov	r7, r1
 8007e00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e04:	4632      	mov	r2, r6
 8007e06:	463b      	mov	r3, r7
 8007e08:	f7f8 fd86 	bl	8000918 <__aeabi_ddiv>
 8007e0c:	e9cd 0100 	strd	r0, r1, [sp]
 8007e10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e12:	b143      	cbz	r3, 8007e26 <_dtoa_r+0x80e>
 8007e14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	4b9d      	ldr	r3, [pc, #628]	; (8008090 <_dtoa_r+0xa78>)
 8007e1c:	f7f8 fec4 	bl	8000ba8 <__aeabi_dcmplt>
 8007e20:	2800      	cmp	r0, #0
 8007e22:	f040 82ae 	bne.w	8008382 <_dtoa_r+0xd6a>
 8007e26:	4640      	mov	r0, r8
 8007e28:	f7f8 fbe6 	bl	80005f8 <__aeabi_i2d>
 8007e2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e30:	f7f8 fc48 	bl	80006c4 <__aeabi_dmul>
 8007e34:	4b97      	ldr	r3, [pc, #604]	; (8008094 <_dtoa_r+0xa7c>)
 8007e36:	2200      	movs	r2, #0
 8007e38:	f7f8 fa92 	bl	8000360 <__adddf3>
 8007e3c:	9b08      	ldr	r3, [sp, #32]
 8007e3e:	4606      	mov	r6, r0
 8007e40:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f000 8162 	beq.w	800810e <_dtoa_r+0xaf6>
 8007e4a:	9b05      	ldr	r3, [sp, #20]
 8007e4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e50:	9314      	str	r3, [sp, #80]	; 0x50
 8007e52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f000 8223 	beq.w	80082a0 <_dtoa_r+0xc88>
 8007e5a:	4b8b      	ldr	r3, [pc, #556]	; (8008088 <_dtoa_r+0xa70>)
 8007e5c:	498e      	ldr	r1, [pc, #568]	; (8008098 <_dtoa_r+0xa80>)
 8007e5e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007e62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e66:	2000      	movs	r0, #0
 8007e68:	f7f8 fd56 	bl	8000918 <__aeabi_ddiv>
 8007e6c:	4632      	mov	r2, r6
 8007e6e:	463b      	mov	r3, r7
 8007e70:	f7f8 fa74 	bl	800035c <__aeabi_dsub>
 8007e74:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007e78:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8007e7c:	4639      	mov	r1, r7
 8007e7e:	4630      	mov	r0, r6
 8007e80:	f7f8 feba 	bl	8000bf8 <__aeabi_d2iz>
 8007e84:	4605      	mov	r5, r0
 8007e86:	f7f8 fbb7 	bl	80005f8 <__aeabi_i2d>
 8007e8a:	3530      	adds	r5, #48	; 0x30
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	460b      	mov	r3, r1
 8007e90:	4630      	mov	r0, r6
 8007e92:	4639      	mov	r1, r7
 8007e94:	f7f8 fa62 	bl	800035c <__aeabi_dsub>
 8007e98:	fa5f f885 	uxtb.w	r8, r5
 8007e9c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007e9e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007ea2:	f885 8000 	strb.w	r8, [r5]
 8007ea6:	4606      	mov	r6, r0
 8007ea8:	460f      	mov	r7, r1
 8007eaa:	3501      	adds	r5, #1
 8007eac:	f7f8 fe7c 	bl	8000ba8 <__aeabi_dcmplt>
 8007eb0:	2800      	cmp	r0, #0
 8007eb2:	f040 82a7 	bne.w	8008404 <_dtoa_r+0xdec>
 8007eb6:	4632      	mov	r2, r6
 8007eb8:	463b      	mov	r3, r7
 8007eba:	2000      	movs	r0, #0
 8007ebc:	4974      	ldr	r1, [pc, #464]	; (8008090 <_dtoa_r+0xa78>)
 8007ebe:	f7f8 fa4d 	bl	800035c <__aeabi_dsub>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8007eca:	f7f8 fe8b 	bl	8000be4 <__aeabi_dcmpgt>
 8007ece:	2800      	cmp	r0, #0
 8007ed0:	f040 82ad 	bne.w	800842e <_dtoa_r+0xe16>
 8007ed4:	f1b9 0f01 	cmp.w	r9, #1
 8007ed8:	f340 8184 	ble.w	80081e4 <_dtoa_r+0xbcc>
 8007edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ede:	f8cd b000 	str.w	fp, [sp]
 8007ee2:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
 8007ee6:	4499      	add	r9, r3
 8007ee8:	46a0      	mov	r8, r4
 8007eea:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 8007eee:	e00d      	b.n	8007f0c <_dtoa_r+0x8f4>
 8007ef0:	2000      	movs	r0, #0
 8007ef2:	4967      	ldr	r1, [pc, #412]	; (8008090 <_dtoa_r+0xa78>)
 8007ef4:	f7f8 fa32 	bl	800035c <__aeabi_dsub>
 8007ef8:	4652      	mov	r2, sl
 8007efa:	465b      	mov	r3, fp
 8007efc:	f7f8 fe54 	bl	8000ba8 <__aeabi_dcmplt>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	f040 828f 	bne.w	8008424 <_dtoa_r+0xe0c>
 8007f06:	454d      	cmp	r5, r9
 8007f08:	f000 8167 	beq.w	80081da <_dtoa_r+0xbc2>
 8007f0c:	4650      	mov	r0, sl
 8007f0e:	4659      	mov	r1, fp
 8007f10:	2200      	movs	r2, #0
 8007f12:	4b62      	ldr	r3, [pc, #392]	; (800809c <_dtoa_r+0xa84>)
 8007f14:	f7f8 fbd6 	bl	80006c4 <__aeabi_dmul>
 8007f18:	2200      	movs	r2, #0
 8007f1a:	4b60      	ldr	r3, [pc, #384]	; (800809c <_dtoa_r+0xa84>)
 8007f1c:	4682      	mov	sl, r0
 8007f1e:	468b      	mov	fp, r1
 8007f20:	4630      	mov	r0, r6
 8007f22:	4639      	mov	r1, r7
 8007f24:	f7f8 fbce 	bl	80006c4 <__aeabi_dmul>
 8007f28:	460f      	mov	r7, r1
 8007f2a:	4606      	mov	r6, r0
 8007f2c:	f7f8 fe64 	bl	8000bf8 <__aeabi_d2iz>
 8007f30:	4604      	mov	r4, r0
 8007f32:	f7f8 fb61 	bl	80005f8 <__aeabi_i2d>
 8007f36:	4602      	mov	r2, r0
 8007f38:	460b      	mov	r3, r1
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	4639      	mov	r1, r7
 8007f3e:	f7f8 fa0d 	bl	800035c <__aeabi_dsub>
 8007f42:	3430      	adds	r4, #48	; 0x30
 8007f44:	b2e4      	uxtb	r4, r4
 8007f46:	4652      	mov	r2, sl
 8007f48:	465b      	mov	r3, fp
 8007f4a:	f805 4b01 	strb.w	r4, [r5], #1
 8007f4e:	4606      	mov	r6, r0
 8007f50:	460f      	mov	r7, r1
 8007f52:	f7f8 fe29 	bl	8000ba8 <__aeabi_dcmplt>
 8007f56:	4632      	mov	r2, r6
 8007f58:	463b      	mov	r3, r7
 8007f5a:	2800      	cmp	r0, #0
 8007f5c:	d0c8      	beq.n	8007ef0 <_dtoa_r+0x8d8>
 8007f5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f60:	f8dd b000 	ldr.w	fp, [sp]
 8007f64:	9305      	str	r3, [sp, #20]
 8007f66:	4644      	mov	r4, r8
 8007f68:	e52d      	b.n	80079c6 <_dtoa_r+0x3ae>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f6e:	9b05      	ldr	r3, [sp, #20]
 8007f70:	4453      	add	r3, sl
 8007f72:	930e      	str	r3, [sp, #56]	; 0x38
 8007f74:	3301      	adds	r3, #1
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	9308      	str	r3, [sp, #32]
 8007f7a:	f340 8101 	ble.w	8008180 <_dtoa_r+0xb68>
 8007f7e:	9d08      	ldr	r5, [sp, #32]
 8007f80:	462e      	mov	r6, r5
 8007f82:	e6f0      	b.n	8007d66 <_dtoa_r+0x74e>
 8007f84:	2300      	movs	r3, #0
 8007f86:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f88:	e6e3      	b.n	8007d52 <_dtoa_r+0x73a>
 8007f8a:	9b08      	ldr	r3, [sp, #32]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	f73f ac67 	bgt.w	8007860 <_dtoa_r+0x248>
 8007f92:	f040 80d4 	bne.w	800813e <_dtoa_r+0xb26>
 8007f96:	4640      	mov	r0, r8
 8007f98:	2200      	movs	r2, #0
 8007f9a:	4b41      	ldr	r3, [pc, #260]	; (80080a0 <_dtoa_r+0xa88>)
 8007f9c:	4649      	mov	r1, r9
 8007f9e:	f7f8 fb91 	bl	80006c4 <__aeabi_dmul>
 8007fa2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fa6:	f7f8 fe13 	bl	8000bd0 <__aeabi_dcmpge>
 8007faa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007fae:	4646      	mov	r6, r8
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	f000 808b 	beq.w	80080cc <_dtoa_r+0xab4>
 8007fb6:	ea6f 030a 	mvn.w	r3, sl
 8007fba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007fbc:	9305      	str	r3, [sp, #20]
 8007fbe:	4641      	mov	r1, r8
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	f001 faa7 	bl	8009514 <_Bfree>
 8007fc6:	2e00      	cmp	r6, #0
 8007fc8:	f47f ae2b 	bne.w	8007c22 <_dtoa_r+0x60a>
 8007fcc:	e4fb      	b.n	80079c6 <_dtoa_r+0x3ae>
 8007fce:	4659      	mov	r1, fp
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	f001 fbdd 	bl	8009790 <__pow5mult>
 8007fd6:	4683      	mov	fp, r0
 8007fd8:	e554      	b.n	8007a84 <_dtoa_r+0x46c>
 8007fda:	9b00      	ldr	r3, [sp, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f47f ad63 	bne.w	8007aa8 <_dtoa_r+0x490>
 8007fe2:	9b01      	ldr	r3, [sp, #4]
 8007fe4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f47f ad90 	bne.w	8007b0e <_dtoa_r+0x4f6>
 8007fee:	9b01      	ldr	r3, [sp, #4]
 8007ff0:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8007ff4:	0d3f      	lsrs	r7, r7, #20
 8007ff6:	053f      	lsls	r7, r7, #20
 8007ff8:	2f00      	cmp	r7, #0
 8007ffa:	f000 821c 	beq.w	8008436 <_dtoa_r+0xe1e>
 8007ffe:	9b07      	ldr	r3, [sp, #28]
 8008000:	3301      	adds	r3, #1
 8008002:	9307      	str	r3, [sp, #28]
 8008004:	9b06      	ldr	r3, [sp, #24]
 8008006:	3301      	adds	r3, #1
 8008008:	9306      	str	r3, [sp, #24]
 800800a:	f04f 0901 	mov.w	r9, #1
 800800e:	e580      	b.n	8007b12 <_dtoa_r+0x4fa>
 8008010:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008012:	2a00      	cmp	r2, #0
 8008014:	f000 81a7 	beq.w	8008366 <_dtoa_r+0xd4e>
 8008018:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800801c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800801e:	9d07      	ldr	r5, [sp, #28]
 8008020:	e4f9      	b.n	8007a16 <_dtoa_r+0x3fe>
 8008022:	f001 fa81 	bl	8009528 <__multadd>
 8008026:	4657      	mov	r7, sl
 8008028:	4606      	mov	r6, r0
 800802a:	4681      	mov	r9, r0
 800802c:	e62f      	b.n	8007c8e <_dtoa_r+0x676>
 800802e:	4601      	mov	r1, r0
 8008030:	4620      	mov	r0, r4
 8008032:	f8cd c000 	str.w	ip, [sp]
 8008036:	f001 fa6d 	bl	8009514 <_Bfree>
 800803a:	2201      	movs	r2, #1
 800803c:	f8dd c000 	ldr.w	ip, [sp]
 8008040:	e652      	b.n	8007ce8 <_dtoa_r+0x6d0>
 8008042:	4658      	mov	r0, fp
 8008044:	4641      	mov	r1, r8
 8008046:	f001 fc49 	bl	80098dc <__mcmp>
 800804a:	2800      	cmp	r0, #0
 800804c:	f6bf ad8f 	bge.w	8007b6e <_dtoa_r+0x556>
 8008050:	9f05      	ldr	r7, [sp, #20]
 8008052:	4659      	mov	r1, fp
 8008054:	2300      	movs	r3, #0
 8008056:	4620      	mov	r0, r4
 8008058:	220a      	movs	r2, #10
 800805a:	3f01      	subs	r7, #1
 800805c:	9705      	str	r7, [sp, #20]
 800805e:	f001 fa63 	bl	8009528 <__multadd>
 8008062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008064:	4683      	mov	fp, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	f47f adee 	bne.w	8007c48 <_dtoa_r+0x630>
 800806c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800806e:	2b00      	cmp	r3, #0
 8008070:	f340 81f5 	ble.w	800845e <_dtoa_r+0xe46>
 8008074:	9308      	str	r3, [sp, #32]
 8008076:	e581      	b.n	8007b7c <_dtoa_r+0x564>
 8008078:	9809      	ldr	r0, [sp, #36]	; 0x24
 800807a:	f7ff bb04 	b.w	8007686 <_dtoa_r+0x6e>
 800807e:	9b00      	ldr	r3, [sp, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	f47f ad44 	bne.w	8007b0e <_dtoa_r+0x4f6>
 8008086:	e7ac      	b.n	8007fe2 <_dtoa_r+0x9ca>
 8008088:	08019ea0 	.word	0x08019ea0
 800808c:	08019f68 	.word	0x08019f68
 8008090:	3ff00000 	.word	0x3ff00000
 8008094:	401c0000 	.word	0x401c0000
 8008098:	3fe00000 	.word	0x3fe00000
 800809c:	40240000 	.word	0x40240000
 80080a0:	40140000 	.word	0x40140000
 80080a4:	9b03      	ldr	r3, [sp, #12]
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	f77f ad65 	ble.w	8007b76 <_dtoa_r+0x55e>
 80080ac:	9b08      	ldr	r3, [sp, #32]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d181      	bne.n	8007fb6 <_dtoa_r+0x99e>
 80080b2:	4641      	mov	r1, r8
 80080b4:	2205      	movs	r2, #5
 80080b6:	4620      	mov	r0, r4
 80080b8:	f001 fa36 	bl	8009528 <__multadd>
 80080bc:	4680      	mov	r8, r0
 80080be:	4641      	mov	r1, r8
 80080c0:	4658      	mov	r0, fp
 80080c2:	f001 fc0b 	bl	80098dc <__mcmp>
 80080c6:	2800      	cmp	r0, #0
 80080c8:	f77f af75 	ble.w	8007fb6 <_dtoa_r+0x99e>
 80080cc:	9a05      	ldr	r2, [sp, #20]
 80080ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080d0:	2331      	movs	r3, #49	; 0x31
 80080d2:	3201      	adds	r2, #1
 80080d4:	9205      	str	r2, [sp, #20]
 80080d6:	700b      	strb	r3, [r1, #0]
 80080d8:	1c4d      	adds	r5, r1, #1
 80080da:	e770      	b.n	8007fbe <_dtoa_r+0x9a6>
 80080dc:	9a05      	ldr	r2, [sp, #20]
 80080de:	3201      	adds	r2, #1
 80080e0:	9205      	str	r2, [sp, #20]
 80080e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080e4:	2331      	movs	r3, #49	; 0x31
 80080e6:	7013      	strb	r3, [r2, #0]
 80080e8:	e58b      	b.n	8007c02 <_dtoa_r+0x5ea>
 80080ea:	f8dd b000 	ldr.w	fp, [sp]
 80080ee:	9c03      	ldr	r4, [sp, #12]
 80080f0:	e469      	b.n	80079c6 <_dtoa_r+0x3ae>
 80080f2:	4640      	mov	r0, r8
 80080f4:	f7f8 fa80 	bl	80005f8 <__aeabi_i2d>
 80080f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080fc:	f7f8 fae2 	bl	80006c4 <__aeabi_dmul>
 8008100:	2200      	movs	r2, #0
 8008102:	4bc2      	ldr	r3, [pc, #776]	; (800840c <_dtoa_r+0xdf4>)
 8008104:	f7f8 f92c 	bl	8000360 <__adddf3>
 8008108:	4606      	mov	r6, r0
 800810a:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800810e:	2200      	movs	r2, #0
 8008110:	4bbf      	ldr	r3, [pc, #764]	; (8008410 <_dtoa_r+0xdf8>)
 8008112:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008116:	f7f8 f921 	bl	800035c <__aeabi_dsub>
 800811a:	4632      	mov	r2, r6
 800811c:	463b      	mov	r3, r7
 800811e:	4680      	mov	r8, r0
 8008120:	4689      	mov	r9, r1
 8008122:	f7f8 fd5f 	bl	8000be4 <__aeabi_dcmpgt>
 8008126:	2800      	cmp	r0, #0
 8008128:	f040 80b6 	bne.w	8008298 <_dtoa_r+0xc80>
 800812c:	4632      	mov	r2, r6
 800812e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008132:	4640      	mov	r0, r8
 8008134:	4649      	mov	r1, r9
 8008136:	f7f8 fd37 	bl	8000ba8 <__aeabi_dcmplt>
 800813a:	2800      	cmp	r0, #0
 800813c:	d052      	beq.n	80081e4 <_dtoa_r+0xbcc>
 800813e:	f04f 0800 	mov.w	r8, #0
 8008142:	4646      	mov	r6, r8
 8008144:	e737      	b.n	8007fb6 <_dtoa_r+0x99e>
 8008146:	4659      	mov	r1, fp
 8008148:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800814a:	4620      	mov	r0, r4
 800814c:	f001 fb20 	bl	8009790 <__pow5mult>
 8008150:	4683      	mov	fp, r0
 8008152:	e497      	b.n	8007a84 <_dtoa_r+0x46c>
 8008154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008156:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008158:	970a      	str	r7, [sp, #40]	; 0x28
 800815a:	1afb      	subs	r3, r7, r3
 800815c:	441a      	add	r2, r3
 800815e:	920c      	str	r2, [sp, #48]	; 0x30
 8008160:	2700      	movs	r7, #0
 8008162:	e452      	b.n	8007a0a <_dtoa_r+0x3f2>
 8008164:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8008168:	f04f 0802 	mov.w	r8, #2
 800816c:	ed8d 7b00 	vstr	d7, [sp]
 8008170:	e633      	b.n	8007dda <_dtoa_r+0x7c2>
 8008172:	2501      	movs	r5, #1
 8008174:	950e      	str	r5, [sp, #56]	; 0x38
 8008176:	9508      	str	r5, [sp, #32]
 8008178:	46aa      	mov	sl, r5
 800817a:	2100      	movs	r1, #0
 800817c:	6461      	str	r1, [r4, #68]	; 0x44
 800817e:	e601      	b.n	8007d84 <_dtoa_r+0x76c>
 8008180:	461d      	mov	r5, r3
 8008182:	e7fa      	b.n	800817a <_dtoa_r+0xb62>
 8008184:	2a00      	cmp	r2, #0
 8008186:	dd15      	ble.n	80081b4 <_dtoa_r+0xb9c>
 8008188:	4659      	mov	r1, fp
 800818a:	2201      	movs	r2, #1
 800818c:	4620      	mov	r0, r4
 800818e:	f8cd c000 	str.w	ip, [sp]
 8008192:	f001 fb4d 	bl	8009830 <__lshift>
 8008196:	4641      	mov	r1, r8
 8008198:	4683      	mov	fp, r0
 800819a:	f001 fb9f 	bl	80098dc <__mcmp>
 800819e:	2800      	cmp	r0, #0
 80081a0:	f8dd c000 	ldr.w	ip, [sp]
 80081a4:	f340 8154 	ble.w	8008450 <_dtoa_r+0xe38>
 80081a8:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 80081ac:	f000 8111 	beq.w	80083d2 <_dtoa_r+0xdba>
 80081b0:	f10c 0c01 	add.w	ip, ip, #1
 80081b4:	46b2      	mov	sl, r6
 80081b6:	f887 c000 	strb.w	ip, [r7]
 80081ba:	1c7d      	adds	r5, r7, #1
 80081bc:	464e      	mov	r6, r9
 80081be:	e520      	b.n	8007c02 <_dtoa_r+0x5ea>
 80081c0:	d104      	bne.n	80081cc <_dtoa_r+0xbb4>
 80081c2:	f01c 0f01 	tst.w	ip, #1
 80081c6:	d001      	beq.n	80081cc <_dtoa_r+0xbb4>
 80081c8:	e50b      	b.n	8007be2 <_dtoa_r+0x5ca>
 80081ca:	4615      	mov	r5, r2
 80081cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80081d0:	2b30      	cmp	r3, #48	; 0x30
 80081d2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80081d6:	d0f8      	beq.n	80081ca <_dtoa_r+0xbb2>
 80081d8:	e513      	b.n	8007c02 <_dtoa_r+0x5ea>
 80081da:	f8dd b000 	ldr.w	fp, [sp]
 80081de:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 80081e2:	4644      	mov	r4, r8
 80081e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80081e8:	e9cd 2300 	strd	r2, r3, [sp]
 80081ec:	f7ff bb27 	b.w	800783e <_dtoa_r+0x226>
 80081f0:	9b05      	ldr	r3, [sp, #20]
 80081f2:	425d      	negs	r5, r3
 80081f4:	2d00      	cmp	r5, #0
 80081f6:	f000 80bd 	beq.w	8008374 <_dtoa_r+0xd5c>
 80081fa:	4b86      	ldr	r3, [pc, #536]	; (8008414 <_dtoa_r+0xdfc>)
 80081fc:	f005 020f 	and.w	r2, r5, #15
 8008200:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008208:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800820c:	f7f8 fa5a 	bl	80006c4 <__aeabi_dmul>
 8008210:	112d      	asrs	r5, r5, #4
 8008212:	e9cd 0100 	strd	r0, r1, [sp]
 8008216:	f000 8127 	beq.w	8008468 <_dtoa_r+0xe50>
 800821a:	4e7f      	ldr	r6, [pc, #508]	; (8008418 <_dtoa_r+0xe00>)
 800821c:	f04f 0802 	mov.w	r8, #2
 8008220:	07eb      	lsls	r3, r5, #31
 8008222:	d505      	bpl.n	8008230 <_dtoa_r+0xc18>
 8008224:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008228:	f7f8 fa4c 	bl	80006c4 <__aeabi_dmul>
 800822c:	f108 0801 	add.w	r8, r8, #1
 8008230:	106d      	asrs	r5, r5, #1
 8008232:	f106 0608 	add.w	r6, r6, #8
 8008236:	d1f3      	bne.n	8008220 <_dtoa_r+0xc08>
 8008238:	e9cd 0100 	strd	r0, r1, [sp]
 800823c:	e5e8      	b.n	8007e10 <_dtoa_r+0x7f8>
 800823e:	9a05      	ldr	r2, [sp, #20]
 8008240:	3201      	adds	r2, #1
 8008242:	9205      	str	r2, [sp, #20]
 8008244:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008246:	2330      	movs	r3, #48	; 0x30
 8008248:	7013      	strb	r3, [r2, #0]
 800824a:	2331      	movs	r3, #49	; 0x31
 800824c:	7013      	strb	r3, [r2, #0]
 800824e:	f7ff bbba 	b.w	80079c6 <_dtoa_r+0x3ae>
 8008252:	6871      	ldr	r1, [r6, #4]
 8008254:	4620      	mov	r0, r4
 8008256:	f001 f937 	bl	80094c8 <_Balloc>
 800825a:	6933      	ldr	r3, [r6, #16]
 800825c:	1c9a      	adds	r2, r3, #2
 800825e:	4605      	mov	r5, r0
 8008260:	0092      	lsls	r2, r2, #2
 8008262:	f106 010c 	add.w	r1, r6, #12
 8008266:	300c      	adds	r0, #12
 8008268:	f7f7 ffda 	bl	8000220 <memcpy>
 800826c:	4620      	mov	r0, r4
 800826e:	4629      	mov	r1, r5
 8008270:	2201      	movs	r2, #1
 8008272:	f001 fadd 	bl	8009830 <__lshift>
 8008276:	4681      	mov	r9, r0
 8008278:	e4ff      	b.n	8007c7a <_dtoa_r+0x662>
 800827a:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 800827e:	f000 80a8 	beq.w	80083d2 <_dtoa_r+0xdba>
 8008282:	f10c 0c01 	add.w	ip, ip, #1
 8008286:	46b2      	mov	sl, r6
 8008288:	f887 c000 	strb.w	ip, [r7]
 800828c:	1c7d      	adds	r5, r7, #1
 800828e:	464e      	mov	r6, r9
 8008290:	e4b7      	b.n	8007c02 <_dtoa_r+0x5ea>
 8008292:	46b2      	mov	sl, r6
 8008294:	464e      	mov	r6, r9
 8008296:	e494      	b.n	8007bc2 <_dtoa_r+0x5aa>
 8008298:	f04f 0800 	mov.w	r8, #0
 800829c:	4646      	mov	r6, r8
 800829e:	e715      	b.n	80080cc <_dtoa_r+0xab4>
 80082a0:	495c      	ldr	r1, [pc, #368]	; (8008414 <_dtoa_r+0xdfc>)
 80082a2:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 80082a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80082aa:	4632      	mov	r2, r6
 80082ac:	9315      	str	r3, [sp, #84]	; 0x54
 80082ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082b2:	463b      	mov	r3, r7
 80082b4:	f7f8 fa06 	bl	80006c4 <__aeabi_dmul>
 80082b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80082bc:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80082c0:	4639      	mov	r1, r7
 80082c2:	4630      	mov	r0, r6
 80082c4:	f7f8 fc98 	bl	8000bf8 <__aeabi_d2iz>
 80082c8:	4605      	mov	r5, r0
 80082ca:	f7f8 f995 	bl	80005f8 <__aeabi_i2d>
 80082ce:	4602      	mov	r2, r0
 80082d0:	460b      	mov	r3, r1
 80082d2:	4630      	mov	r0, r6
 80082d4:	4639      	mov	r1, r7
 80082d6:	f7f8 f841 	bl	800035c <__aeabi_dsub>
 80082da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082dc:	3530      	adds	r5, #48	; 0x30
 80082de:	f1b9 0f01 	cmp.w	r9, #1
 80082e2:	7015      	strb	r5, [r2, #0]
 80082e4:	4606      	mov	r6, r0
 80082e6:	460f      	mov	r7, r1
 80082e8:	f102 0501 	add.w	r5, r2, #1
 80082ec:	d023      	beq.n	8008336 <_dtoa_r+0xd1e>
 80082ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f0:	f8cd b000 	str.w	fp, [sp]
 80082f4:	444b      	add	r3, r9
 80082f6:	4698      	mov	r8, r3
 80082f8:	46a9      	mov	r9, r5
 80082fa:	46ab      	mov	fp, r5
 80082fc:	2200      	movs	r2, #0
 80082fe:	4b47      	ldr	r3, [pc, #284]	; (800841c <_dtoa_r+0xe04>)
 8008300:	f7f8 f9e0 	bl	80006c4 <__aeabi_dmul>
 8008304:	460f      	mov	r7, r1
 8008306:	4606      	mov	r6, r0
 8008308:	f7f8 fc76 	bl	8000bf8 <__aeabi_d2iz>
 800830c:	4605      	mov	r5, r0
 800830e:	f7f8 f973 	bl	80005f8 <__aeabi_i2d>
 8008312:	3530      	adds	r5, #48	; 0x30
 8008314:	4602      	mov	r2, r0
 8008316:	460b      	mov	r3, r1
 8008318:	4630      	mov	r0, r6
 800831a:	4639      	mov	r1, r7
 800831c:	f7f8 f81e 	bl	800035c <__aeabi_dsub>
 8008320:	f809 5b01 	strb.w	r5, [r9], #1
 8008324:	45c1      	cmp	r9, r8
 8008326:	d1e9      	bne.n	80082fc <_dtoa_r+0xce4>
 8008328:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800832a:	465d      	mov	r5, fp
 800832c:	f8dd b000 	ldr.w	fp, [sp]
 8008330:	4606      	mov	r6, r0
 8008332:	460f      	mov	r7, r1
 8008334:	441d      	add	r5, r3
 8008336:	2200      	movs	r2, #0
 8008338:	4b39      	ldr	r3, [pc, #228]	; (8008420 <_dtoa_r+0xe08>)
 800833a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800833e:	f7f8 f80f 	bl	8000360 <__adddf3>
 8008342:	4632      	mov	r2, r6
 8008344:	463b      	mov	r3, r7
 8008346:	f7f8 fc2f 	bl	8000ba8 <__aeabi_dcmplt>
 800834a:	2800      	cmp	r0, #0
 800834c:	d047      	beq.n	80083de <_dtoa_r+0xdc6>
 800834e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008350:	9305      	str	r3, [sp, #20]
 8008352:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 8008356:	f7ff bb24 	b.w	80079a2 <_dtoa_r+0x38a>
 800835a:	9b07      	ldr	r3, [sp, #28]
 800835c:	9a08      	ldr	r2, [sp, #32]
 800835e:	1a9d      	subs	r5, r3, r2
 8008360:	2300      	movs	r3, #0
 8008362:	f7ff bb58 	b.w	8007a16 <_dtoa_r+0x3fe>
 8008366:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008368:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800836a:	9d07      	ldr	r5, [sp, #28]
 800836c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008370:	f7ff bb51 	b.w	8007a16 <_dtoa_r+0x3fe>
 8008374:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8008378:	f04f 0802 	mov.w	r8, #2
 800837c:	ed8d 7b00 	vstr	d7, [sp]
 8008380:	e546      	b.n	8007e10 <_dtoa_r+0x7f8>
 8008382:	9b08      	ldr	r3, [sp, #32]
 8008384:	2b00      	cmp	r3, #0
 8008386:	f43f aeb4 	beq.w	80080f2 <_dtoa_r+0xada>
 800838a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800838c:	2d00      	cmp	r5, #0
 800838e:	f77f af29 	ble.w	80081e4 <_dtoa_r+0xbcc>
 8008392:	2200      	movs	r2, #0
 8008394:	4b21      	ldr	r3, [pc, #132]	; (800841c <_dtoa_r+0xe04>)
 8008396:	e9dd 0100 	ldrd	r0, r1, [sp]
 800839a:	f7f8 f993 	bl	80006c4 <__aeabi_dmul>
 800839e:	4606      	mov	r6, r0
 80083a0:	460f      	mov	r7, r1
 80083a2:	f108 0001 	add.w	r0, r8, #1
 80083a6:	e9cd 6700 	strd	r6, r7, [sp]
 80083aa:	f7f8 f925 	bl	80005f8 <__aeabi_i2d>
 80083ae:	4602      	mov	r2, r0
 80083b0:	460b      	mov	r3, r1
 80083b2:	4630      	mov	r0, r6
 80083b4:	4639      	mov	r1, r7
 80083b6:	f7f8 f985 	bl	80006c4 <__aeabi_dmul>
 80083ba:	4b14      	ldr	r3, [pc, #80]	; (800840c <_dtoa_r+0xdf4>)
 80083bc:	2200      	movs	r2, #0
 80083be:	f7f7 ffcf 	bl	8000360 <__adddf3>
 80083c2:	9b05      	ldr	r3, [sp, #20]
 80083c4:	3b01      	subs	r3, #1
 80083c6:	4606      	mov	r6, r0
 80083c8:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 80083cc:	9314      	str	r3, [sp, #80]	; 0x50
 80083ce:	46a9      	mov	r9, r5
 80083d0:	e53f      	b.n	8007e52 <_dtoa_r+0x83a>
 80083d2:	2239      	movs	r2, #57	; 0x39
 80083d4:	46b2      	mov	sl, r6
 80083d6:	703a      	strb	r2, [r7, #0]
 80083d8:	464e      	mov	r6, r9
 80083da:	1c7d      	adds	r5, r7, #1
 80083dc:	e403      	b.n	8007be6 <_dtoa_r+0x5ce>
 80083de:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80083e2:	2000      	movs	r0, #0
 80083e4:	490e      	ldr	r1, [pc, #56]	; (8008420 <_dtoa_r+0xe08>)
 80083e6:	f7f7 ffb9 	bl	800035c <__aeabi_dsub>
 80083ea:	4632      	mov	r2, r6
 80083ec:	463b      	mov	r3, r7
 80083ee:	f7f8 fbf9 	bl	8000be4 <__aeabi_dcmpgt>
 80083f2:	b908      	cbnz	r0, 80083f8 <_dtoa_r+0xde0>
 80083f4:	e6f6      	b.n	80081e4 <_dtoa_r+0xbcc>
 80083f6:	4615      	mov	r5, r2
 80083f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80083fc:	2b30      	cmp	r3, #48	; 0x30
 80083fe:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008402:	d0f8      	beq.n	80083f6 <_dtoa_r+0xdde>
 8008404:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008406:	9305      	str	r3, [sp, #20]
 8008408:	f7ff badd 	b.w	80079c6 <_dtoa_r+0x3ae>
 800840c:	401c0000 	.word	0x401c0000
 8008410:	40140000 	.word	0x40140000
 8008414:	08019ea0 	.word	0x08019ea0
 8008418:	08019f68 	.word	0x08019f68
 800841c:	40240000 	.word	0x40240000
 8008420:	3fe00000 	.word	0x3fe00000
 8008424:	4643      	mov	r3, r8
 8008426:	f8dd b000 	ldr.w	fp, [sp]
 800842a:	46a0      	mov	r8, r4
 800842c:	461c      	mov	r4, r3
 800842e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008430:	9305      	str	r3, [sp, #20]
 8008432:	f7ff bab6 	b.w	80079a2 <_dtoa_r+0x38a>
 8008436:	46b9      	mov	r9, r7
 8008438:	f7ff bb6b 	b.w	8007b12 <_dtoa_r+0x4fa>
 800843c:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8008440:	d0c7      	beq.n	80083d2 <_dtoa_r+0xdba>
 8008442:	f1ba 0f00 	cmp.w	sl, #0
 8008446:	f77f aeb5 	ble.w	80081b4 <_dtoa_r+0xb9c>
 800844a:	f105 0c31 	add.w	ip, r5, #49	; 0x31
 800844e:	e6b1      	b.n	80081b4 <_dtoa_r+0xb9c>
 8008450:	f47f aeb0 	bne.w	80081b4 <_dtoa_r+0xb9c>
 8008454:	f01c 0f01 	tst.w	ip, #1
 8008458:	f43f aeac 	beq.w	80081b4 <_dtoa_r+0xb9c>
 800845c:	e6a4      	b.n	80081a8 <_dtoa_r+0xb90>
 800845e:	9b03      	ldr	r3, [sp, #12]
 8008460:	2b02      	cmp	r3, #2
 8008462:	dc04      	bgt.n	800846e <_dtoa_r+0xe56>
 8008464:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008466:	e605      	b.n	8008074 <_dtoa_r+0xa5c>
 8008468:	f04f 0802 	mov.w	r8, #2
 800846c:	e4d0      	b.n	8007e10 <_dtoa_r+0x7f8>
 800846e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008470:	9308      	str	r3, [sp, #32]
 8008472:	e61b      	b.n	80080ac <_dtoa_r+0xa94>
 8008474:	9b03      	ldr	r3, [sp, #12]
 8008476:	2b02      	cmp	r3, #2
 8008478:	dcf9      	bgt.n	800846e <_dtoa_r+0xe56>
 800847a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800847c:	f7ff bbef 	b.w	8007c5e <_dtoa_r+0x646>
 8008480:	2500      	movs	r5, #0
 8008482:	6465      	str	r5, [r4, #68]	; 0x44
 8008484:	4629      	mov	r1, r5
 8008486:	4620      	mov	r0, r4
 8008488:	f001 f81e 	bl	80094c8 <_Balloc>
 800848c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008490:	9308      	str	r3, [sp, #32]
 8008492:	930e      	str	r3, [sp, #56]	; 0x38
 8008494:	2301      	movs	r3, #1
 8008496:	9009      	str	r0, [sp, #36]	; 0x24
 8008498:	46aa      	mov	sl, r5
 800849a:	6420      	str	r0, [r4, #64]	; 0x40
 800849c:	930b      	str	r3, [sp, #44]	; 0x2c
 800849e:	f7ff b9ce 	b.w	800783e <_dtoa_r+0x226>
 80084a2:	f43f ab4e 	beq.w	8007b42 <_dtoa_r+0x52a>
 80084a6:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 80084aa:	f7ff bb43 	b.w	8007b34 <_dtoa_r+0x51c>
 80084ae:	2301      	movs	r3, #1
 80084b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80084b2:	e55c      	b.n	8007f6e <_dtoa_r+0x956>
 80084b4:	2701      	movs	r7, #1
 80084b6:	f7ff b98d 	b.w	80077d4 <_dtoa_r+0x1bc>
 80084ba:	bf00      	nop
 80084bc:	f3af 8000 	nop.w

080084c0 <__sflush_r>:
 80084c0:	898b      	ldrh	r3, [r1, #12]
 80084c2:	b29a      	uxth	r2, r3
 80084c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084c8:	460d      	mov	r5, r1
 80084ca:	0711      	lsls	r1, r2, #28
 80084cc:	4680      	mov	r8, r0
 80084ce:	d43c      	bmi.n	800854a <__sflush_r+0x8a>
 80084d0:	686a      	ldr	r2, [r5, #4]
 80084d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80084d6:	2a00      	cmp	r2, #0
 80084d8:	81ab      	strh	r3, [r5, #12]
 80084da:	dd65      	ble.n	80085a8 <__sflush_r+0xe8>
 80084dc:	6aae      	ldr	r6, [r5, #40]	; 0x28
 80084de:	2e00      	cmp	r6, #0
 80084e0:	d04b      	beq.n	800857a <__sflush_r+0xba>
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80084e8:	2100      	movs	r1, #0
 80084ea:	b292      	uxth	r2, r2
 80084ec:	f8d8 4000 	ldr.w	r4, [r8]
 80084f0:	f8c8 1000 	str.w	r1, [r8]
 80084f4:	2a00      	cmp	r2, #0
 80084f6:	d05b      	beq.n	80085b0 <__sflush_r+0xf0>
 80084f8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80084fa:	075f      	lsls	r7, r3, #29
 80084fc:	d505      	bpl.n	800850a <__sflush_r+0x4a>
 80084fe:	6869      	ldr	r1, [r5, #4]
 8008500:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008502:	1a52      	subs	r2, r2, r1
 8008504:	b10b      	cbz	r3, 800850a <__sflush_r+0x4a>
 8008506:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8008508:	1ad2      	subs	r2, r2, r3
 800850a:	4640      	mov	r0, r8
 800850c:	69e9      	ldr	r1, [r5, #28]
 800850e:	2300      	movs	r3, #0
 8008510:	47b0      	blx	r6
 8008512:	1c46      	adds	r6, r0, #1
 8008514:	d056      	beq.n	80085c4 <__sflush_r+0x104>
 8008516:	89ab      	ldrh	r3, [r5, #12]
 8008518:	692a      	ldr	r2, [r5, #16]
 800851a:	602a      	str	r2, [r5, #0]
 800851c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008520:	b29b      	uxth	r3, r3
 8008522:	2200      	movs	r2, #0
 8008524:	606a      	str	r2, [r5, #4]
 8008526:	04da      	lsls	r2, r3, #19
 8008528:	81ab      	strh	r3, [r5, #12]
 800852a:	d43b      	bmi.n	80085a4 <__sflush_r+0xe4>
 800852c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800852e:	f8c8 4000 	str.w	r4, [r8]
 8008532:	b311      	cbz	r1, 800857a <__sflush_r+0xba>
 8008534:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8008538:	4299      	cmp	r1, r3
 800853a:	d002      	beq.n	8008542 <__sflush_r+0x82>
 800853c:	4640      	mov	r0, r8
 800853e:	f000 f96b 	bl	8008818 <_free_r>
 8008542:	2000      	movs	r0, #0
 8008544:	6328      	str	r0, [r5, #48]	; 0x30
 8008546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800854a:	692e      	ldr	r6, [r5, #16]
 800854c:	b1ae      	cbz	r6, 800857a <__sflush_r+0xba>
 800854e:	682c      	ldr	r4, [r5, #0]
 8008550:	602e      	str	r6, [r5, #0]
 8008552:	0791      	lsls	r1, r2, #30
 8008554:	bf0c      	ite	eq
 8008556:	696b      	ldreq	r3, [r5, #20]
 8008558:	2300      	movne	r3, #0
 800855a:	1ba4      	subs	r4, r4, r6
 800855c:	60ab      	str	r3, [r5, #8]
 800855e:	e00a      	b.n	8008576 <__sflush_r+0xb6>
 8008560:	4632      	mov	r2, r6
 8008562:	4623      	mov	r3, r4
 8008564:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8008566:	69e9      	ldr	r1, [r5, #28]
 8008568:	4640      	mov	r0, r8
 800856a:	47b8      	blx	r7
 800856c:	2800      	cmp	r0, #0
 800856e:	eba4 0400 	sub.w	r4, r4, r0
 8008572:	4406      	add	r6, r0
 8008574:	dd04      	ble.n	8008580 <__sflush_r+0xc0>
 8008576:	2c00      	cmp	r4, #0
 8008578:	dcf2      	bgt.n	8008560 <__sflush_r+0xa0>
 800857a:	2000      	movs	r0, #0
 800857c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008580:	89ab      	ldrh	r3, [r5, #12]
 8008582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008586:	81ab      	strh	r3, [r5, #12]
 8008588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800858c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008590:	89ab      	ldrh	r3, [r5, #12]
 8008592:	692a      	ldr	r2, [r5, #16]
 8008594:	6069      	str	r1, [r5, #4]
 8008596:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800859a:	b29b      	uxth	r3, r3
 800859c:	81ab      	strh	r3, [r5, #12]
 800859e:	04db      	lsls	r3, r3, #19
 80085a0:	602a      	str	r2, [r5, #0]
 80085a2:	d5c3      	bpl.n	800852c <__sflush_r+0x6c>
 80085a4:	6528      	str	r0, [r5, #80]	; 0x50
 80085a6:	e7c1      	b.n	800852c <__sflush_r+0x6c>
 80085a8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80085aa:	2a00      	cmp	r2, #0
 80085ac:	dc96      	bgt.n	80084dc <__sflush_r+0x1c>
 80085ae:	e7e4      	b.n	800857a <__sflush_r+0xba>
 80085b0:	2301      	movs	r3, #1
 80085b2:	4640      	mov	r0, r8
 80085b4:	69e9      	ldr	r1, [r5, #28]
 80085b6:	47b0      	blx	r6
 80085b8:	1c43      	adds	r3, r0, #1
 80085ba:	4602      	mov	r2, r0
 80085bc:	d019      	beq.n	80085f2 <__sflush_r+0x132>
 80085be:	89ab      	ldrh	r3, [r5, #12]
 80085c0:	6aae      	ldr	r6, [r5, #40]	; 0x28
 80085c2:	e79a      	b.n	80084fa <__sflush_r+0x3a>
 80085c4:	f8d8 1000 	ldr.w	r1, [r8]
 80085c8:	2900      	cmp	r1, #0
 80085ca:	d0e1      	beq.n	8008590 <__sflush_r+0xd0>
 80085cc:	291d      	cmp	r1, #29
 80085ce:	d007      	beq.n	80085e0 <__sflush_r+0x120>
 80085d0:	2916      	cmp	r1, #22
 80085d2:	d005      	beq.n	80085e0 <__sflush_r+0x120>
 80085d4:	89ab      	ldrh	r3, [r5, #12]
 80085d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085da:	81ab      	strh	r3, [r5, #12]
 80085dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085e0:	89ab      	ldrh	r3, [r5, #12]
 80085e2:	692a      	ldr	r2, [r5, #16]
 80085e4:	602a      	str	r2, [r5, #0]
 80085e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085ea:	2200      	movs	r2, #0
 80085ec:	81ab      	strh	r3, [r5, #12]
 80085ee:	606a      	str	r2, [r5, #4]
 80085f0:	e79c      	b.n	800852c <__sflush_r+0x6c>
 80085f2:	f8d8 3000 	ldr.w	r3, [r8]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d0e1      	beq.n	80085be <__sflush_r+0xfe>
 80085fa:	2b1d      	cmp	r3, #29
 80085fc:	d007      	beq.n	800860e <__sflush_r+0x14e>
 80085fe:	2b16      	cmp	r3, #22
 8008600:	d005      	beq.n	800860e <__sflush_r+0x14e>
 8008602:	89ab      	ldrh	r3, [r5, #12]
 8008604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008608:	81ab      	strh	r3, [r5, #12]
 800860a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800860e:	f8c8 4000 	str.w	r4, [r8]
 8008612:	e7b2      	b.n	800857a <__sflush_r+0xba>

08008614 <_fflush_r>:
 8008614:	b510      	push	{r4, lr}
 8008616:	4604      	mov	r4, r0
 8008618:	b082      	sub	sp, #8
 800861a:	b108      	cbz	r0, 8008620 <_fflush_r+0xc>
 800861c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800861e:	b153      	cbz	r3, 8008636 <_fflush_r+0x22>
 8008620:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8008624:	b908      	cbnz	r0, 800862a <_fflush_r+0x16>
 8008626:	b002      	add	sp, #8
 8008628:	bd10      	pop	{r4, pc}
 800862a:	4620      	mov	r0, r4
 800862c:	b002      	add	sp, #8
 800862e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008632:	f7ff bf45 	b.w	80084c0 <__sflush_r>
 8008636:	9101      	str	r1, [sp, #4]
 8008638:	f000 f880 	bl	800873c <__sinit>
 800863c:	9901      	ldr	r1, [sp, #4]
 800863e:	e7ef      	b.n	8008620 <_fflush_r+0xc>

08008640 <_cleanup_r>:
 8008640:	4901      	ldr	r1, [pc, #4]	; (8008648 <_cleanup_r+0x8>)
 8008642:	f000 bb4d 	b.w	8008ce0 <_fwalk_reent>
 8008646:	bf00      	nop
 8008648:	0800a215 	.word	0x0800a215

0800864c <__sinit.part.1>:
 800864c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008650:	4b35      	ldr	r3, [pc, #212]	; (8008728 <__sinit.part.1+0xdc>)
 8008652:	6845      	ldr	r5, [r0, #4]
 8008654:	63c3      	str	r3, [r0, #60]	; 0x3c
 8008656:	2400      	movs	r4, #0
 8008658:	4607      	mov	r7, r0
 800865a:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 800865e:	2304      	movs	r3, #4
 8008660:	2103      	movs	r1, #3
 8008662:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 8008666:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 800866a:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 800866e:	b083      	sub	sp, #12
 8008670:	602c      	str	r4, [r5, #0]
 8008672:	606c      	str	r4, [r5, #4]
 8008674:	60ac      	str	r4, [r5, #8]
 8008676:	666c      	str	r4, [r5, #100]	; 0x64
 8008678:	81ec      	strh	r4, [r5, #14]
 800867a:	612c      	str	r4, [r5, #16]
 800867c:	616c      	str	r4, [r5, #20]
 800867e:	61ac      	str	r4, [r5, #24]
 8008680:	81ab      	strh	r3, [r5, #12]
 8008682:	4621      	mov	r1, r4
 8008684:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8008688:	2208      	movs	r2, #8
 800868a:	f7fd f9c5 	bl	8005a18 <memset>
 800868e:	68be      	ldr	r6, [r7, #8]
 8008690:	f8df b098 	ldr.w	fp, [pc, #152]	; 800872c <__sinit.part.1+0xe0>
 8008694:	f8df a098 	ldr.w	sl, [pc, #152]	; 8008730 <__sinit.part.1+0xe4>
 8008698:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8008734 <__sinit.part.1+0xe8>
 800869c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8008738 <__sinit.part.1+0xec>
 80086a0:	f8c5 b020 	str.w	fp, [r5, #32]
 80086a4:	2301      	movs	r3, #1
 80086a6:	2209      	movs	r2, #9
 80086a8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 80086ac:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 80086b0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 80086b4:	61ed      	str	r5, [r5, #28]
 80086b6:	4621      	mov	r1, r4
 80086b8:	81f3      	strh	r3, [r6, #14]
 80086ba:	81b2      	strh	r2, [r6, #12]
 80086bc:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 80086c0:	6034      	str	r4, [r6, #0]
 80086c2:	6074      	str	r4, [r6, #4]
 80086c4:	60b4      	str	r4, [r6, #8]
 80086c6:	6674      	str	r4, [r6, #100]	; 0x64
 80086c8:	6134      	str	r4, [r6, #16]
 80086ca:	6174      	str	r4, [r6, #20]
 80086cc:	61b4      	str	r4, [r6, #24]
 80086ce:	2208      	movs	r2, #8
 80086d0:	9301      	str	r3, [sp, #4]
 80086d2:	f7fd f9a1 	bl	8005a18 <memset>
 80086d6:	68fd      	ldr	r5, [r7, #12]
 80086d8:	61f6      	str	r6, [r6, #28]
 80086da:	2012      	movs	r0, #18
 80086dc:	2202      	movs	r2, #2
 80086de:	f8c6 b020 	str.w	fp, [r6, #32]
 80086e2:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 80086e6:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 80086ea:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 80086ee:	4621      	mov	r1, r4
 80086f0:	81a8      	strh	r0, [r5, #12]
 80086f2:	81ea      	strh	r2, [r5, #14]
 80086f4:	602c      	str	r4, [r5, #0]
 80086f6:	606c      	str	r4, [r5, #4]
 80086f8:	60ac      	str	r4, [r5, #8]
 80086fa:	666c      	str	r4, [r5, #100]	; 0x64
 80086fc:	612c      	str	r4, [r5, #16]
 80086fe:	616c      	str	r4, [r5, #20]
 8008700:	61ac      	str	r4, [r5, #24]
 8008702:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8008706:	2208      	movs	r2, #8
 8008708:	f7fd f986 	bl	8005a18 <memset>
 800870c:	9b01      	ldr	r3, [sp, #4]
 800870e:	61ed      	str	r5, [r5, #28]
 8008710:	f8c5 b020 	str.w	fp, [r5, #32]
 8008714:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8008718:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 800871c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8008720:	63bb      	str	r3, [r7, #56]	; 0x38
 8008722:	b003      	add	sp, #12
 8008724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008728:	08008641 	.word	0x08008641
 800872c:	08009f55 	.word	0x08009f55
 8008730:	08009f79 	.word	0x08009f79
 8008734:	08009fb1 	.word	0x08009fb1
 8008738:	08009fd1 	.word	0x08009fd1

0800873c <__sinit>:
 800873c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800873e:	b103      	cbz	r3, 8008742 <__sinit+0x6>
 8008740:	4770      	bx	lr
 8008742:	f7ff bf83 	b.w	800864c <__sinit.part.1>
 8008746:	bf00      	nop

08008748 <__sfp_lock_acquire>:
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop

0800874c <__sfp_lock_release>:
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop

08008750 <__libc_fini_array>:
 8008750:	b538      	push	{r3, r4, r5, lr}
 8008752:	4b08      	ldr	r3, [pc, #32]	; (8008774 <__libc_fini_array+0x24>)
 8008754:	4d08      	ldr	r5, [pc, #32]	; (8008778 <__libc_fini_array+0x28>)
 8008756:	1aed      	subs	r5, r5, r3
 8008758:	10ac      	asrs	r4, r5, #2
 800875a:	bf18      	it	ne
 800875c:	18ed      	addne	r5, r5, r3
 800875e:	d005      	beq.n	800876c <__libc_fini_array+0x1c>
 8008760:	3c01      	subs	r4, #1
 8008762:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008766:	4798      	blx	r3
 8008768:	2c00      	cmp	r4, #0
 800876a:	d1f9      	bne.n	8008760 <__libc_fini_array+0x10>
 800876c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008770:	f001 be3a 	b.w	800a3e8 <_fini>
 8008774:	08019fa0 	.word	0x08019fa0
 8008778:	08019fa4 	.word	0x08019fa4

0800877c <_malloc_trim_r>:
 800877c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800877e:	4f23      	ldr	r7, [pc, #140]	; (800880c <_malloc_trim_r+0x90>)
 8008780:	460c      	mov	r4, r1
 8008782:	4606      	mov	r6, r0
 8008784:	f000 fe9c 	bl	80094c0 <__malloc_lock>
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	685d      	ldr	r5, [r3, #4]
 800878c:	f025 0503 	bic.w	r5, r5, #3
 8008790:	1b29      	subs	r1, r5, r4
 8008792:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8008796:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800879a:	f021 010f 	bic.w	r1, r1, #15
 800879e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 80087a2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80087a6:	db07      	blt.n	80087b8 <_malloc_trim_r+0x3c>
 80087a8:	4630      	mov	r0, r6
 80087aa:	2100      	movs	r1, #0
 80087ac:	f7f9 fd1a 	bl	80021e4 <_sbrk_r>
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	442b      	add	r3, r5
 80087b4:	4298      	cmp	r0, r3
 80087b6:	d004      	beq.n	80087c2 <_malloc_trim_r+0x46>
 80087b8:	4630      	mov	r0, r6
 80087ba:	f000 fe83 	bl	80094c4 <__malloc_unlock>
 80087be:	2000      	movs	r0, #0
 80087c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087c2:	4630      	mov	r0, r6
 80087c4:	4261      	negs	r1, r4
 80087c6:	f7f9 fd0d 	bl	80021e4 <_sbrk_r>
 80087ca:	3001      	adds	r0, #1
 80087cc:	d00d      	beq.n	80087ea <_malloc_trim_r+0x6e>
 80087ce:	4b10      	ldr	r3, [pc, #64]	; (8008810 <_malloc_trim_r+0x94>)
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	6819      	ldr	r1, [r3, #0]
 80087d4:	1b2d      	subs	r5, r5, r4
 80087d6:	f045 0501 	orr.w	r5, r5, #1
 80087da:	4630      	mov	r0, r6
 80087dc:	1b09      	subs	r1, r1, r4
 80087de:	6055      	str	r5, [r2, #4]
 80087e0:	6019      	str	r1, [r3, #0]
 80087e2:	f000 fe6f 	bl	80094c4 <__malloc_unlock>
 80087e6:	2001      	movs	r0, #1
 80087e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087ea:	4630      	mov	r0, r6
 80087ec:	2100      	movs	r1, #0
 80087ee:	f7f9 fcf9 	bl	80021e4 <_sbrk_r>
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	1a83      	subs	r3, r0, r2
 80087f6:	2b0f      	cmp	r3, #15
 80087f8:	ddde      	ble.n	80087b8 <_malloc_trim_r+0x3c>
 80087fa:	4c06      	ldr	r4, [pc, #24]	; (8008814 <_malloc_trim_r+0x98>)
 80087fc:	4904      	ldr	r1, [pc, #16]	; (8008810 <_malloc_trim_r+0x94>)
 80087fe:	6824      	ldr	r4, [r4, #0]
 8008800:	f043 0301 	orr.w	r3, r3, #1
 8008804:	1b00      	subs	r0, r0, r4
 8008806:	6053      	str	r3, [r2, #4]
 8008808:	6008      	str	r0, [r1, #0]
 800880a:	e7d5      	b.n	80087b8 <_malloc_trim_r+0x3c>
 800880c:	20000628 	.word	0x20000628
 8008810:	20000dec 	.word	0x20000dec
 8008814:	20000a34 	.word	0x20000a34

08008818 <_free_r>:
 8008818:	2900      	cmp	r1, #0
 800881a:	d04e      	beq.n	80088ba <_free_r+0xa2>
 800881c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008820:	460c      	mov	r4, r1
 8008822:	4680      	mov	r8, r0
 8008824:	f000 fe4c 	bl	80094c0 <__malloc_lock>
 8008828:	f854 7c04 	ldr.w	r7, [r4, #-4]
 800882c:	4962      	ldr	r1, [pc, #392]	; (80089b8 <_free_r+0x1a0>)
 800882e:	f027 0201 	bic.w	r2, r7, #1
 8008832:	f1a4 0508 	sub.w	r5, r4, #8
 8008836:	18ab      	adds	r3, r5, r2
 8008838:	688e      	ldr	r6, [r1, #8]
 800883a:	6858      	ldr	r0, [r3, #4]
 800883c:	429e      	cmp	r6, r3
 800883e:	f020 0003 	bic.w	r0, r0, #3
 8008842:	d05a      	beq.n	80088fa <_free_r+0xe2>
 8008844:	07fe      	lsls	r6, r7, #31
 8008846:	6058      	str	r0, [r3, #4]
 8008848:	d40b      	bmi.n	8008862 <_free_r+0x4a>
 800884a:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800884e:	1bed      	subs	r5, r5, r7
 8008850:	f101 0e08 	add.w	lr, r1, #8
 8008854:	68ac      	ldr	r4, [r5, #8]
 8008856:	4574      	cmp	r4, lr
 8008858:	443a      	add	r2, r7
 800885a:	d067      	beq.n	800892c <_free_r+0x114>
 800885c:	68ef      	ldr	r7, [r5, #12]
 800885e:	60e7      	str	r7, [r4, #12]
 8008860:	60bc      	str	r4, [r7, #8]
 8008862:	181c      	adds	r4, r3, r0
 8008864:	6864      	ldr	r4, [r4, #4]
 8008866:	07e4      	lsls	r4, r4, #31
 8008868:	d40c      	bmi.n	8008884 <_free_r+0x6c>
 800886a:	4f54      	ldr	r7, [pc, #336]	; (80089bc <_free_r+0x1a4>)
 800886c:	689c      	ldr	r4, [r3, #8]
 800886e:	42bc      	cmp	r4, r7
 8008870:	4402      	add	r2, r0
 8008872:	d07c      	beq.n	800896e <_free_r+0x156>
 8008874:	68d8      	ldr	r0, [r3, #12]
 8008876:	60e0      	str	r0, [r4, #12]
 8008878:	f042 0301 	orr.w	r3, r2, #1
 800887c:	6084      	str	r4, [r0, #8]
 800887e:	606b      	str	r3, [r5, #4]
 8008880:	50aa      	str	r2, [r5, r2]
 8008882:	e003      	b.n	800888c <_free_r+0x74>
 8008884:	f042 0301 	orr.w	r3, r2, #1
 8008888:	606b      	str	r3, [r5, #4]
 800888a:	50aa      	str	r2, [r5, r2]
 800888c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8008890:	d214      	bcs.n	80088bc <_free_r+0xa4>
 8008892:	08d2      	lsrs	r2, r2, #3
 8008894:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8008898:	6848      	ldr	r0, [r1, #4]
 800889a:	689f      	ldr	r7, [r3, #8]
 800889c:	60af      	str	r7, [r5, #8]
 800889e:	1092      	asrs	r2, r2, #2
 80088a0:	2401      	movs	r4, #1
 80088a2:	fa04 f202 	lsl.w	r2, r4, r2
 80088a6:	4310      	orrs	r0, r2
 80088a8:	60eb      	str	r3, [r5, #12]
 80088aa:	6048      	str	r0, [r1, #4]
 80088ac:	609d      	str	r5, [r3, #8]
 80088ae:	60fd      	str	r5, [r7, #12]
 80088b0:	4640      	mov	r0, r8
 80088b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088b6:	f000 be05 	b.w	80094c4 <__malloc_unlock>
 80088ba:	4770      	bx	lr
 80088bc:	0a53      	lsrs	r3, r2, #9
 80088be:	2b04      	cmp	r3, #4
 80088c0:	d847      	bhi.n	8008952 <_free_r+0x13a>
 80088c2:	0993      	lsrs	r3, r2, #6
 80088c4:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80088c8:	0060      	lsls	r0, r4, #1
 80088ca:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80088ce:	493a      	ldr	r1, [pc, #232]	; (80089b8 <_free_r+0x1a0>)
 80088d0:	6883      	ldr	r3, [r0, #8]
 80088d2:	4283      	cmp	r3, r0
 80088d4:	d043      	beq.n	800895e <_free_r+0x146>
 80088d6:	6859      	ldr	r1, [r3, #4]
 80088d8:	f021 0103 	bic.w	r1, r1, #3
 80088dc:	4291      	cmp	r1, r2
 80088de:	d902      	bls.n	80088e6 <_free_r+0xce>
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	4298      	cmp	r0, r3
 80088e4:	d1f7      	bne.n	80088d6 <_free_r+0xbe>
 80088e6:	68da      	ldr	r2, [r3, #12]
 80088e8:	60ea      	str	r2, [r5, #12]
 80088ea:	60ab      	str	r3, [r5, #8]
 80088ec:	4640      	mov	r0, r8
 80088ee:	6095      	str	r5, [r2, #8]
 80088f0:	60dd      	str	r5, [r3, #12]
 80088f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088f6:	f000 bde5 	b.w	80094c4 <__malloc_unlock>
 80088fa:	07ff      	lsls	r7, r7, #31
 80088fc:	4402      	add	r2, r0
 80088fe:	d407      	bmi.n	8008910 <_free_r+0xf8>
 8008900:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8008904:	1aed      	subs	r5, r5, r3
 8008906:	441a      	add	r2, r3
 8008908:	68a8      	ldr	r0, [r5, #8]
 800890a:	68eb      	ldr	r3, [r5, #12]
 800890c:	60c3      	str	r3, [r0, #12]
 800890e:	6098      	str	r0, [r3, #8]
 8008910:	4b2b      	ldr	r3, [pc, #172]	; (80089c0 <_free_r+0x1a8>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f042 0001 	orr.w	r0, r2, #1
 8008918:	429a      	cmp	r2, r3
 800891a:	6068      	str	r0, [r5, #4]
 800891c:	608d      	str	r5, [r1, #8]
 800891e:	d3c7      	bcc.n	80088b0 <_free_r+0x98>
 8008920:	4b28      	ldr	r3, [pc, #160]	; (80089c4 <_free_r+0x1ac>)
 8008922:	4640      	mov	r0, r8
 8008924:	6819      	ldr	r1, [r3, #0]
 8008926:	f7ff ff29 	bl	800877c <_malloc_trim_r>
 800892a:	e7c1      	b.n	80088b0 <_free_r+0x98>
 800892c:	1819      	adds	r1, r3, r0
 800892e:	6849      	ldr	r1, [r1, #4]
 8008930:	07c9      	lsls	r1, r1, #31
 8008932:	d409      	bmi.n	8008948 <_free_r+0x130>
 8008934:	68d9      	ldr	r1, [r3, #12]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	4402      	add	r2, r0
 800893a:	f042 0001 	orr.w	r0, r2, #1
 800893e:	60d9      	str	r1, [r3, #12]
 8008940:	608b      	str	r3, [r1, #8]
 8008942:	6068      	str	r0, [r5, #4]
 8008944:	50aa      	str	r2, [r5, r2]
 8008946:	e7b3      	b.n	80088b0 <_free_r+0x98>
 8008948:	f042 0301 	orr.w	r3, r2, #1
 800894c:	606b      	str	r3, [r5, #4]
 800894e:	50aa      	str	r2, [r5, r2]
 8008950:	e7ae      	b.n	80088b0 <_free_r+0x98>
 8008952:	2b14      	cmp	r3, #20
 8008954:	d814      	bhi.n	8008980 <_free_r+0x168>
 8008956:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 800895a:	0060      	lsls	r0, r4, #1
 800895c:	e7b5      	b.n	80088ca <_free_r+0xb2>
 800895e:	684a      	ldr	r2, [r1, #4]
 8008960:	10a4      	asrs	r4, r4, #2
 8008962:	2001      	movs	r0, #1
 8008964:	40a0      	lsls	r0, r4
 8008966:	4302      	orrs	r2, r0
 8008968:	604a      	str	r2, [r1, #4]
 800896a:	461a      	mov	r2, r3
 800896c:	e7bc      	b.n	80088e8 <_free_r+0xd0>
 800896e:	f042 0301 	orr.w	r3, r2, #1
 8008972:	614d      	str	r5, [r1, #20]
 8008974:	610d      	str	r5, [r1, #16]
 8008976:	60ec      	str	r4, [r5, #12]
 8008978:	60ac      	str	r4, [r5, #8]
 800897a:	606b      	str	r3, [r5, #4]
 800897c:	50aa      	str	r2, [r5, r2]
 800897e:	e797      	b.n	80088b0 <_free_r+0x98>
 8008980:	2b54      	cmp	r3, #84	; 0x54
 8008982:	d804      	bhi.n	800898e <_free_r+0x176>
 8008984:	0b13      	lsrs	r3, r2, #12
 8008986:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 800898a:	0060      	lsls	r0, r4, #1
 800898c:	e79d      	b.n	80088ca <_free_r+0xb2>
 800898e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8008992:	d804      	bhi.n	800899e <_free_r+0x186>
 8008994:	0bd3      	lsrs	r3, r2, #15
 8008996:	f103 0477 	add.w	r4, r3, #119	; 0x77
 800899a:	0060      	lsls	r0, r4, #1
 800899c:	e795      	b.n	80088ca <_free_r+0xb2>
 800899e:	f240 5054 	movw	r0, #1364	; 0x554
 80089a2:	4283      	cmp	r3, r0
 80089a4:	d804      	bhi.n	80089b0 <_free_r+0x198>
 80089a6:	0c93      	lsrs	r3, r2, #18
 80089a8:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80089ac:	0060      	lsls	r0, r4, #1
 80089ae:	e78c      	b.n	80088ca <_free_r+0xb2>
 80089b0:	20fc      	movs	r0, #252	; 0xfc
 80089b2:	247e      	movs	r4, #126	; 0x7e
 80089b4:	e789      	b.n	80088ca <_free_r+0xb2>
 80089b6:	bf00      	nop
 80089b8:	20000628 	.word	0x20000628
 80089bc:	20000630 	.word	0x20000630
 80089c0:	20000a30 	.word	0x20000a30
 80089c4:	20000de8 	.word	0x20000de8

080089c8 <__sfvwrite_r>:
 80089c8:	6893      	ldr	r3, [r2, #8]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d07a      	beq.n	8008ac4 <__sfvwrite_r+0xfc>
 80089ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d2:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 80089d6:	f01e 0f08 	tst.w	lr, #8
 80089da:	b083      	sub	sp, #12
 80089dc:	460c      	mov	r4, r1
 80089de:	4681      	mov	r9, r0
 80089e0:	4616      	mov	r6, r2
 80089e2:	d026      	beq.n	8008a32 <__sfvwrite_r+0x6a>
 80089e4:	690b      	ldr	r3, [r1, #16]
 80089e6:	b323      	cbz	r3, 8008a32 <__sfvwrite_r+0x6a>
 80089e8:	f00e 0802 	and.w	r8, lr, #2
 80089ec:	fa1f f088 	uxth.w	r0, r8
 80089f0:	6835      	ldr	r5, [r6, #0]
 80089f2:	b370      	cbz	r0, 8008a52 <__sfvwrite_r+0x8a>
 80089f4:	f04f 0a00 	mov.w	sl, #0
 80089f8:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 8008cdc <__sfvwrite_r+0x314>
 80089fc:	46d0      	mov	r8, sl
 80089fe:	45d8      	cmp	r8, fp
 8008a00:	4643      	mov	r3, r8
 8008a02:	4652      	mov	r2, sl
 8008a04:	bf28      	it	cs
 8008a06:	465b      	movcs	r3, fp
 8008a08:	4648      	mov	r0, r9
 8008a0a:	f1b8 0f00 	cmp.w	r8, #0
 8008a0e:	d053      	beq.n	8008ab8 <__sfvwrite_r+0xf0>
 8008a10:	69e1      	ldr	r1, [r4, #28]
 8008a12:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8008a14:	47b8      	blx	r7
 8008a16:	2800      	cmp	r0, #0
 8008a18:	dd73      	ble.n	8008b02 <__sfvwrite_r+0x13a>
 8008a1a:	68b3      	ldr	r3, [r6, #8]
 8008a1c:	1a1b      	subs	r3, r3, r0
 8008a1e:	4482      	add	sl, r0
 8008a20:	ebc0 0808 	rsb	r8, r0, r8
 8008a24:	60b3      	str	r3, [r6, #8]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d1e9      	bne.n	80089fe <__sfvwrite_r+0x36>
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	b003      	add	sp, #12
 8008a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a32:	4648      	mov	r0, r9
 8008a34:	4621      	mov	r1, r4
 8008a36:	f7fe fce7 	bl	8007408 <__swsetup_r>
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	f040 8145 	bne.w	8008cca <__sfvwrite_r+0x302>
 8008a40:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 8008a44:	6835      	ldr	r5, [r6, #0]
 8008a46:	f00e 0802 	and.w	r8, lr, #2
 8008a4a:	fa1f f088 	uxth.w	r0, r8
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	d1d0      	bne.n	80089f4 <__sfvwrite_r+0x2c>
 8008a52:	f01e 0b01 	ands.w	fp, lr, #1
 8008a56:	d15d      	bne.n	8008b14 <__sfvwrite_r+0x14c>
 8008a58:	46d8      	mov	r8, fp
 8008a5a:	f1b8 0f00 	cmp.w	r8, #0
 8008a5e:	d025      	beq.n	8008aac <__sfvwrite_r+0xe4>
 8008a60:	f41e 7f00 	tst.w	lr, #512	; 0x200
 8008a64:	68a7      	ldr	r7, [r4, #8]
 8008a66:	d02f      	beq.n	8008ac8 <__sfvwrite_r+0x100>
 8008a68:	45b8      	cmp	r8, r7
 8008a6a:	46ba      	mov	sl, r7
 8008a6c:	f0c0 80a9 	bcc.w	8008bc2 <__sfvwrite_r+0x1fa>
 8008a70:	f41e 6f90 	tst.w	lr, #1152	; 0x480
 8008a74:	f040 80b6 	bne.w	8008be4 <__sfvwrite_r+0x21c>
 8008a78:	6820      	ldr	r0, [r4, #0]
 8008a7a:	4652      	mov	r2, sl
 8008a7c:	4659      	mov	r1, fp
 8008a7e:	f000 fcbb 	bl	80093f8 <memmove>
 8008a82:	68a0      	ldr	r0, [r4, #8]
 8008a84:	6822      	ldr	r2, [r4, #0]
 8008a86:	1bc0      	subs	r0, r0, r7
 8008a88:	eb02 030a 	add.w	r3, r2, sl
 8008a8c:	60a0      	str	r0, [r4, #8]
 8008a8e:	6023      	str	r3, [r4, #0]
 8008a90:	4640      	mov	r0, r8
 8008a92:	68b3      	ldr	r3, [r6, #8]
 8008a94:	1a1b      	subs	r3, r3, r0
 8008a96:	4483      	add	fp, r0
 8008a98:	ebc0 0808 	rsb	r8, r0, r8
 8008a9c:	60b3      	str	r3, [r6, #8]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d0c3      	beq.n	8008a2a <__sfvwrite_r+0x62>
 8008aa2:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 8008aa6:	f1b8 0f00 	cmp.w	r8, #0
 8008aaa:	d1d9      	bne.n	8008a60 <__sfvwrite_r+0x98>
 8008aac:	f8d5 b000 	ldr.w	fp, [r5]
 8008ab0:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8008ab4:	3508      	adds	r5, #8
 8008ab6:	e7d0      	b.n	8008a5a <__sfvwrite_r+0x92>
 8008ab8:	f8d5 a000 	ldr.w	sl, [r5]
 8008abc:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8008ac0:	3508      	adds	r5, #8
 8008ac2:	e79c      	b.n	80089fe <__sfvwrite_r+0x36>
 8008ac4:	2000      	movs	r0, #0
 8008ac6:	4770      	bx	lr
 8008ac8:	6820      	ldr	r0, [r4, #0]
 8008aca:	6923      	ldr	r3, [r4, #16]
 8008acc:	4298      	cmp	r0, r3
 8008ace:	d803      	bhi.n	8008ad8 <__sfvwrite_r+0x110>
 8008ad0:	6962      	ldr	r2, [r4, #20]
 8008ad2:	4590      	cmp	r8, r2
 8008ad4:	f080 80b9 	bcs.w	8008c4a <__sfvwrite_r+0x282>
 8008ad8:	4547      	cmp	r7, r8
 8008ada:	bf28      	it	cs
 8008adc:	4647      	movcs	r7, r8
 8008ade:	463a      	mov	r2, r7
 8008ae0:	4659      	mov	r1, fp
 8008ae2:	f000 fc89 	bl	80093f8 <memmove>
 8008ae6:	68a3      	ldr	r3, [r4, #8]
 8008ae8:	6822      	ldr	r2, [r4, #0]
 8008aea:	1bdb      	subs	r3, r3, r7
 8008aec:	443a      	add	r2, r7
 8008aee:	60a3      	str	r3, [r4, #8]
 8008af0:	6022      	str	r2, [r4, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d14a      	bne.n	8008b8c <__sfvwrite_r+0x1c4>
 8008af6:	4648      	mov	r0, r9
 8008af8:	4621      	mov	r1, r4
 8008afa:	f7ff fd8b 	bl	8008614 <_fflush_r>
 8008afe:	2800      	cmp	r0, #0
 8008b00:	d044      	beq.n	8008b8c <__sfvwrite_r+0x1c4>
 8008b02:	89a3      	ldrh	r3, [r4, #12]
 8008b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b0c:	81a3      	strh	r3, [r4, #12]
 8008b0e:	b003      	add	sp, #12
 8008b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b14:	4680      	mov	r8, r0
 8008b16:	9000      	str	r0, [sp, #0]
 8008b18:	4683      	mov	fp, r0
 8008b1a:	4682      	mov	sl, r0
 8008b1c:	f1ba 0f00 	cmp.w	sl, #0
 8008b20:	d02c      	beq.n	8008b7c <__sfvwrite_r+0x1b4>
 8008b22:	9b00      	ldr	r3, [sp, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d050      	beq.n	8008bca <__sfvwrite_r+0x202>
 8008b28:	6820      	ldr	r0, [r4, #0]
 8008b2a:	6921      	ldr	r1, [r4, #16]
 8008b2c:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8008b30:	6962      	ldr	r2, [r4, #20]
 8008b32:	45d0      	cmp	r8, sl
 8008b34:	4643      	mov	r3, r8
 8008b36:	bf28      	it	cs
 8008b38:	4653      	movcs	r3, sl
 8008b3a:	4288      	cmp	r0, r1
 8008b3c:	461f      	mov	r7, r3
 8008b3e:	d904      	bls.n	8008b4a <__sfvwrite_r+0x182>
 8008b40:	eb0e 0c02 	add.w	ip, lr, r2
 8008b44:	4563      	cmp	r3, ip
 8008b46:	f300 8092 	bgt.w	8008c6e <__sfvwrite_r+0x2a6>
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	db20      	blt.n	8008b90 <__sfvwrite_r+0x1c8>
 8008b4e:	4613      	mov	r3, r2
 8008b50:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8008b52:	69e1      	ldr	r1, [r4, #28]
 8008b54:	4648      	mov	r0, r9
 8008b56:	465a      	mov	r2, fp
 8008b58:	47b8      	blx	r7
 8008b5a:	1e07      	subs	r7, r0, #0
 8008b5c:	ddd1      	ble.n	8008b02 <__sfvwrite_r+0x13a>
 8008b5e:	ebb8 0807 	subs.w	r8, r8, r7
 8008b62:	d025      	beq.n	8008bb0 <__sfvwrite_r+0x1e8>
 8008b64:	68b3      	ldr	r3, [r6, #8]
 8008b66:	1bdb      	subs	r3, r3, r7
 8008b68:	44bb      	add	fp, r7
 8008b6a:	ebc7 0a0a 	rsb	sl, r7, sl
 8008b6e:	60b3      	str	r3, [r6, #8]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f43f af5a 	beq.w	8008a2a <__sfvwrite_r+0x62>
 8008b76:	f1ba 0f00 	cmp.w	sl, #0
 8008b7a:	d1d2      	bne.n	8008b22 <__sfvwrite_r+0x15a>
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	f8d5 b000 	ldr.w	fp, [r5]
 8008b82:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8008b86:	9300      	str	r3, [sp, #0]
 8008b88:	3508      	adds	r5, #8
 8008b8a:	e7c7      	b.n	8008b1c <__sfvwrite_r+0x154>
 8008b8c:	4638      	mov	r0, r7
 8008b8e:	e780      	b.n	8008a92 <__sfvwrite_r+0xca>
 8008b90:	461a      	mov	r2, r3
 8008b92:	4659      	mov	r1, fp
 8008b94:	9301      	str	r3, [sp, #4]
 8008b96:	f000 fc2f 	bl	80093f8 <memmove>
 8008b9a:	68a2      	ldr	r2, [r4, #8]
 8008b9c:	6821      	ldr	r1, [r4, #0]
 8008b9e:	9b01      	ldr	r3, [sp, #4]
 8008ba0:	ebb8 0807 	subs.w	r8, r8, r7
 8008ba4:	eba2 0203 	sub.w	r2, r2, r3
 8008ba8:	440b      	add	r3, r1
 8008baa:	60a2      	str	r2, [r4, #8]
 8008bac:	6023      	str	r3, [r4, #0]
 8008bae:	d1d9      	bne.n	8008b64 <__sfvwrite_r+0x19c>
 8008bb0:	4648      	mov	r0, r9
 8008bb2:	4621      	mov	r1, r4
 8008bb4:	f7ff fd2e 	bl	8008614 <_fflush_r>
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	d1a2      	bne.n	8008b02 <__sfvwrite_r+0x13a>
 8008bbc:	f8cd 8000 	str.w	r8, [sp]
 8008bc0:	e7d0      	b.n	8008b64 <__sfvwrite_r+0x19c>
 8008bc2:	6820      	ldr	r0, [r4, #0]
 8008bc4:	4647      	mov	r7, r8
 8008bc6:	46c2      	mov	sl, r8
 8008bc8:	e757      	b.n	8008a7a <__sfvwrite_r+0xb2>
 8008bca:	4658      	mov	r0, fp
 8008bcc:	210a      	movs	r1, #10
 8008bce:	4652      	mov	r2, sl
 8008bd0:	f000 fbc8 	bl	8009364 <memchr>
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	d073      	beq.n	8008cc0 <__sfvwrite_r+0x2f8>
 8008bd8:	3001      	adds	r0, #1
 8008bda:	2301      	movs	r3, #1
 8008bdc:	ebcb 0800 	rsb	r8, fp, r0
 8008be0:	9300      	str	r3, [sp, #0]
 8008be2:	e7a1      	b.n	8008b28 <__sfvwrite_r+0x160>
 8008be4:	6967      	ldr	r7, [r4, #20]
 8008be6:	6921      	ldr	r1, [r4, #16]
 8008be8:	6823      	ldr	r3, [r4, #0]
 8008bea:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8008bee:	1a5b      	subs	r3, r3, r1
 8008bf0:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8008bf4:	1c58      	adds	r0, r3, #1
 8008bf6:	107f      	asrs	r7, r7, #1
 8008bf8:	4440      	add	r0, r8
 8008bfa:	4287      	cmp	r7, r0
 8008bfc:	463a      	mov	r2, r7
 8008bfe:	bf3c      	itt	cc
 8008c00:	4607      	movcc	r7, r0
 8008c02:	463a      	movcc	r2, r7
 8008c04:	f41e 6f80 	tst.w	lr, #1024	; 0x400
 8008c08:	9300      	str	r3, [sp, #0]
 8008c0a:	d046      	beq.n	8008c9a <__sfvwrite_r+0x2d2>
 8008c0c:	4611      	mov	r1, r2
 8008c0e:	4648      	mov	r0, r9
 8008c10:	f000 f916 	bl	8008e40 <_malloc_r>
 8008c14:	9b00      	ldr	r3, [sp, #0]
 8008c16:	4682      	mov	sl, r0
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	d059      	beq.n	8008cd0 <__sfvwrite_r+0x308>
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	6921      	ldr	r1, [r4, #16]
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	f7f7 fafd 	bl	8000220 <memcpy>
 8008c26:	89a2      	ldrh	r2, [r4, #12]
 8008c28:	9b00      	ldr	r3, [sp, #0]
 8008c2a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8008c2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008c32:	81a2      	strh	r2, [r4, #12]
 8008c34:	eb0a 0003 	add.w	r0, sl, r3
 8008c38:	1afb      	subs	r3, r7, r3
 8008c3a:	f8c4 a010 	str.w	sl, [r4, #16]
 8008c3e:	6167      	str	r7, [r4, #20]
 8008c40:	6020      	str	r0, [r4, #0]
 8008c42:	60a3      	str	r3, [r4, #8]
 8008c44:	4647      	mov	r7, r8
 8008c46:	46c2      	mov	sl, r8
 8008c48:	e717      	b.n	8008a7a <__sfvwrite_r+0xb2>
 8008c4a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008c4e:	4543      	cmp	r3, r8
 8008c50:	bf28      	it	cs
 8008c52:	4643      	movcs	r3, r8
 8008c54:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8008c56:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c5a:	4648      	mov	r0, r9
 8008c5c:	fb03 f302 	mul.w	r3, r3, r2
 8008c60:	69e1      	ldr	r1, [r4, #28]
 8008c62:	465a      	mov	r2, fp
 8008c64:	47b8      	blx	r7
 8008c66:	2800      	cmp	r0, #0
 8008c68:	f73f af13 	bgt.w	8008a92 <__sfvwrite_r+0xca>
 8008c6c:	e749      	b.n	8008b02 <__sfvwrite_r+0x13a>
 8008c6e:	4662      	mov	r2, ip
 8008c70:	4659      	mov	r1, fp
 8008c72:	f8cd c004 	str.w	ip, [sp, #4]
 8008c76:	f000 fbbf 	bl	80093f8 <memmove>
 8008c7a:	6823      	ldr	r3, [r4, #0]
 8008c7c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8008c80:	4463      	add	r3, ip
 8008c82:	6023      	str	r3, [r4, #0]
 8008c84:	4648      	mov	r0, r9
 8008c86:	4621      	mov	r1, r4
 8008c88:	f7ff fcc4 	bl	8008614 <_fflush_r>
 8008c8c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8008c90:	2800      	cmp	r0, #0
 8008c92:	f47f af36 	bne.w	8008b02 <__sfvwrite_r+0x13a>
 8008c96:	4667      	mov	r7, ip
 8008c98:	e761      	b.n	8008b5e <__sfvwrite_r+0x196>
 8008c9a:	4648      	mov	r0, r9
 8008c9c:	f000 ff36 	bl	8009b0c <_realloc_r>
 8008ca0:	9b00      	ldr	r3, [sp, #0]
 8008ca2:	4682      	mov	sl, r0
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	d1c5      	bne.n	8008c34 <__sfvwrite_r+0x26c>
 8008ca8:	4648      	mov	r0, r9
 8008caa:	6921      	ldr	r1, [r4, #16]
 8008cac:	f7ff fdb4 	bl	8008818 <_free_r>
 8008cb0:	89a3      	ldrh	r3, [r4, #12]
 8008cb2:	220c      	movs	r2, #12
 8008cb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	f8c9 2000 	str.w	r2, [r9]
 8008cbe:	e721      	b.n	8008b04 <__sfvwrite_r+0x13c>
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	f10a 0801 	add.w	r8, sl, #1
 8008cc6:	9300      	str	r3, [sp, #0]
 8008cc8:	e72e      	b.n	8008b28 <__sfvwrite_r+0x160>
 8008cca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cce:	e6ad      	b.n	8008a2c <__sfvwrite_r+0x64>
 8008cd0:	230c      	movs	r3, #12
 8008cd2:	f8c9 3000 	str.w	r3, [r9]
 8008cd6:	89a3      	ldrh	r3, [r4, #12]
 8008cd8:	e714      	b.n	8008b04 <__sfvwrite_r+0x13c>
 8008cda:	bf00      	nop
 8008cdc:	7ffffc00 	.word	0x7ffffc00

08008ce0 <_fwalk_reent>:
 8008ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ce4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8008ce8:	d01f      	beq.n	8008d2a <_fwalk_reent+0x4a>
 8008cea:	4688      	mov	r8, r1
 8008cec:	4606      	mov	r6, r0
 8008cee:	f04f 0900 	mov.w	r9, #0
 8008cf2:	687d      	ldr	r5, [r7, #4]
 8008cf4:	68bc      	ldr	r4, [r7, #8]
 8008cf6:	3d01      	subs	r5, #1
 8008cf8:	d411      	bmi.n	8008d1e <_fwalk_reent+0x3e>
 8008cfa:	89a3      	ldrh	r3, [r4, #12]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8008d02:	d908      	bls.n	8008d16 <_fwalk_reent+0x36>
 8008d04:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	4621      	mov	r1, r4
 8008d0c:	4630      	mov	r0, r6
 8008d0e:	d002      	beq.n	8008d16 <_fwalk_reent+0x36>
 8008d10:	47c0      	blx	r8
 8008d12:	ea49 0900 	orr.w	r9, r9, r0
 8008d16:	1c6b      	adds	r3, r5, #1
 8008d18:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8008d1c:	d1ed      	bne.n	8008cfa <_fwalk_reent+0x1a>
 8008d1e:	683f      	ldr	r7, [r7, #0]
 8008d20:	2f00      	cmp	r7, #0
 8008d22:	d1e6      	bne.n	8008cf2 <_fwalk_reent+0x12>
 8008d24:	4648      	mov	r0, r9
 8008d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d2a:	46b9      	mov	r9, r7
 8008d2c:	4648      	mov	r0, r9
 8008d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d32:	bf00      	nop

08008d34 <__locale_charset>:
 8008d34:	4800      	ldr	r0, [pc, #0]	; (8008d38 <__locale_charset+0x4>)
 8008d36:	4770      	bx	lr
 8008d38:	20000604 	.word	0x20000604

08008d3c <__locale_mb_cur_max>:
 8008d3c:	4b01      	ldr	r3, [pc, #4]	; (8008d44 <__locale_mb_cur_max+0x8>)
 8008d3e:	6818      	ldr	r0, [r3, #0]
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	20000624 	.word	0x20000624

08008d48 <_localeconv_r>:
 8008d48:	4800      	ldr	r0, [pc, #0]	; (8008d4c <_localeconv_r+0x4>)
 8008d4a:	4770      	bx	lr
 8008d4c:	200005cc 	.word	0x200005cc

08008d50 <__smakebuf_r>:
 8008d50:	898b      	ldrh	r3, [r1, #12]
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	f012 0f02 	tst.w	r2, #2
 8008d58:	d13c      	bne.n	8008dd4 <__smakebuf_r+0x84>
 8008d5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d5c:	460c      	mov	r4, r1
 8008d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d62:	2900      	cmp	r1, #0
 8008d64:	b091      	sub	sp, #68	; 0x44
 8008d66:	4605      	mov	r5, r0
 8008d68:	db19      	blt.n	8008d9e <__smakebuf_r+0x4e>
 8008d6a:	aa01      	add	r2, sp, #4
 8008d6c:	f7f9 fa57 	bl	800221e <_fstat_r>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	db12      	blt.n	8008d9a <__smakebuf_r+0x4a>
 8008d74:	9b02      	ldr	r3, [sp, #8]
 8008d76:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008d7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d7e:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
 8008d82:	fab7 f787 	clz	r7, r7
 8008d86:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8008d8a:	d02a      	beq.n	8008de2 <__smakebuf_r+0x92>
 8008d8c:	89a3      	ldrh	r3, [r4, #12]
 8008d8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008d92:	81a3      	strh	r3, [r4, #12]
 8008d94:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8008d98:	e00b      	b.n	8008db2 <__smakebuf_r+0x62>
 8008d9a:	89a3      	ldrh	r3, [r4, #12]
 8008d9c:	b29a      	uxth	r2, r3
 8008d9e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008da2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008da6:	81a3      	strh	r3, [r4, #12]
 8008da8:	bf0c      	ite	eq
 8008daa:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 8008dae:	2640      	movne	r6, #64	; 0x40
 8008db0:	2700      	movs	r7, #0
 8008db2:	4628      	mov	r0, r5
 8008db4:	4631      	mov	r1, r6
 8008db6:	f000 f843 	bl	8008e40 <_malloc_r>
 8008dba:	89a3      	ldrh	r3, [r4, #12]
 8008dbc:	b340      	cbz	r0, 8008e10 <__smakebuf_r+0xc0>
 8008dbe:	4a1a      	ldr	r2, [pc, #104]	; (8008e28 <__smakebuf_r+0xd8>)
 8008dc0:	63ea      	str	r2, [r5, #60]	; 0x3c
 8008dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dc6:	81a3      	strh	r3, [r4, #12]
 8008dc8:	6020      	str	r0, [r4, #0]
 8008dca:	6120      	str	r0, [r4, #16]
 8008dcc:	6166      	str	r6, [r4, #20]
 8008dce:	b99f      	cbnz	r7, 8008df8 <__smakebuf_r+0xa8>
 8008dd0:	b011      	add	sp, #68	; 0x44
 8008dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dd4:	f101 0343 	add.w	r3, r1, #67	; 0x43
 8008dd8:	2201      	movs	r2, #1
 8008dda:	600b      	str	r3, [r1, #0]
 8008ddc:	610b      	str	r3, [r1, #16]
 8008dde:	614a      	str	r2, [r1, #20]
 8008de0:	4770      	bx	lr
 8008de2:	4b12      	ldr	r3, [pc, #72]	; (8008e2c <__smakebuf_r+0xdc>)
 8008de4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d1d0      	bne.n	8008d8c <__smakebuf_r+0x3c>
 8008dea:	89a3      	ldrh	r3, [r4, #12]
 8008dec:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8008df0:	4333      	orrs	r3, r6
 8008df2:	81a3      	strh	r3, [r4, #12]
 8008df4:	64e6      	str	r6, [r4, #76]	; 0x4c
 8008df6:	e7dc      	b.n	8008db2 <__smakebuf_r+0x62>
 8008df8:	4628      	mov	r0, r5
 8008dfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dfe:	f7f9 fa13 	bl	8002228 <_isatty_r>
 8008e02:	2800      	cmp	r0, #0
 8008e04:	d0e4      	beq.n	8008dd0 <__smakebuf_r+0x80>
 8008e06:	89a3      	ldrh	r3, [r4, #12]
 8008e08:	f043 0301 	orr.w	r3, r3, #1
 8008e0c:	81a3      	strh	r3, [r4, #12]
 8008e0e:	e7df      	b.n	8008dd0 <__smakebuf_r+0x80>
 8008e10:	059a      	lsls	r2, r3, #22
 8008e12:	d4dd      	bmi.n	8008dd0 <__smakebuf_r+0x80>
 8008e14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e18:	f043 0302 	orr.w	r3, r3, #2
 8008e1c:	2101      	movs	r1, #1
 8008e1e:	81a3      	strh	r3, [r4, #12]
 8008e20:	6022      	str	r2, [r4, #0]
 8008e22:	6122      	str	r2, [r4, #16]
 8008e24:	6161      	str	r1, [r4, #20]
 8008e26:	e7d3      	b.n	8008dd0 <__smakebuf_r+0x80>
 8008e28:	08008641 	.word	0x08008641
 8008e2c:	08009fb1 	.word	0x08009fb1

08008e30 <malloc>:
 8008e30:	4b02      	ldr	r3, [pc, #8]	; (8008e3c <malloc+0xc>)
 8008e32:	4601      	mov	r1, r0
 8008e34:	6818      	ldr	r0, [r3, #0]
 8008e36:	f000 b803 	b.w	8008e40 <_malloc_r>
 8008e3a:	bf00      	nop
 8008e3c:	200005c8 	.word	0x200005c8

08008e40 <_malloc_r>:
 8008e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e44:	f101 050b 	add.w	r5, r1, #11
 8008e48:	2d16      	cmp	r5, #22
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	4606      	mov	r6, r0
 8008e4e:	d927      	bls.n	8008ea0 <_malloc_r+0x60>
 8008e50:	f035 0507 	bics.w	r5, r5, #7
 8008e54:	f100 80b6 	bmi.w	8008fc4 <_malloc_r+0x184>
 8008e58:	42a9      	cmp	r1, r5
 8008e5a:	f200 80b3 	bhi.w	8008fc4 <_malloc_r+0x184>
 8008e5e:	f000 fb2f 	bl	80094c0 <__malloc_lock>
 8008e62:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8008e66:	d222      	bcs.n	8008eae <_malloc_r+0x6e>
 8008e68:	4fc2      	ldr	r7, [pc, #776]	; (8009174 <_malloc_r+0x334>)
 8008e6a:	08e8      	lsrs	r0, r5, #3
 8008e6c:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 8008e70:	68dc      	ldr	r4, [r3, #12]
 8008e72:	429c      	cmp	r4, r3
 8008e74:	f000 81c8 	beq.w	8009208 <_malloc_r+0x3c8>
 8008e78:	6863      	ldr	r3, [r4, #4]
 8008e7a:	68e1      	ldr	r1, [r4, #12]
 8008e7c:	68a5      	ldr	r5, [r4, #8]
 8008e7e:	f023 0303 	bic.w	r3, r3, #3
 8008e82:	4423      	add	r3, r4
 8008e84:	4630      	mov	r0, r6
 8008e86:	685a      	ldr	r2, [r3, #4]
 8008e88:	60e9      	str	r1, [r5, #12]
 8008e8a:	f042 0201 	orr.w	r2, r2, #1
 8008e8e:	608d      	str	r5, [r1, #8]
 8008e90:	605a      	str	r2, [r3, #4]
 8008e92:	f000 fb17 	bl	80094c4 <__malloc_unlock>
 8008e96:	3408      	adds	r4, #8
 8008e98:	4620      	mov	r0, r4
 8008e9a:	b003      	add	sp, #12
 8008e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea0:	2910      	cmp	r1, #16
 8008ea2:	f200 808f 	bhi.w	8008fc4 <_malloc_r+0x184>
 8008ea6:	f000 fb0b 	bl	80094c0 <__malloc_lock>
 8008eaa:	2510      	movs	r5, #16
 8008eac:	e7dc      	b.n	8008e68 <_malloc_r+0x28>
 8008eae:	0a68      	lsrs	r0, r5, #9
 8008eb0:	f000 808f 	beq.w	8008fd2 <_malloc_r+0x192>
 8008eb4:	2804      	cmp	r0, #4
 8008eb6:	f200 8154 	bhi.w	8009162 <_malloc_r+0x322>
 8008eba:	09a8      	lsrs	r0, r5, #6
 8008ebc:	3038      	adds	r0, #56	; 0x38
 8008ebe:	0041      	lsls	r1, r0, #1
 8008ec0:	4fac      	ldr	r7, [pc, #688]	; (8009174 <_malloc_r+0x334>)
 8008ec2:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8008ec6:	68cc      	ldr	r4, [r1, #12]
 8008ec8:	42a1      	cmp	r1, r4
 8008eca:	d106      	bne.n	8008eda <_malloc_r+0x9a>
 8008ecc:	e00c      	b.n	8008ee8 <_malloc_r+0xa8>
 8008ece:	2a00      	cmp	r2, #0
 8008ed0:	f280 8082 	bge.w	8008fd8 <_malloc_r+0x198>
 8008ed4:	68e4      	ldr	r4, [r4, #12]
 8008ed6:	42a1      	cmp	r1, r4
 8008ed8:	d006      	beq.n	8008ee8 <_malloc_r+0xa8>
 8008eda:	6863      	ldr	r3, [r4, #4]
 8008edc:	f023 0303 	bic.w	r3, r3, #3
 8008ee0:	1b5a      	subs	r2, r3, r5
 8008ee2:	2a0f      	cmp	r2, #15
 8008ee4:	ddf3      	ble.n	8008ece <_malloc_r+0x8e>
 8008ee6:	3801      	subs	r0, #1
 8008ee8:	3001      	adds	r0, #1
 8008eea:	49a2      	ldr	r1, [pc, #648]	; (8009174 <_malloc_r+0x334>)
 8008eec:	693c      	ldr	r4, [r7, #16]
 8008eee:	f101 0e08 	add.w	lr, r1, #8
 8008ef2:	4574      	cmp	r4, lr
 8008ef4:	f000 817d 	beq.w	80091f2 <_malloc_r+0x3b2>
 8008ef8:	6863      	ldr	r3, [r4, #4]
 8008efa:	f023 0303 	bic.w	r3, r3, #3
 8008efe:	1b5a      	subs	r2, r3, r5
 8008f00:	2a0f      	cmp	r2, #15
 8008f02:	f300 8163 	bgt.w	80091cc <_malloc_r+0x38c>
 8008f06:	2a00      	cmp	r2, #0
 8008f08:	f8c1 e014 	str.w	lr, [r1, #20]
 8008f0c:	f8c1 e010 	str.w	lr, [r1, #16]
 8008f10:	da73      	bge.n	8008ffa <_malloc_r+0x1ba>
 8008f12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f16:	f080 8139 	bcs.w	800918c <_malloc_r+0x34c>
 8008f1a:	08db      	lsrs	r3, r3, #3
 8008f1c:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 8008f20:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 8008f24:	684a      	ldr	r2, [r1, #4]
 8008f26:	f8d8 9008 	ldr.w	r9, [r8, #8]
 8008f2a:	f8c4 9008 	str.w	r9, [r4, #8]
 8008f2e:	2301      	movs	r3, #1
 8008f30:	fa03 f30c 	lsl.w	r3, r3, ip
 8008f34:	4313      	orrs	r3, r2
 8008f36:	f8c4 800c 	str.w	r8, [r4, #12]
 8008f3a:	604b      	str	r3, [r1, #4]
 8008f3c:	f8c8 4008 	str.w	r4, [r8, #8]
 8008f40:	f8c9 400c 	str.w	r4, [r9, #12]
 8008f44:	1082      	asrs	r2, r0, #2
 8008f46:	2401      	movs	r4, #1
 8008f48:	4094      	lsls	r4, r2
 8008f4a:	429c      	cmp	r4, r3
 8008f4c:	d862      	bhi.n	8009014 <_malloc_r+0x1d4>
 8008f4e:	4223      	tst	r3, r4
 8008f50:	d106      	bne.n	8008f60 <_malloc_r+0x120>
 8008f52:	f020 0003 	bic.w	r0, r0, #3
 8008f56:	0064      	lsls	r4, r4, #1
 8008f58:	4223      	tst	r3, r4
 8008f5a:	f100 0004 	add.w	r0, r0, #4
 8008f5e:	d0fa      	beq.n	8008f56 <_malloc_r+0x116>
 8008f60:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
 8008f64:	46c4      	mov	ip, r8
 8008f66:	4681      	mov	r9, r0
 8008f68:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8008f6c:	459c      	cmp	ip, r3
 8008f6e:	d107      	bne.n	8008f80 <_malloc_r+0x140>
 8008f70:	e141      	b.n	80091f6 <_malloc_r+0x3b6>
 8008f72:	2900      	cmp	r1, #0
 8008f74:	f280 8151 	bge.w	800921a <_malloc_r+0x3da>
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	459c      	cmp	ip, r3
 8008f7c:	f000 813b 	beq.w	80091f6 <_malloc_r+0x3b6>
 8008f80:	685a      	ldr	r2, [r3, #4]
 8008f82:	f022 0203 	bic.w	r2, r2, #3
 8008f86:	1b51      	subs	r1, r2, r5
 8008f88:	290f      	cmp	r1, #15
 8008f8a:	ddf2      	ble.n	8008f72 <_malloc_r+0x132>
 8008f8c:	461c      	mov	r4, r3
 8008f8e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8008f92:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8008f96:	195a      	adds	r2, r3, r5
 8008f98:	f045 0901 	orr.w	r9, r5, #1
 8008f9c:	f041 0501 	orr.w	r5, r1, #1
 8008fa0:	f8c3 9004 	str.w	r9, [r3, #4]
 8008fa4:	4630      	mov	r0, r6
 8008fa6:	f8c8 c00c 	str.w	ip, [r8, #12]
 8008faa:	f8cc 8008 	str.w	r8, [ip, #8]
 8008fae:	617a      	str	r2, [r7, #20]
 8008fb0:	613a      	str	r2, [r7, #16]
 8008fb2:	f8c2 e00c 	str.w	lr, [r2, #12]
 8008fb6:	f8c2 e008 	str.w	lr, [r2, #8]
 8008fba:	6055      	str	r5, [r2, #4]
 8008fbc:	5051      	str	r1, [r2, r1]
 8008fbe:	f000 fa81 	bl	80094c4 <__malloc_unlock>
 8008fc2:	e769      	b.n	8008e98 <_malloc_r+0x58>
 8008fc4:	2400      	movs	r4, #0
 8008fc6:	230c      	movs	r3, #12
 8008fc8:	4620      	mov	r0, r4
 8008fca:	6033      	str	r3, [r6, #0]
 8008fcc:	b003      	add	sp, #12
 8008fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd2:	217e      	movs	r1, #126	; 0x7e
 8008fd4:	203f      	movs	r0, #63	; 0x3f
 8008fd6:	e773      	b.n	8008ec0 <_malloc_r+0x80>
 8008fd8:	4423      	add	r3, r4
 8008fda:	68e1      	ldr	r1, [r4, #12]
 8008fdc:	685a      	ldr	r2, [r3, #4]
 8008fde:	68a5      	ldr	r5, [r4, #8]
 8008fe0:	f042 0201 	orr.w	r2, r2, #1
 8008fe4:	60e9      	str	r1, [r5, #12]
 8008fe6:	4630      	mov	r0, r6
 8008fe8:	608d      	str	r5, [r1, #8]
 8008fea:	605a      	str	r2, [r3, #4]
 8008fec:	f000 fa6a 	bl	80094c4 <__malloc_unlock>
 8008ff0:	3408      	adds	r4, #8
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	b003      	add	sp, #12
 8008ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ffa:	4423      	add	r3, r4
 8008ffc:	4630      	mov	r0, r6
 8008ffe:	685a      	ldr	r2, [r3, #4]
 8009000:	f042 0201 	orr.w	r2, r2, #1
 8009004:	605a      	str	r2, [r3, #4]
 8009006:	f000 fa5d 	bl	80094c4 <__malloc_unlock>
 800900a:	3408      	adds	r4, #8
 800900c:	4620      	mov	r0, r4
 800900e:	b003      	add	sp, #12
 8009010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009014:	68bc      	ldr	r4, [r7, #8]
 8009016:	6863      	ldr	r3, [r4, #4]
 8009018:	f023 0803 	bic.w	r8, r3, #3
 800901c:	4545      	cmp	r5, r8
 800901e:	d804      	bhi.n	800902a <_malloc_r+0x1ea>
 8009020:	ebc5 0308 	rsb	r3, r5, r8
 8009024:	2b0f      	cmp	r3, #15
 8009026:	f300 808c 	bgt.w	8009142 <_malloc_r+0x302>
 800902a:	4b53      	ldr	r3, [pc, #332]	; (8009178 <_malloc_r+0x338>)
 800902c:	f8df a158 	ldr.w	sl, [pc, #344]	; 8009188 <_malloc_r+0x348>
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	f8da 3000 	ldr.w	r3, [sl]
 8009036:	3301      	adds	r3, #1
 8009038:	442a      	add	r2, r5
 800903a:	eb04 0b08 	add.w	fp, r4, r8
 800903e:	f000 8150 	beq.w	80092e2 <_malloc_r+0x4a2>
 8009042:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009046:	320f      	adds	r2, #15
 8009048:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800904c:	f022 020f 	bic.w	r2, r2, #15
 8009050:	4611      	mov	r1, r2
 8009052:	4630      	mov	r0, r6
 8009054:	9201      	str	r2, [sp, #4]
 8009056:	f7f9 f8c5 	bl	80021e4 <_sbrk_r>
 800905a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800905e:	4681      	mov	r9, r0
 8009060:	9a01      	ldr	r2, [sp, #4]
 8009062:	f000 8147 	beq.w	80092f4 <_malloc_r+0x4b4>
 8009066:	4583      	cmp	fp, r0
 8009068:	f200 80ee 	bhi.w	8009248 <_malloc_r+0x408>
 800906c:	4b43      	ldr	r3, [pc, #268]	; (800917c <_malloc_r+0x33c>)
 800906e:	6819      	ldr	r1, [r3, #0]
 8009070:	45cb      	cmp	fp, r9
 8009072:	4411      	add	r1, r2
 8009074:	6019      	str	r1, [r3, #0]
 8009076:	f000 8142 	beq.w	80092fe <_malloc_r+0x4be>
 800907a:	f8da 0000 	ldr.w	r0, [sl]
 800907e:	f8df e108 	ldr.w	lr, [pc, #264]	; 8009188 <_malloc_r+0x348>
 8009082:	3001      	adds	r0, #1
 8009084:	bf1b      	ittet	ne
 8009086:	ebcb 0b09 	rsbne	fp, fp, r9
 800908a:	4459      	addne	r1, fp
 800908c:	f8ce 9000 	streq.w	r9, [lr]
 8009090:	6019      	strne	r1, [r3, #0]
 8009092:	f019 0107 	ands.w	r1, r9, #7
 8009096:	f000 8107 	beq.w	80092a8 <_malloc_r+0x468>
 800909a:	f1c1 0008 	rsb	r0, r1, #8
 800909e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 80090a2:	4481      	add	r9, r0
 80090a4:	3108      	adds	r1, #8
 80090a6:	444a      	add	r2, r9
 80090a8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80090ac:	ebc2 0a01 	rsb	sl, r2, r1
 80090b0:	4651      	mov	r1, sl
 80090b2:	4630      	mov	r0, r6
 80090b4:	9301      	str	r3, [sp, #4]
 80090b6:	f7f9 f895 	bl	80021e4 <_sbrk_r>
 80090ba:	1c43      	adds	r3, r0, #1
 80090bc:	9b01      	ldr	r3, [sp, #4]
 80090be:	f000 812c 	beq.w	800931a <_malloc_r+0x4da>
 80090c2:	ebc9 0200 	rsb	r2, r9, r0
 80090c6:	4452      	add	r2, sl
 80090c8:	f042 0201 	orr.w	r2, r2, #1
 80090cc:	6819      	ldr	r1, [r3, #0]
 80090ce:	f8c7 9008 	str.w	r9, [r7, #8]
 80090d2:	4451      	add	r1, sl
 80090d4:	42bc      	cmp	r4, r7
 80090d6:	f8c9 2004 	str.w	r2, [r9, #4]
 80090da:	6019      	str	r1, [r3, #0]
 80090dc:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800917c <_malloc_r+0x33c>
 80090e0:	d016      	beq.n	8009110 <_malloc_r+0x2d0>
 80090e2:	f1b8 0f0f 	cmp.w	r8, #15
 80090e6:	f240 80ee 	bls.w	80092c6 <_malloc_r+0x486>
 80090ea:	6862      	ldr	r2, [r4, #4]
 80090ec:	f1a8 030c 	sub.w	r3, r8, #12
 80090f0:	f023 0307 	bic.w	r3, r3, #7
 80090f4:	18e0      	adds	r0, r4, r3
 80090f6:	f002 0201 	and.w	r2, r2, #1
 80090fa:	f04f 0e05 	mov.w	lr, #5
 80090fe:	431a      	orrs	r2, r3
 8009100:	2b0f      	cmp	r3, #15
 8009102:	6062      	str	r2, [r4, #4]
 8009104:	f8c0 e004 	str.w	lr, [r0, #4]
 8009108:	f8c0 e008 	str.w	lr, [r0, #8]
 800910c:	f200 8109 	bhi.w	8009322 <_malloc_r+0x4e2>
 8009110:	4b1b      	ldr	r3, [pc, #108]	; (8009180 <_malloc_r+0x340>)
 8009112:	68bc      	ldr	r4, [r7, #8]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	4291      	cmp	r1, r2
 8009118:	bf88      	it	hi
 800911a:	6019      	strhi	r1, [r3, #0]
 800911c:	4b19      	ldr	r3, [pc, #100]	; (8009184 <_malloc_r+0x344>)
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	4291      	cmp	r1, r2
 8009122:	6862      	ldr	r2, [r4, #4]
 8009124:	bf88      	it	hi
 8009126:	6019      	strhi	r1, [r3, #0]
 8009128:	f022 0203 	bic.w	r2, r2, #3
 800912c:	4295      	cmp	r5, r2
 800912e:	eba2 0305 	sub.w	r3, r2, r5
 8009132:	d801      	bhi.n	8009138 <_malloc_r+0x2f8>
 8009134:	2b0f      	cmp	r3, #15
 8009136:	dc04      	bgt.n	8009142 <_malloc_r+0x302>
 8009138:	4630      	mov	r0, r6
 800913a:	f000 f9c3 	bl	80094c4 <__malloc_unlock>
 800913e:	2400      	movs	r4, #0
 8009140:	e6aa      	b.n	8008e98 <_malloc_r+0x58>
 8009142:	1962      	adds	r2, r4, r5
 8009144:	f043 0301 	orr.w	r3, r3, #1
 8009148:	f045 0501 	orr.w	r5, r5, #1
 800914c:	6065      	str	r5, [r4, #4]
 800914e:	4630      	mov	r0, r6
 8009150:	60ba      	str	r2, [r7, #8]
 8009152:	6053      	str	r3, [r2, #4]
 8009154:	f000 f9b6 	bl	80094c4 <__malloc_unlock>
 8009158:	3408      	adds	r4, #8
 800915a:	4620      	mov	r0, r4
 800915c:	b003      	add	sp, #12
 800915e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009162:	2814      	cmp	r0, #20
 8009164:	d968      	bls.n	8009238 <_malloc_r+0x3f8>
 8009166:	2854      	cmp	r0, #84	; 0x54
 8009168:	f200 8097 	bhi.w	800929a <_malloc_r+0x45a>
 800916c:	0b28      	lsrs	r0, r5, #12
 800916e:	306e      	adds	r0, #110	; 0x6e
 8009170:	0041      	lsls	r1, r0, #1
 8009172:	e6a5      	b.n	8008ec0 <_malloc_r+0x80>
 8009174:	20000628 	.word	0x20000628
 8009178:	20000de8 	.word	0x20000de8
 800917c:	20000dec 	.word	0x20000dec
 8009180:	20000de4 	.word	0x20000de4
 8009184:	20000de0 	.word	0x20000de0
 8009188:	20000a34 	.word	0x20000a34
 800918c:	0a5a      	lsrs	r2, r3, #9
 800918e:	2a04      	cmp	r2, #4
 8009190:	d955      	bls.n	800923e <_malloc_r+0x3fe>
 8009192:	2a14      	cmp	r2, #20
 8009194:	f200 80a7 	bhi.w	80092e6 <_malloc_r+0x4a6>
 8009198:	325b      	adds	r2, #91	; 0x5b
 800919a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800919e:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 80091a2:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009360 <_malloc_r+0x520>
 80091a6:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80091aa:	4561      	cmp	r1, ip
 80091ac:	d07f      	beq.n	80092ae <_malloc_r+0x46e>
 80091ae:	684a      	ldr	r2, [r1, #4]
 80091b0:	f022 0203 	bic.w	r2, r2, #3
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d202      	bcs.n	80091be <_malloc_r+0x37e>
 80091b8:	6889      	ldr	r1, [r1, #8]
 80091ba:	458c      	cmp	ip, r1
 80091bc:	d1f7      	bne.n	80091ae <_malloc_r+0x36e>
 80091be:	68ca      	ldr	r2, [r1, #12]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	60e2      	str	r2, [r4, #12]
 80091c4:	60a1      	str	r1, [r4, #8]
 80091c6:	6094      	str	r4, [r2, #8]
 80091c8:	60cc      	str	r4, [r1, #12]
 80091ca:	e6bb      	b.n	8008f44 <_malloc_r+0x104>
 80091cc:	1963      	adds	r3, r4, r5
 80091ce:	f042 0701 	orr.w	r7, r2, #1
 80091d2:	f045 0501 	orr.w	r5, r5, #1
 80091d6:	6065      	str	r5, [r4, #4]
 80091d8:	4630      	mov	r0, r6
 80091da:	614b      	str	r3, [r1, #20]
 80091dc:	610b      	str	r3, [r1, #16]
 80091de:	f8c3 e00c 	str.w	lr, [r3, #12]
 80091e2:	f8c3 e008 	str.w	lr, [r3, #8]
 80091e6:	605f      	str	r7, [r3, #4]
 80091e8:	509a      	str	r2, [r3, r2]
 80091ea:	3408      	adds	r4, #8
 80091ec:	f000 f96a 	bl	80094c4 <__malloc_unlock>
 80091f0:	e652      	b.n	8008e98 <_malloc_r+0x58>
 80091f2:	684b      	ldr	r3, [r1, #4]
 80091f4:	e6a6      	b.n	8008f44 <_malloc_r+0x104>
 80091f6:	f109 0901 	add.w	r9, r9, #1
 80091fa:	f019 0f03 	tst.w	r9, #3
 80091fe:	f10c 0c08 	add.w	ip, ip, #8
 8009202:	f47f aeb1 	bne.w	8008f68 <_malloc_r+0x128>
 8009206:	e02c      	b.n	8009262 <_malloc_r+0x422>
 8009208:	f104 0308 	add.w	r3, r4, #8
 800920c:	6964      	ldr	r4, [r4, #20]
 800920e:	42a3      	cmp	r3, r4
 8009210:	bf08      	it	eq
 8009212:	3002      	addeq	r0, #2
 8009214:	f43f ae69 	beq.w	8008eea <_malloc_r+0xaa>
 8009218:	e62e      	b.n	8008e78 <_malloc_r+0x38>
 800921a:	441a      	add	r2, r3
 800921c:	461c      	mov	r4, r3
 800921e:	6851      	ldr	r1, [r2, #4]
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8009226:	f041 0101 	orr.w	r1, r1, #1
 800922a:	6051      	str	r1, [r2, #4]
 800922c:	4630      	mov	r0, r6
 800922e:	60eb      	str	r3, [r5, #12]
 8009230:	609d      	str	r5, [r3, #8]
 8009232:	f000 f947 	bl	80094c4 <__malloc_unlock>
 8009236:	e62f      	b.n	8008e98 <_malloc_r+0x58>
 8009238:	305b      	adds	r0, #91	; 0x5b
 800923a:	0041      	lsls	r1, r0, #1
 800923c:	e640      	b.n	8008ec0 <_malloc_r+0x80>
 800923e:	099a      	lsrs	r2, r3, #6
 8009240:	3238      	adds	r2, #56	; 0x38
 8009242:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8009246:	e7aa      	b.n	800919e <_malloc_r+0x35e>
 8009248:	42bc      	cmp	r4, r7
 800924a:	4b45      	ldr	r3, [pc, #276]	; (8009360 <_malloc_r+0x520>)
 800924c:	f43f af0e 	beq.w	800906c <_malloc_r+0x22c>
 8009250:	689c      	ldr	r4, [r3, #8]
 8009252:	6862      	ldr	r2, [r4, #4]
 8009254:	f022 0203 	bic.w	r2, r2, #3
 8009258:	e768      	b.n	800912c <_malloc_r+0x2ec>
 800925a:	f8d8 8000 	ldr.w	r8, [r8]
 800925e:	4598      	cmp	r8, r3
 8009260:	d17c      	bne.n	800935c <_malloc_r+0x51c>
 8009262:	f010 0f03 	tst.w	r0, #3
 8009266:	f1a8 0308 	sub.w	r3, r8, #8
 800926a:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800926e:	d1f4      	bne.n	800925a <_malloc_r+0x41a>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	ea23 0304 	bic.w	r3, r3, r4
 8009276:	607b      	str	r3, [r7, #4]
 8009278:	0064      	lsls	r4, r4, #1
 800927a:	429c      	cmp	r4, r3
 800927c:	f63f aeca 	bhi.w	8009014 <_malloc_r+0x1d4>
 8009280:	2c00      	cmp	r4, #0
 8009282:	f43f aec7 	beq.w	8009014 <_malloc_r+0x1d4>
 8009286:	4223      	tst	r3, r4
 8009288:	4648      	mov	r0, r9
 800928a:	f47f ae69 	bne.w	8008f60 <_malloc_r+0x120>
 800928e:	0064      	lsls	r4, r4, #1
 8009290:	4223      	tst	r3, r4
 8009292:	f100 0004 	add.w	r0, r0, #4
 8009296:	d0fa      	beq.n	800928e <_malloc_r+0x44e>
 8009298:	e662      	b.n	8008f60 <_malloc_r+0x120>
 800929a:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 800929e:	d818      	bhi.n	80092d2 <_malloc_r+0x492>
 80092a0:	0be8      	lsrs	r0, r5, #15
 80092a2:	3077      	adds	r0, #119	; 0x77
 80092a4:	0041      	lsls	r1, r0, #1
 80092a6:	e60b      	b.n	8008ec0 <_malloc_r+0x80>
 80092a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80092ac:	e6fb      	b.n	80090a6 <_malloc_r+0x266>
 80092ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80092b2:	1092      	asrs	r2, r2, #2
 80092b4:	f04f 0c01 	mov.w	ip, #1
 80092b8:	fa0c f202 	lsl.w	r2, ip, r2
 80092bc:	4313      	orrs	r3, r2
 80092be:	f8c8 3004 	str.w	r3, [r8, #4]
 80092c2:	460a      	mov	r2, r1
 80092c4:	e77d      	b.n	80091c2 <_malloc_r+0x382>
 80092c6:	2301      	movs	r3, #1
 80092c8:	f8c9 3004 	str.w	r3, [r9, #4]
 80092cc:	464c      	mov	r4, r9
 80092ce:	2200      	movs	r2, #0
 80092d0:	e72c      	b.n	800912c <_malloc_r+0x2ec>
 80092d2:	f240 5354 	movw	r3, #1364	; 0x554
 80092d6:	4298      	cmp	r0, r3
 80092d8:	d81c      	bhi.n	8009314 <_malloc_r+0x4d4>
 80092da:	0ca8      	lsrs	r0, r5, #18
 80092dc:	307c      	adds	r0, #124	; 0x7c
 80092de:	0041      	lsls	r1, r0, #1
 80092e0:	e5ee      	b.n	8008ec0 <_malloc_r+0x80>
 80092e2:	3210      	adds	r2, #16
 80092e4:	e6b4      	b.n	8009050 <_malloc_r+0x210>
 80092e6:	2a54      	cmp	r2, #84	; 0x54
 80092e8:	d823      	bhi.n	8009332 <_malloc_r+0x4f2>
 80092ea:	0b1a      	lsrs	r2, r3, #12
 80092ec:	326e      	adds	r2, #110	; 0x6e
 80092ee:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80092f2:	e754      	b.n	800919e <_malloc_r+0x35e>
 80092f4:	68bc      	ldr	r4, [r7, #8]
 80092f6:	6862      	ldr	r2, [r4, #4]
 80092f8:	f022 0203 	bic.w	r2, r2, #3
 80092fc:	e716      	b.n	800912c <_malloc_r+0x2ec>
 80092fe:	f3cb 000b 	ubfx	r0, fp, #0, #12
 8009302:	2800      	cmp	r0, #0
 8009304:	f47f aeb9 	bne.w	800907a <_malloc_r+0x23a>
 8009308:	4442      	add	r2, r8
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	f042 0201 	orr.w	r2, r2, #1
 8009310:	605a      	str	r2, [r3, #4]
 8009312:	e6fd      	b.n	8009110 <_malloc_r+0x2d0>
 8009314:	21fc      	movs	r1, #252	; 0xfc
 8009316:	207e      	movs	r0, #126	; 0x7e
 8009318:	e5d2      	b.n	8008ec0 <_malloc_r+0x80>
 800931a:	2201      	movs	r2, #1
 800931c:	f04f 0a00 	mov.w	sl, #0
 8009320:	e6d4      	b.n	80090cc <_malloc_r+0x28c>
 8009322:	f104 0108 	add.w	r1, r4, #8
 8009326:	4630      	mov	r0, r6
 8009328:	f7ff fa76 	bl	8008818 <_free_r>
 800932c:	f8da 1000 	ldr.w	r1, [sl]
 8009330:	e6ee      	b.n	8009110 <_malloc_r+0x2d0>
 8009332:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009336:	d804      	bhi.n	8009342 <_malloc_r+0x502>
 8009338:	0bda      	lsrs	r2, r3, #15
 800933a:	3277      	adds	r2, #119	; 0x77
 800933c:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8009340:	e72d      	b.n	800919e <_malloc_r+0x35e>
 8009342:	f240 5154 	movw	r1, #1364	; 0x554
 8009346:	428a      	cmp	r2, r1
 8009348:	d804      	bhi.n	8009354 <_malloc_r+0x514>
 800934a:	0c9a      	lsrs	r2, r3, #18
 800934c:	327c      	adds	r2, #124	; 0x7c
 800934e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8009352:	e724      	b.n	800919e <_malloc_r+0x35e>
 8009354:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
 8009358:	227e      	movs	r2, #126	; 0x7e
 800935a:	e720      	b.n	800919e <_malloc_r+0x35e>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	e78b      	b.n	8009278 <_malloc_r+0x438>
 8009360:	20000628 	.word	0x20000628

08009364 <memchr>:
 8009364:	0783      	lsls	r3, r0, #30
 8009366:	b470      	push	{r4, r5, r6}
 8009368:	b2c9      	uxtb	r1, r1
 800936a:	d040      	beq.n	80093ee <memchr+0x8a>
 800936c:	1e54      	subs	r4, r2, #1
 800936e:	2a00      	cmp	r2, #0
 8009370:	d03f      	beq.n	80093f2 <memchr+0x8e>
 8009372:	7803      	ldrb	r3, [r0, #0]
 8009374:	428b      	cmp	r3, r1
 8009376:	bf18      	it	ne
 8009378:	1c43      	addne	r3, r0, #1
 800937a:	d106      	bne.n	800938a <memchr+0x26>
 800937c:	e01d      	b.n	80093ba <memchr+0x56>
 800937e:	b1f4      	cbz	r4, 80093be <memchr+0x5a>
 8009380:	7802      	ldrb	r2, [r0, #0]
 8009382:	428a      	cmp	r2, r1
 8009384:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009388:	d017      	beq.n	80093ba <memchr+0x56>
 800938a:	f013 0f03 	tst.w	r3, #3
 800938e:	4618      	mov	r0, r3
 8009390:	f103 0301 	add.w	r3, r3, #1
 8009394:	d1f3      	bne.n	800937e <memchr+0x1a>
 8009396:	2c03      	cmp	r4, #3
 8009398:	d814      	bhi.n	80093c4 <memchr+0x60>
 800939a:	b184      	cbz	r4, 80093be <memchr+0x5a>
 800939c:	7803      	ldrb	r3, [r0, #0]
 800939e:	428b      	cmp	r3, r1
 80093a0:	d00b      	beq.n	80093ba <memchr+0x56>
 80093a2:	1905      	adds	r5, r0, r4
 80093a4:	1c43      	adds	r3, r0, #1
 80093a6:	e002      	b.n	80093ae <memchr+0x4a>
 80093a8:	7802      	ldrb	r2, [r0, #0]
 80093aa:	428a      	cmp	r2, r1
 80093ac:	d005      	beq.n	80093ba <memchr+0x56>
 80093ae:	42ab      	cmp	r3, r5
 80093b0:	4618      	mov	r0, r3
 80093b2:	f103 0301 	add.w	r3, r3, #1
 80093b6:	d1f7      	bne.n	80093a8 <memchr+0x44>
 80093b8:	2000      	movs	r0, #0
 80093ba:	bc70      	pop	{r4, r5, r6}
 80093bc:	4770      	bx	lr
 80093be:	4620      	mov	r0, r4
 80093c0:	bc70      	pop	{r4, r5, r6}
 80093c2:	4770      	bx	lr
 80093c4:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 80093c8:	4602      	mov	r2, r0
 80093ca:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 80093ce:	4610      	mov	r0, r2
 80093d0:	3204      	adds	r2, #4
 80093d2:	6803      	ldr	r3, [r0, #0]
 80093d4:	4073      	eors	r3, r6
 80093d6:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 80093da:	ea25 0303 	bic.w	r3, r5, r3
 80093de:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80093e2:	d1da      	bne.n	800939a <memchr+0x36>
 80093e4:	3c04      	subs	r4, #4
 80093e6:	2c03      	cmp	r4, #3
 80093e8:	4610      	mov	r0, r2
 80093ea:	d8f0      	bhi.n	80093ce <memchr+0x6a>
 80093ec:	e7d5      	b.n	800939a <memchr+0x36>
 80093ee:	4614      	mov	r4, r2
 80093f0:	e7d1      	b.n	8009396 <memchr+0x32>
 80093f2:	4610      	mov	r0, r2
 80093f4:	e7e1      	b.n	80093ba <memchr+0x56>
 80093f6:	bf00      	nop

080093f8 <memmove>:
 80093f8:	4288      	cmp	r0, r1
 80093fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093fc:	d90d      	bls.n	800941a <memmove+0x22>
 80093fe:	188b      	adds	r3, r1, r2
 8009400:	4298      	cmp	r0, r3
 8009402:	d20a      	bcs.n	800941a <memmove+0x22>
 8009404:	1881      	adds	r1, r0, r2
 8009406:	2a00      	cmp	r2, #0
 8009408:	d054      	beq.n	80094b4 <memmove+0xbc>
 800940a:	1a9a      	subs	r2, r3, r2
 800940c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009410:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009414:	4293      	cmp	r3, r2
 8009416:	d1f9      	bne.n	800940c <memmove+0x14>
 8009418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800941a:	2a0f      	cmp	r2, #15
 800941c:	d948      	bls.n	80094b0 <memmove+0xb8>
 800941e:	ea40 0301 	orr.w	r3, r0, r1
 8009422:	079b      	lsls	r3, r3, #30
 8009424:	d147      	bne.n	80094b6 <memmove+0xbe>
 8009426:	f100 0410 	add.w	r4, r0, #16
 800942a:	f101 0310 	add.w	r3, r1, #16
 800942e:	4615      	mov	r5, r2
 8009430:	f853 6c10 	ldr.w	r6, [r3, #-16]
 8009434:	f844 6c10 	str.w	r6, [r4, #-16]
 8009438:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 800943c:	f844 6c0c 	str.w	r6, [r4, #-12]
 8009440:	f853 6c08 	ldr.w	r6, [r3, #-8]
 8009444:	f844 6c08 	str.w	r6, [r4, #-8]
 8009448:	3d10      	subs	r5, #16
 800944a:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800944e:	f844 6c04 	str.w	r6, [r4, #-4]
 8009452:	2d0f      	cmp	r5, #15
 8009454:	f103 0310 	add.w	r3, r3, #16
 8009458:	f104 0410 	add.w	r4, r4, #16
 800945c:	d8e8      	bhi.n	8009430 <memmove+0x38>
 800945e:	f1a2 0310 	sub.w	r3, r2, #16
 8009462:	f023 030f 	bic.w	r3, r3, #15
 8009466:	f002 0e0f 	and.w	lr, r2, #15
 800946a:	3310      	adds	r3, #16
 800946c:	f1be 0f03 	cmp.w	lr, #3
 8009470:	4419      	add	r1, r3
 8009472:	4403      	add	r3, r0
 8009474:	d921      	bls.n	80094ba <memmove+0xc2>
 8009476:	1f1e      	subs	r6, r3, #4
 8009478:	460d      	mov	r5, r1
 800947a:	4674      	mov	r4, lr
 800947c:	3c04      	subs	r4, #4
 800947e:	f855 7b04 	ldr.w	r7, [r5], #4
 8009482:	f846 7f04 	str.w	r7, [r6, #4]!
 8009486:	2c03      	cmp	r4, #3
 8009488:	d8f8      	bhi.n	800947c <memmove+0x84>
 800948a:	f1ae 0404 	sub.w	r4, lr, #4
 800948e:	f024 0403 	bic.w	r4, r4, #3
 8009492:	3404      	adds	r4, #4
 8009494:	4423      	add	r3, r4
 8009496:	4421      	add	r1, r4
 8009498:	f002 0203 	and.w	r2, r2, #3
 800949c:	b152      	cbz	r2, 80094b4 <memmove+0xbc>
 800949e:	3b01      	subs	r3, #1
 80094a0:	440a      	add	r2, r1
 80094a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094aa:	4291      	cmp	r1, r2
 80094ac:	d1f9      	bne.n	80094a2 <memmove+0xaa>
 80094ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094b0:	4603      	mov	r3, r0
 80094b2:	e7f3      	b.n	800949c <memmove+0xa4>
 80094b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094b6:	4603      	mov	r3, r0
 80094b8:	e7f1      	b.n	800949e <memmove+0xa6>
 80094ba:	4672      	mov	r2, lr
 80094bc:	e7ee      	b.n	800949c <memmove+0xa4>
 80094be:	bf00      	nop

080094c0 <__malloc_lock>:
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop

080094c4 <__malloc_unlock>:
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop

080094c8 <_Balloc>:
 80094c8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80094ca:	b570      	push	{r4, r5, r6, lr}
 80094cc:	4605      	mov	r5, r0
 80094ce:	460c      	mov	r4, r1
 80094d0:	b14b      	cbz	r3, 80094e6 <_Balloc+0x1e>
 80094d2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80094d6:	b180      	cbz	r0, 80094fa <_Balloc+0x32>
 80094d8:	6802      	ldr	r2, [r0, #0]
 80094da:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80094de:	2300      	movs	r3, #0
 80094e0:	6103      	str	r3, [r0, #16]
 80094e2:	60c3      	str	r3, [r0, #12]
 80094e4:	bd70      	pop	{r4, r5, r6, pc}
 80094e6:	2104      	movs	r1, #4
 80094e8:	2221      	movs	r2, #33	; 0x21
 80094ea:	f000 fe63 	bl	800a1b4 <_calloc_r>
 80094ee:	64e8      	str	r0, [r5, #76]	; 0x4c
 80094f0:	4603      	mov	r3, r0
 80094f2:	2800      	cmp	r0, #0
 80094f4:	d1ed      	bne.n	80094d2 <_Balloc+0xa>
 80094f6:	2000      	movs	r0, #0
 80094f8:	bd70      	pop	{r4, r5, r6, pc}
 80094fa:	2101      	movs	r1, #1
 80094fc:	fa01 f604 	lsl.w	r6, r1, r4
 8009500:	1d72      	adds	r2, r6, #5
 8009502:	4628      	mov	r0, r5
 8009504:	0092      	lsls	r2, r2, #2
 8009506:	f000 fe55 	bl	800a1b4 <_calloc_r>
 800950a:	2800      	cmp	r0, #0
 800950c:	d0f3      	beq.n	80094f6 <_Balloc+0x2e>
 800950e:	6044      	str	r4, [r0, #4]
 8009510:	6086      	str	r6, [r0, #8]
 8009512:	e7e4      	b.n	80094de <_Balloc+0x16>

08009514 <_Bfree>:
 8009514:	b131      	cbz	r1, 8009524 <_Bfree+0x10>
 8009516:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009518:	684a      	ldr	r2, [r1, #4]
 800951a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800951e:	6008      	str	r0, [r1, #0]
 8009520:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009524:	4770      	bx	lr
 8009526:	bf00      	nop

08009528 <__multadd>:
 8009528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800952a:	690c      	ldr	r4, [r1, #16]
 800952c:	b083      	sub	sp, #12
 800952e:	460d      	mov	r5, r1
 8009530:	4606      	mov	r6, r0
 8009532:	f101 0e14 	add.w	lr, r1, #20
 8009536:	2700      	movs	r7, #0
 8009538:	f8de 1000 	ldr.w	r1, [lr]
 800953c:	b288      	uxth	r0, r1
 800953e:	0c09      	lsrs	r1, r1, #16
 8009540:	fb02 3300 	mla	r3, r2, r0, r3
 8009544:	fb02 f101 	mul.w	r1, r2, r1
 8009548:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 800954c:	3701      	adds	r7, #1
 800954e:	b29b      	uxth	r3, r3
 8009550:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8009554:	42bc      	cmp	r4, r7
 8009556:	f84e 3b04 	str.w	r3, [lr], #4
 800955a:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800955e:	dceb      	bgt.n	8009538 <__multadd+0x10>
 8009560:	b13b      	cbz	r3, 8009572 <__multadd+0x4a>
 8009562:	68aa      	ldr	r2, [r5, #8]
 8009564:	4294      	cmp	r4, r2
 8009566:	da07      	bge.n	8009578 <__multadd+0x50>
 8009568:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 800956c:	3401      	adds	r4, #1
 800956e:	6153      	str	r3, [r2, #20]
 8009570:	612c      	str	r4, [r5, #16]
 8009572:	4628      	mov	r0, r5
 8009574:	b003      	add	sp, #12
 8009576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009578:	6869      	ldr	r1, [r5, #4]
 800957a:	9301      	str	r3, [sp, #4]
 800957c:	3101      	adds	r1, #1
 800957e:	4630      	mov	r0, r6
 8009580:	f7ff ffa2 	bl	80094c8 <_Balloc>
 8009584:	692a      	ldr	r2, [r5, #16]
 8009586:	3202      	adds	r2, #2
 8009588:	f105 010c 	add.w	r1, r5, #12
 800958c:	4607      	mov	r7, r0
 800958e:	0092      	lsls	r2, r2, #2
 8009590:	300c      	adds	r0, #12
 8009592:	f7f6 fe45 	bl	8000220 <memcpy>
 8009596:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8009598:	6869      	ldr	r1, [r5, #4]
 800959a:	9b01      	ldr	r3, [sp, #4]
 800959c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80095a0:	6028      	str	r0, [r5, #0]
 80095a2:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 80095a6:	463d      	mov	r5, r7
 80095a8:	e7de      	b.n	8009568 <__multadd+0x40>
 80095aa:	bf00      	nop

080095ac <__hi0bits>:
 80095ac:	0c03      	lsrs	r3, r0, #16
 80095ae:	041b      	lsls	r3, r3, #16
 80095b0:	b9b3      	cbnz	r3, 80095e0 <__hi0bits+0x34>
 80095b2:	0400      	lsls	r0, r0, #16
 80095b4:	2310      	movs	r3, #16
 80095b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80095ba:	bf04      	itt	eq
 80095bc:	0200      	lsleq	r0, r0, #8
 80095be:	3308      	addeq	r3, #8
 80095c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80095c4:	bf04      	itt	eq
 80095c6:	0100      	lsleq	r0, r0, #4
 80095c8:	3304      	addeq	r3, #4
 80095ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80095ce:	bf04      	itt	eq
 80095d0:	0080      	lsleq	r0, r0, #2
 80095d2:	3302      	addeq	r3, #2
 80095d4:	2800      	cmp	r0, #0
 80095d6:	db07      	blt.n	80095e8 <__hi0bits+0x3c>
 80095d8:	0042      	lsls	r2, r0, #1
 80095da:	d403      	bmi.n	80095e4 <__hi0bits+0x38>
 80095dc:	2020      	movs	r0, #32
 80095de:	4770      	bx	lr
 80095e0:	2300      	movs	r3, #0
 80095e2:	e7e8      	b.n	80095b6 <__hi0bits+0xa>
 80095e4:	1c58      	adds	r0, r3, #1
 80095e6:	4770      	bx	lr
 80095e8:	4618      	mov	r0, r3
 80095ea:	4770      	bx	lr

080095ec <__lo0bits>:
 80095ec:	6803      	ldr	r3, [r0, #0]
 80095ee:	f013 0207 	ands.w	r2, r3, #7
 80095f2:	d007      	beq.n	8009604 <__lo0bits+0x18>
 80095f4:	07d9      	lsls	r1, r3, #31
 80095f6:	d420      	bmi.n	800963a <__lo0bits+0x4e>
 80095f8:	079a      	lsls	r2, r3, #30
 80095fa:	d420      	bmi.n	800963e <__lo0bits+0x52>
 80095fc:	089b      	lsrs	r3, r3, #2
 80095fe:	6003      	str	r3, [r0, #0]
 8009600:	2002      	movs	r0, #2
 8009602:	4770      	bx	lr
 8009604:	b299      	uxth	r1, r3
 8009606:	b909      	cbnz	r1, 800960c <__lo0bits+0x20>
 8009608:	0c1b      	lsrs	r3, r3, #16
 800960a:	2210      	movs	r2, #16
 800960c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009610:	bf04      	itt	eq
 8009612:	0a1b      	lsreq	r3, r3, #8
 8009614:	3208      	addeq	r2, #8
 8009616:	0719      	lsls	r1, r3, #28
 8009618:	bf04      	itt	eq
 800961a:	091b      	lsreq	r3, r3, #4
 800961c:	3204      	addeq	r2, #4
 800961e:	0799      	lsls	r1, r3, #30
 8009620:	bf04      	itt	eq
 8009622:	089b      	lsreq	r3, r3, #2
 8009624:	3202      	addeq	r2, #2
 8009626:	07d9      	lsls	r1, r3, #31
 8009628:	d404      	bmi.n	8009634 <__lo0bits+0x48>
 800962a:	085b      	lsrs	r3, r3, #1
 800962c:	d101      	bne.n	8009632 <__lo0bits+0x46>
 800962e:	2020      	movs	r0, #32
 8009630:	4770      	bx	lr
 8009632:	3201      	adds	r2, #1
 8009634:	6003      	str	r3, [r0, #0]
 8009636:	4610      	mov	r0, r2
 8009638:	4770      	bx	lr
 800963a:	2000      	movs	r0, #0
 800963c:	4770      	bx	lr
 800963e:	085b      	lsrs	r3, r3, #1
 8009640:	6003      	str	r3, [r0, #0]
 8009642:	2001      	movs	r0, #1
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop

08009648 <__i2b>:
 8009648:	b510      	push	{r4, lr}
 800964a:	460c      	mov	r4, r1
 800964c:	2101      	movs	r1, #1
 800964e:	f7ff ff3b 	bl	80094c8 <_Balloc>
 8009652:	2201      	movs	r2, #1
 8009654:	6144      	str	r4, [r0, #20]
 8009656:	6102      	str	r2, [r0, #16]
 8009658:	bd10      	pop	{r4, pc}
 800965a:	bf00      	nop

0800965c <__multiply>:
 800965c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009660:	690f      	ldr	r7, [r1, #16]
 8009662:	6916      	ldr	r6, [r2, #16]
 8009664:	42b7      	cmp	r7, r6
 8009666:	b083      	sub	sp, #12
 8009668:	460d      	mov	r5, r1
 800966a:	4614      	mov	r4, r2
 800966c:	f2c0 808d 	blt.w	800978a <__multiply+0x12e>
 8009670:	4633      	mov	r3, r6
 8009672:	463e      	mov	r6, r7
 8009674:	461f      	mov	r7, r3
 8009676:	68ab      	ldr	r3, [r5, #8]
 8009678:	6869      	ldr	r1, [r5, #4]
 800967a:	eb06 0807 	add.w	r8, r6, r7
 800967e:	4598      	cmp	r8, r3
 8009680:	bfc8      	it	gt
 8009682:	3101      	addgt	r1, #1
 8009684:	f7ff ff20 	bl	80094c8 <_Balloc>
 8009688:	f100 0c14 	add.w	ip, r0, #20
 800968c:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 8009690:	45cc      	cmp	ip, r9
 8009692:	9000      	str	r0, [sp, #0]
 8009694:	d205      	bcs.n	80096a2 <__multiply+0x46>
 8009696:	4663      	mov	r3, ip
 8009698:	2100      	movs	r1, #0
 800969a:	f843 1b04 	str.w	r1, [r3], #4
 800969e:	4599      	cmp	r9, r3
 80096a0:	d8fb      	bhi.n	800969a <__multiply+0x3e>
 80096a2:	f104 0214 	add.w	r2, r4, #20
 80096a6:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 80096aa:	f105 0314 	add.w	r3, r5, #20
 80096ae:	4552      	cmp	r2, sl
 80096b0:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 80096b4:	d254      	bcs.n	8009760 <__multiply+0x104>
 80096b6:	f8cd 9004 	str.w	r9, [sp, #4]
 80096ba:	4699      	mov	r9, r3
 80096bc:	f852 3b04 	ldr.w	r3, [r2], #4
 80096c0:	fa1f fb83 	uxth.w	fp, r3
 80096c4:	f1bb 0f00 	cmp.w	fp, #0
 80096c8:	d020      	beq.n	800970c <__multiply+0xb0>
 80096ca:	2000      	movs	r0, #0
 80096cc:	464f      	mov	r7, r9
 80096ce:	4666      	mov	r6, ip
 80096d0:	4605      	mov	r5, r0
 80096d2:	e000      	b.n	80096d6 <__multiply+0x7a>
 80096d4:	461e      	mov	r6, r3
 80096d6:	f857 4b04 	ldr.w	r4, [r7], #4
 80096da:	6830      	ldr	r0, [r6, #0]
 80096dc:	b2a1      	uxth	r1, r4
 80096de:	b283      	uxth	r3, r0
 80096e0:	fb0b 3101 	mla	r1, fp, r1, r3
 80096e4:	0c24      	lsrs	r4, r4, #16
 80096e6:	0c00      	lsrs	r0, r0, #16
 80096e8:	194b      	adds	r3, r1, r5
 80096ea:	fb0b 0004 	mla	r0, fp, r4, r0
 80096ee:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 80096f2:	b299      	uxth	r1, r3
 80096f4:	4633      	mov	r3, r6
 80096f6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80096fa:	45be      	cmp	lr, r7
 80096fc:	ea4f 4510 	mov.w	r5, r0, lsr #16
 8009700:	f843 1b04 	str.w	r1, [r3], #4
 8009704:	d8e6      	bhi.n	80096d4 <__multiply+0x78>
 8009706:	6075      	str	r5, [r6, #4]
 8009708:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800970c:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 8009710:	d020      	beq.n	8009754 <__multiply+0xf8>
 8009712:	f8dc 3000 	ldr.w	r3, [ip]
 8009716:	4667      	mov	r7, ip
 8009718:	4618      	mov	r0, r3
 800971a:	464d      	mov	r5, r9
 800971c:	2100      	movs	r1, #0
 800971e:	e000      	b.n	8009722 <__multiply+0xc6>
 8009720:	4637      	mov	r7, r6
 8009722:	882c      	ldrh	r4, [r5, #0]
 8009724:	0c00      	lsrs	r0, r0, #16
 8009726:	fb0b 0004 	mla	r0, fp, r4, r0
 800972a:	4401      	add	r1, r0
 800972c:	b29c      	uxth	r4, r3
 800972e:	463e      	mov	r6, r7
 8009730:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 8009734:	f846 3b04 	str.w	r3, [r6], #4
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f855 4b04 	ldr.w	r4, [r5], #4
 800973e:	b283      	uxth	r3, r0
 8009740:	0c24      	lsrs	r4, r4, #16
 8009742:	fb0b 3404 	mla	r4, fp, r4, r3
 8009746:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 800974a:	45ae      	cmp	lr, r5
 800974c:	ea4f 4113 	mov.w	r1, r3, lsr #16
 8009750:	d8e6      	bhi.n	8009720 <__multiply+0xc4>
 8009752:	607b      	str	r3, [r7, #4]
 8009754:	4592      	cmp	sl, r2
 8009756:	f10c 0c04 	add.w	ip, ip, #4
 800975a:	d8af      	bhi.n	80096bc <__multiply+0x60>
 800975c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009760:	f1b8 0f00 	cmp.w	r8, #0
 8009764:	dd0b      	ble.n	800977e <__multiply+0x122>
 8009766:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800976a:	f1a9 0904 	sub.w	r9, r9, #4
 800976e:	b11b      	cbz	r3, 8009778 <__multiply+0x11c>
 8009770:	e005      	b.n	800977e <__multiply+0x122>
 8009772:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 8009776:	b913      	cbnz	r3, 800977e <__multiply+0x122>
 8009778:	f1b8 0801 	subs.w	r8, r8, #1
 800977c:	d1f9      	bne.n	8009772 <__multiply+0x116>
 800977e:	9800      	ldr	r0, [sp, #0]
 8009780:	f8c0 8010 	str.w	r8, [r0, #16]
 8009784:	b003      	add	sp, #12
 8009786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800978a:	4615      	mov	r5, r2
 800978c:	460c      	mov	r4, r1
 800978e:	e772      	b.n	8009676 <__multiply+0x1a>

08009790 <__pow5mult>:
 8009790:	f012 0303 	ands.w	r3, r2, #3
 8009794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009798:	4614      	mov	r4, r2
 800979a:	4607      	mov	r7, r0
 800979c:	460e      	mov	r6, r1
 800979e:	d12d      	bne.n	80097fc <__pow5mult+0x6c>
 80097a0:	10a4      	asrs	r4, r4, #2
 80097a2:	d01c      	beq.n	80097de <__pow5mult+0x4e>
 80097a4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 80097a6:	b395      	cbz	r5, 800980e <__pow5mult+0x7e>
 80097a8:	07e3      	lsls	r3, r4, #31
 80097aa:	f04f 0800 	mov.w	r8, #0
 80097ae:	d406      	bmi.n	80097be <__pow5mult+0x2e>
 80097b0:	1064      	asrs	r4, r4, #1
 80097b2:	d014      	beq.n	80097de <__pow5mult+0x4e>
 80097b4:	6828      	ldr	r0, [r5, #0]
 80097b6:	b1a8      	cbz	r0, 80097e4 <__pow5mult+0x54>
 80097b8:	4605      	mov	r5, r0
 80097ba:	07e3      	lsls	r3, r4, #31
 80097bc:	d5f8      	bpl.n	80097b0 <__pow5mult+0x20>
 80097be:	4638      	mov	r0, r7
 80097c0:	4631      	mov	r1, r6
 80097c2:	462a      	mov	r2, r5
 80097c4:	f7ff ff4a 	bl	800965c <__multiply>
 80097c8:	b1b6      	cbz	r6, 80097f8 <__pow5mult+0x68>
 80097ca:	6872      	ldr	r2, [r6, #4]
 80097cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097ce:	1064      	asrs	r4, r4, #1
 80097d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80097d4:	6031      	str	r1, [r6, #0]
 80097d6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 80097da:	4606      	mov	r6, r0
 80097dc:	d1ea      	bne.n	80097b4 <__pow5mult+0x24>
 80097de:	4630      	mov	r0, r6
 80097e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097e4:	4629      	mov	r1, r5
 80097e6:	462a      	mov	r2, r5
 80097e8:	4638      	mov	r0, r7
 80097ea:	f7ff ff37 	bl	800965c <__multiply>
 80097ee:	6028      	str	r0, [r5, #0]
 80097f0:	f8c0 8000 	str.w	r8, [r0]
 80097f4:	4605      	mov	r5, r0
 80097f6:	e7e0      	b.n	80097ba <__pow5mult+0x2a>
 80097f8:	4606      	mov	r6, r0
 80097fa:	e7d9      	b.n	80097b0 <__pow5mult+0x20>
 80097fc:	1e5a      	subs	r2, r3, #1
 80097fe:	4d0b      	ldr	r5, [pc, #44]	; (800982c <__pow5mult+0x9c>)
 8009800:	2300      	movs	r3, #0
 8009802:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8009806:	f7ff fe8f 	bl	8009528 <__multadd>
 800980a:	4606      	mov	r6, r0
 800980c:	e7c8      	b.n	80097a0 <__pow5mult+0x10>
 800980e:	2101      	movs	r1, #1
 8009810:	4638      	mov	r0, r7
 8009812:	f7ff fe59 	bl	80094c8 <_Balloc>
 8009816:	f240 2171 	movw	r1, #625	; 0x271
 800981a:	2201      	movs	r2, #1
 800981c:	2300      	movs	r3, #0
 800981e:	6141      	str	r1, [r0, #20]
 8009820:	6102      	str	r2, [r0, #16]
 8009822:	4605      	mov	r5, r0
 8009824:	64b8      	str	r0, [r7, #72]	; 0x48
 8009826:	6003      	str	r3, [r0, #0]
 8009828:	e7be      	b.n	80097a8 <__pow5mult+0x18>
 800982a:	bf00      	nop
 800982c:	08019e90 	.word	0x08019e90

08009830 <__lshift>:
 8009830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009834:	690f      	ldr	r7, [r1, #16]
 8009836:	688b      	ldr	r3, [r1, #8]
 8009838:	ea4f 1962 	mov.w	r9, r2, asr #5
 800983c:	444f      	add	r7, r9
 800983e:	1c7d      	adds	r5, r7, #1
 8009840:	429d      	cmp	r5, r3
 8009842:	460e      	mov	r6, r1
 8009844:	4614      	mov	r4, r2
 8009846:	6849      	ldr	r1, [r1, #4]
 8009848:	4680      	mov	r8, r0
 800984a:	dd04      	ble.n	8009856 <__lshift+0x26>
 800984c:	005b      	lsls	r3, r3, #1
 800984e:	429d      	cmp	r5, r3
 8009850:	f101 0101 	add.w	r1, r1, #1
 8009854:	dcfa      	bgt.n	800984c <__lshift+0x1c>
 8009856:	4640      	mov	r0, r8
 8009858:	f7ff fe36 	bl	80094c8 <_Balloc>
 800985c:	f1b9 0f00 	cmp.w	r9, #0
 8009860:	f100 0114 	add.w	r1, r0, #20
 8009864:	dd09      	ble.n	800987a <__lshift+0x4a>
 8009866:	2300      	movs	r3, #0
 8009868:	469e      	mov	lr, r3
 800986a:	460a      	mov	r2, r1
 800986c:	3301      	adds	r3, #1
 800986e:	454b      	cmp	r3, r9
 8009870:	f842 eb04 	str.w	lr, [r2], #4
 8009874:	d1fa      	bne.n	800986c <__lshift+0x3c>
 8009876:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800987a:	6932      	ldr	r2, [r6, #16]
 800987c:	f106 0314 	add.w	r3, r6, #20
 8009880:	f014 0c1f 	ands.w	ip, r4, #31
 8009884:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 8009888:	d01f      	beq.n	80098ca <__lshift+0x9a>
 800988a:	f1cc 0920 	rsb	r9, ip, #32
 800988e:	2200      	movs	r2, #0
 8009890:	681c      	ldr	r4, [r3, #0]
 8009892:	fa04 f40c 	lsl.w	r4, r4, ip
 8009896:	4314      	orrs	r4, r2
 8009898:	468a      	mov	sl, r1
 800989a:	f841 4b04 	str.w	r4, [r1], #4
 800989e:	f853 4b04 	ldr.w	r4, [r3], #4
 80098a2:	459e      	cmp	lr, r3
 80098a4:	fa24 f209 	lsr.w	r2, r4, r9
 80098a8:	d8f2      	bhi.n	8009890 <__lshift+0x60>
 80098aa:	f8ca 2004 	str.w	r2, [sl, #4]
 80098ae:	b102      	cbz	r2, 80098b2 <__lshift+0x82>
 80098b0:	1cbd      	adds	r5, r7, #2
 80098b2:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 80098b6:	6872      	ldr	r2, [r6, #4]
 80098b8:	3d01      	subs	r5, #1
 80098ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098be:	6105      	str	r5, [r0, #16]
 80098c0:	6031      	str	r1, [r6, #0]
 80098c2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 80098c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ca:	3904      	subs	r1, #4
 80098cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80098d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80098d4:	459e      	cmp	lr, r3
 80098d6:	d8f9      	bhi.n	80098cc <__lshift+0x9c>
 80098d8:	e7eb      	b.n	80098b2 <__lshift+0x82>
 80098da:	bf00      	nop

080098dc <__mcmp>:
 80098dc:	6902      	ldr	r2, [r0, #16]
 80098de:	690b      	ldr	r3, [r1, #16]
 80098e0:	1ad2      	subs	r2, r2, r3
 80098e2:	d113      	bne.n	800990c <__mcmp+0x30>
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	3014      	adds	r0, #20
 80098e8:	3114      	adds	r1, #20
 80098ea:	4419      	add	r1, r3
 80098ec:	b410      	push	{r4}
 80098ee:	4403      	add	r3, r0
 80098f0:	e001      	b.n	80098f6 <__mcmp+0x1a>
 80098f2:	4298      	cmp	r0, r3
 80098f4:	d20c      	bcs.n	8009910 <__mcmp+0x34>
 80098f6:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80098fa:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80098fe:	4294      	cmp	r4, r2
 8009900:	d0f7      	beq.n	80098f2 <__mcmp+0x16>
 8009902:	d309      	bcc.n	8009918 <__mcmp+0x3c>
 8009904:	2001      	movs	r0, #1
 8009906:	f85d 4b04 	ldr.w	r4, [sp], #4
 800990a:	4770      	bx	lr
 800990c:	4610      	mov	r0, r2
 800990e:	4770      	bx	lr
 8009910:	2000      	movs	r0, #0
 8009912:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009916:	4770      	bx	lr
 8009918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800991c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop

08009924 <__mdiff>:
 8009924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009928:	460e      	mov	r6, r1
 800992a:	4605      	mov	r5, r0
 800992c:	4611      	mov	r1, r2
 800992e:	4630      	mov	r0, r6
 8009930:	4614      	mov	r4, r2
 8009932:	f7ff ffd3 	bl	80098dc <__mcmp>
 8009936:	1e07      	subs	r7, r0, #0
 8009938:	d054      	beq.n	80099e4 <__mdiff+0xc0>
 800993a:	db4d      	blt.n	80099d8 <__mdiff+0xb4>
 800993c:	f04f 0800 	mov.w	r8, #0
 8009940:	6871      	ldr	r1, [r6, #4]
 8009942:	4628      	mov	r0, r5
 8009944:	f7ff fdc0 	bl	80094c8 <_Balloc>
 8009948:	6937      	ldr	r7, [r6, #16]
 800994a:	6923      	ldr	r3, [r4, #16]
 800994c:	f8c0 800c 	str.w	r8, [r0, #12]
 8009950:	3614      	adds	r6, #20
 8009952:	f104 0214 	add.w	r2, r4, #20
 8009956:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 800995a:	f100 0514 	add.w	r5, r0, #20
 800995e:	eb06 0e87 	add.w	lr, r6, r7, lsl #2
 8009962:	2300      	movs	r3, #0
 8009964:	f856 8b04 	ldr.w	r8, [r6], #4
 8009968:	f852 4b04 	ldr.w	r4, [r2], #4
 800996c:	fa13 f388 	uxtah	r3, r3, r8
 8009970:	b2a1      	uxth	r1, r4
 8009972:	0c24      	lsrs	r4, r4, #16
 8009974:	1a59      	subs	r1, r3, r1
 8009976:	ebc4 4318 	rsb	r3, r4, r8, lsr #16
 800997a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800997e:	b289      	uxth	r1, r1
 8009980:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009984:	4594      	cmp	ip, r2
 8009986:	f845 1b04 	str.w	r1, [r5], #4
 800998a:	ea4f 4323 	mov.w	r3, r3, asr #16
 800998e:	4634      	mov	r4, r6
 8009990:	d8e8      	bhi.n	8009964 <__mdiff+0x40>
 8009992:	45b6      	cmp	lr, r6
 8009994:	46ac      	mov	ip, r5
 8009996:	d915      	bls.n	80099c4 <__mdiff+0xa0>
 8009998:	f854 2b04 	ldr.w	r2, [r4], #4
 800999c:	fa13 f182 	uxtah	r1, r3, r2
 80099a0:	0c13      	lsrs	r3, r2, #16
 80099a2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80099a6:	b289      	uxth	r1, r1
 80099a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80099ac:	45a6      	cmp	lr, r4
 80099ae:	f845 1b04 	str.w	r1, [r5], #4
 80099b2:	ea4f 4323 	mov.w	r3, r3, asr #16
 80099b6:	d8ef      	bhi.n	8009998 <__mdiff+0x74>
 80099b8:	43f6      	mvns	r6, r6
 80099ba:	4476      	add	r6, lr
 80099bc:	f026 0503 	bic.w	r5, r6, #3
 80099c0:	3504      	adds	r5, #4
 80099c2:	4465      	add	r5, ip
 80099c4:	3d04      	subs	r5, #4
 80099c6:	b921      	cbnz	r1, 80099d2 <__mdiff+0xae>
 80099c8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80099cc:	3f01      	subs	r7, #1
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d0fa      	beq.n	80099c8 <__mdiff+0xa4>
 80099d2:	6107      	str	r7, [r0, #16]
 80099d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099d8:	4633      	mov	r3, r6
 80099da:	f04f 0801 	mov.w	r8, #1
 80099de:	4626      	mov	r6, r4
 80099e0:	461c      	mov	r4, r3
 80099e2:	e7ad      	b.n	8009940 <__mdiff+0x1c>
 80099e4:	4628      	mov	r0, r5
 80099e6:	4639      	mov	r1, r7
 80099e8:	f7ff fd6e 	bl	80094c8 <_Balloc>
 80099ec:	2301      	movs	r3, #1
 80099ee:	6147      	str	r7, [r0, #20]
 80099f0:	6103      	str	r3, [r0, #16]
 80099f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099f6:	bf00      	nop

080099f8 <__d2b>:
 80099f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80099fc:	ec57 6b10 	vmov	r6, r7, d0
 8009a00:	b083      	sub	sp, #12
 8009a02:	4688      	mov	r8, r1
 8009a04:	2101      	movs	r1, #1
 8009a06:	463c      	mov	r4, r7
 8009a08:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009a0c:	4617      	mov	r7, r2
 8009a0e:	f7ff fd5b 	bl	80094c8 <_Balloc>
 8009a12:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009a16:	4681      	mov	r9, r0
 8009a18:	b10d      	cbz	r5, 8009a1e <__d2b+0x26>
 8009a1a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8009a1e:	9401      	str	r4, [sp, #4]
 8009a20:	b31e      	cbz	r6, 8009a6a <__d2b+0x72>
 8009a22:	a802      	add	r0, sp, #8
 8009a24:	f840 6d08 	str.w	r6, [r0, #-8]!
 8009a28:	f7ff fde0 	bl	80095ec <__lo0bits>
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	d134      	bne.n	8009a9a <__d2b+0xa2>
 8009a30:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8009a34:	f8c9 2014 	str.w	r2, [r9, #20]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	bf14      	ite	ne
 8009a3c:	2402      	movne	r4, #2
 8009a3e:	2401      	moveq	r4, #1
 8009a40:	f8c9 3018 	str.w	r3, [r9, #24]
 8009a44:	f8c9 4010 	str.w	r4, [r9, #16]
 8009a48:	b9dd      	cbnz	r5, 8009a82 <__d2b+0x8a>
 8009a4a:	eb09 0384 	add.w	r3, r9, r4, lsl #2
 8009a4e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009a52:	f8c8 0000 	str.w	r0, [r8]
 8009a56:	6918      	ldr	r0, [r3, #16]
 8009a58:	f7ff fda8 	bl	80095ac <__hi0bits>
 8009a5c:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8009a60:	6038      	str	r0, [r7, #0]
 8009a62:	4648      	mov	r0, r9
 8009a64:	b003      	add	sp, #12
 8009a66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a6a:	a801      	add	r0, sp, #4
 8009a6c:	f7ff fdbe 	bl	80095ec <__lo0bits>
 8009a70:	2401      	movs	r4, #1
 8009a72:	9b01      	ldr	r3, [sp, #4]
 8009a74:	f8c9 3014 	str.w	r3, [r9, #20]
 8009a78:	3020      	adds	r0, #32
 8009a7a:	f8c9 4010 	str.w	r4, [r9, #16]
 8009a7e:	2d00      	cmp	r5, #0
 8009a80:	d0e3      	beq.n	8009a4a <__d2b+0x52>
 8009a82:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009a86:	4405      	add	r5, r0
 8009a88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a8c:	f8c8 5000 	str.w	r5, [r8]
 8009a90:	6038      	str	r0, [r7, #0]
 8009a92:	4648      	mov	r0, r9
 8009a94:	b003      	add	sp, #12
 8009a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a9a:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8009a9e:	f1c0 0120 	rsb	r1, r0, #32
 8009aa2:	fa03 f101 	lsl.w	r1, r3, r1
 8009aa6:	430a      	orrs	r2, r1
 8009aa8:	40c3      	lsrs	r3, r0
 8009aaa:	9301      	str	r3, [sp, #4]
 8009aac:	f8c9 2014 	str.w	r2, [r9, #20]
 8009ab0:	e7c2      	b.n	8009a38 <__d2b+0x40>
 8009ab2:	bf00      	nop

08009ab4 <_putc_r>:
 8009ab4:	b570      	push	{r4, r5, r6, lr}
 8009ab6:	460d      	mov	r5, r1
 8009ab8:	4614      	mov	r4, r2
 8009aba:	4606      	mov	r6, r0
 8009abc:	b108      	cbz	r0, 8009ac2 <_putc_r+0xe>
 8009abe:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009ac0:	b1d3      	cbz	r3, 8009af8 <_putc_r+0x44>
 8009ac2:	68a3      	ldr	r3, [r4, #8]
 8009ac4:	3b01      	subs	r3, #1
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	60a3      	str	r3, [r4, #8]
 8009aca:	db06      	blt.n	8009ada <_putc_r+0x26>
 8009acc:	6823      	ldr	r3, [r4, #0]
 8009ace:	701d      	strb	r5, [r3, #0]
 8009ad0:	6823      	ldr	r3, [r4, #0]
 8009ad2:	1c5a      	adds	r2, r3, #1
 8009ad4:	6022      	str	r2, [r4, #0]
 8009ad6:	7818      	ldrb	r0, [r3, #0]
 8009ad8:	bd70      	pop	{r4, r5, r6, pc}
 8009ada:	69a2      	ldr	r2, [r4, #24]
 8009adc:	4293      	cmp	r3, r2
 8009ade:	db0e      	blt.n	8009afe <_putc_r+0x4a>
 8009ae0:	6823      	ldr	r3, [r4, #0]
 8009ae2:	701d      	strb	r5, [r3, #0]
 8009ae4:	6823      	ldr	r3, [r4, #0]
 8009ae6:	7819      	ldrb	r1, [r3, #0]
 8009ae8:	290a      	cmp	r1, #10
 8009aea:	d1f2      	bne.n	8009ad2 <_putc_r+0x1e>
 8009aec:	4630      	mov	r0, r6
 8009aee:	4622      	mov	r2, r4
 8009af0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009af4:	f000 bab8 	b.w	800a068 <__swbuf_r>
 8009af8:	f7fe fe20 	bl	800873c <__sinit>
 8009afc:	e7e1      	b.n	8009ac2 <_putc_r+0xe>
 8009afe:	4630      	mov	r0, r6
 8009b00:	4629      	mov	r1, r5
 8009b02:	4622      	mov	r2, r4
 8009b04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009b08:	f000 baae 	b.w	800a068 <__swbuf_r>

08009b0c <_realloc_r>:
 8009b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b10:	4617      	mov	r7, r2
 8009b12:	b083      	sub	sp, #12
 8009b14:	460e      	mov	r6, r1
 8009b16:	2900      	cmp	r1, #0
 8009b18:	f000 80e7 	beq.w	8009cea <_realloc_r+0x1de>
 8009b1c:	4681      	mov	r9, r0
 8009b1e:	f107 050b 	add.w	r5, r7, #11
 8009b22:	f7ff fccd 	bl	80094c0 <__malloc_lock>
 8009b26:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009b2a:	2d16      	cmp	r5, #22
 8009b2c:	f023 0403 	bic.w	r4, r3, #3
 8009b30:	f1a6 0808 	sub.w	r8, r6, #8
 8009b34:	d84c      	bhi.n	8009bd0 <_realloc_r+0xc4>
 8009b36:	2210      	movs	r2, #16
 8009b38:	4615      	mov	r5, r2
 8009b3a:	42af      	cmp	r7, r5
 8009b3c:	d84d      	bhi.n	8009bda <_realloc_r+0xce>
 8009b3e:	4294      	cmp	r4, r2
 8009b40:	f280 8084 	bge.w	8009c4c <_realloc_r+0x140>
 8009b44:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 8009ef4 <_realloc_r+0x3e8>
 8009b48:	f8db 0008 	ldr.w	r0, [fp, #8]
 8009b4c:	eb08 0104 	add.w	r1, r8, r4
 8009b50:	4288      	cmp	r0, r1
 8009b52:	f000 80d6 	beq.w	8009d02 <_realloc_r+0x1f6>
 8009b56:	6848      	ldr	r0, [r1, #4]
 8009b58:	f020 0e01 	bic.w	lr, r0, #1
 8009b5c:	448e      	add	lr, r1
 8009b5e:	f8de e004 	ldr.w	lr, [lr, #4]
 8009b62:	f01e 0f01 	tst.w	lr, #1
 8009b66:	d13f      	bne.n	8009be8 <_realloc_r+0xdc>
 8009b68:	f020 0003 	bic.w	r0, r0, #3
 8009b6c:	4420      	add	r0, r4
 8009b6e:	4290      	cmp	r0, r2
 8009b70:	f280 80c1 	bge.w	8009cf6 <_realloc_r+0x1ea>
 8009b74:	07db      	lsls	r3, r3, #31
 8009b76:	f100 808f 	bmi.w	8009c98 <_realloc_r+0x18c>
 8009b7a:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009b7e:	ebc3 0a08 	rsb	sl, r3, r8
 8009b82:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009b86:	f023 0303 	bic.w	r3, r3, #3
 8009b8a:	eb00 0e03 	add.w	lr, r0, r3
 8009b8e:	4596      	cmp	lr, r2
 8009b90:	db34      	blt.n	8009bfc <_realloc_r+0xf0>
 8009b92:	68cb      	ldr	r3, [r1, #12]
 8009b94:	688a      	ldr	r2, [r1, #8]
 8009b96:	4657      	mov	r7, sl
 8009b98:	60d3      	str	r3, [r2, #12]
 8009b9a:	609a      	str	r2, [r3, #8]
 8009b9c:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8009ba0:	f8da 300c 	ldr.w	r3, [sl, #12]
 8009ba4:	60cb      	str	r3, [r1, #12]
 8009ba6:	1f22      	subs	r2, r4, #4
 8009ba8:	2a24      	cmp	r2, #36	; 0x24
 8009baa:	6099      	str	r1, [r3, #8]
 8009bac:	f200 8136 	bhi.w	8009e1c <_realloc_r+0x310>
 8009bb0:	2a13      	cmp	r2, #19
 8009bb2:	f240 80fd 	bls.w	8009db0 <_realloc_r+0x2a4>
 8009bb6:	6833      	ldr	r3, [r6, #0]
 8009bb8:	f8ca 3008 	str.w	r3, [sl, #8]
 8009bbc:	6873      	ldr	r3, [r6, #4]
 8009bbe:	f8ca 300c 	str.w	r3, [sl, #12]
 8009bc2:	2a1b      	cmp	r2, #27
 8009bc4:	f200 8140 	bhi.w	8009e48 <_realloc_r+0x33c>
 8009bc8:	3608      	adds	r6, #8
 8009bca:	f10a 0310 	add.w	r3, sl, #16
 8009bce:	e0f0      	b.n	8009db2 <_realloc_r+0x2a6>
 8009bd0:	f025 0507 	bic.w	r5, r5, #7
 8009bd4:	2d00      	cmp	r5, #0
 8009bd6:	462a      	mov	r2, r5
 8009bd8:	daaf      	bge.n	8009b3a <_realloc_r+0x2e>
 8009bda:	230c      	movs	r3, #12
 8009bdc:	2000      	movs	r0, #0
 8009bde:	f8c9 3000 	str.w	r3, [r9]
 8009be2:	b003      	add	sp, #12
 8009be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be8:	07d9      	lsls	r1, r3, #31
 8009bea:	d455      	bmi.n	8009c98 <_realloc_r+0x18c>
 8009bec:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009bf0:	ebc3 0a08 	rsb	sl, r3, r8
 8009bf4:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009bf8:	f023 0303 	bic.w	r3, r3, #3
 8009bfc:	4423      	add	r3, r4
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	db4a      	blt.n	8009c98 <_realloc_r+0x18c>
 8009c02:	4657      	mov	r7, sl
 8009c04:	f8da 100c 	ldr.w	r1, [sl, #12]
 8009c08:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8009c0c:	1f22      	subs	r2, r4, #4
 8009c0e:	2a24      	cmp	r2, #36	; 0x24
 8009c10:	60c1      	str	r1, [r0, #12]
 8009c12:	6088      	str	r0, [r1, #8]
 8009c14:	f200 810e 	bhi.w	8009e34 <_realloc_r+0x328>
 8009c18:	2a13      	cmp	r2, #19
 8009c1a:	f240 8109 	bls.w	8009e30 <_realloc_r+0x324>
 8009c1e:	6831      	ldr	r1, [r6, #0]
 8009c20:	f8ca 1008 	str.w	r1, [sl, #8]
 8009c24:	6871      	ldr	r1, [r6, #4]
 8009c26:	f8ca 100c 	str.w	r1, [sl, #12]
 8009c2a:	2a1b      	cmp	r2, #27
 8009c2c:	f200 8121 	bhi.w	8009e72 <_realloc_r+0x366>
 8009c30:	3608      	adds	r6, #8
 8009c32:	f10a 0210 	add.w	r2, sl, #16
 8009c36:	6831      	ldr	r1, [r6, #0]
 8009c38:	6011      	str	r1, [r2, #0]
 8009c3a:	6871      	ldr	r1, [r6, #4]
 8009c3c:	6051      	str	r1, [r2, #4]
 8009c3e:	68b1      	ldr	r1, [r6, #8]
 8009c40:	6091      	str	r1, [r2, #8]
 8009c42:	461c      	mov	r4, r3
 8009c44:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009c48:	463e      	mov	r6, r7
 8009c4a:	46d0      	mov	r8, sl
 8009c4c:	1b62      	subs	r2, r4, r5
 8009c4e:	2a0f      	cmp	r2, #15
 8009c50:	f003 0301 	and.w	r3, r3, #1
 8009c54:	d80e      	bhi.n	8009c74 <_realloc_r+0x168>
 8009c56:	4323      	orrs	r3, r4
 8009c58:	4444      	add	r4, r8
 8009c5a:	f8c8 3004 	str.w	r3, [r8, #4]
 8009c5e:	6863      	ldr	r3, [r4, #4]
 8009c60:	f043 0301 	orr.w	r3, r3, #1
 8009c64:	6063      	str	r3, [r4, #4]
 8009c66:	4648      	mov	r0, r9
 8009c68:	f7ff fc2c 	bl	80094c4 <__malloc_unlock>
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	b003      	add	sp, #12
 8009c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c74:	eb08 0105 	add.w	r1, r8, r5
 8009c78:	431d      	orrs	r5, r3
 8009c7a:	f042 0301 	orr.w	r3, r2, #1
 8009c7e:	440a      	add	r2, r1
 8009c80:	f8c8 5004 	str.w	r5, [r8, #4]
 8009c84:	604b      	str	r3, [r1, #4]
 8009c86:	6853      	ldr	r3, [r2, #4]
 8009c88:	f043 0301 	orr.w	r3, r3, #1
 8009c8c:	3108      	adds	r1, #8
 8009c8e:	6053      	str	r3, [r2, #4]
 8009c90:	4648      	mov	r0, r9
 8009c92:	f7fe fdc1 	bl	8008818 <_free_r>
 8009c96:	e7e6      	b.n	8009c66 <_realloc_r+0x15a>
 8009c98:	4639      	mov	r1, r7
 8009c9a:	4648      	mov	r0, r9
 8009c9c:	f7ff f8d0 	bl	8008e40 <_malloc_r>
 8009ca0:	4607      	mov	r7, r0
 8009ca2:	b1d8      	cbz	r0, 8009cdc <_realloc_r+0x1d0>
 8009ca4:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009ca8:	f023 0201 	bic.w	r2, r3, #1
 8009cac:	4442      	add	r2, r8
 8009cae:	f1a0 0108 	sub.w	r1, r0, #8
 8009cb2:	4291      	cmp	r1, r2
 8009cb4:	f000 80ac 	beq.w	8009e10 <_realloc_r+0x304>
 8009cb8:	1f22      	subs	r2, r4, #4
 8009cba:	2a24      	cmp	r2, #36	; 0x24
 8009cbc:	f200 8099 	bhi.w	8009df2 <_realloc_r+0x2e6>
 8009cc0:	2a13      	cmp	r2, #19
 8009cc2:	d86a      	bhi.n	8009d9a <_realloc_r+0x28e>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	4632      	mov	r2, r6
 8009cc8:	6811      	ldr	r1, [r2, #0]
 8009cca:	6019      	str	r1, [r3, #0]
 8009ccc:	6851      	ldr	r1, [r2, #4]
 8009cce:	6059      	str	r1, [r3, #4]
 8009cd0:	6892      	ldr	r2, [r2, #8]
 8009cd2:	609a      	str	r2, [r3, #8]
 8009cd4:	4631      	mov	r1, r6
 8009cd6:	4648      	mov	r0, r9
 8009cd8:	f7fe fd9e 	bl	8008818 <_free_r>
 8009cdc:	4648      	mov	r0, r9
 8009cde:	f7ff fbf1 	bl	80094c4 <__malloc_unlock>
 8009ce2:	4638      	mov	r0, r7
 8009ce4:	b003      	add	sp, #12
 8009ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cea:	4611      	mov	r1, r2
 8009cec:	b003      	add	sp, #12
 8009cee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf2:	f7ff b8a5 	b.w	8008e40 <_malloc_r>
 8009cf6:	68ca      	ldr	r2, [r1, #12]
 8009cf8:	6889      	ldr	r1, [r1, #8]
 8009cfa:	4604      	mov	r4, r0
 8009cfc:	60ca      	str	r2, [r1, #12]
 8009cfe:	6091      	str	r1, [r2, #8]
 8009d00:	e7a4      	b.n	8009c4c <_realloc_r+0x140>
 8009d02:	6841      	ldr	r1, [r0, #4]
 8009d04:	f021 0103 	bic.w	r1, r1, #3
 8009d08:	4421      	add	r1, r4
 8009d0a:	f105 0010 	add.w	r0, r5, #16
 8009d0e:	4281      	cmp	r1, r0
 8009d10:	da5b      	bge.n	8009dca <_realloc_r+0x2be>
 8009d12:	07db      	lsls	r3, r3, #31
 8009d14:	d4c0      	bmi.n	8009c98 <_realloc_r+0x18c>
 8009d16:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009d1a:	ebc3 0a08 	rsb	sl, r3, r8
 8009d1e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009d22:	f023 0303 	bic.w	r3, r3, #3
 8009d26:	eb01 0c03 	add.w	ip, r1, r3
 8009d2a:	4560      	cmp	r0, ip
 8009d2c:	f73f af66 	bgt.w	8009bfc <_realloc_r+0xf0>
 8009d30:	4657      	mov	r7, sl
 8009d32:	f8da 300c 	ldr.w	r3, [sl, #12]
 8009d36:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8009d3a:	1f22      	subs	r2, r4, #4
 8009d3c:	2a24      	cmp	r2, #36	; 0x24
 8009d3e:	60cb      	str	r3, [r1, #12]
 8009d40:	6099      	str	r1, [r3, #8]
 8009d42:	f200 80b8 	bhi.w	8009eb6 <_realloc_r+0x3aa>
 8009d46:	2a13      	cmp	r2, #19
 8009d48:	f240 80a9 	bls.w	8009e9e <_realloc_r+0x392>
 8009d4c:	6833      	ldr	r3, [r6, #0]
 8009d4e:	f8ca 3008 	str.w	r3, [sl, #8]
 8009d52:	6873      	ldr	r3, [r6, #4]
 8009d54:	f8ca 300c 	str.w	r3, [sl, #12]
 8009d58:	2a1b      	cmp	r2, #27
 8009d5a:	f200 80b5 	bhi.w	8009ec8 <_realloc_r+0x3bc>
 8009d5e:	3608      	adds	r6, #8
 8009d60:	f10a 0310 	add.w	r3, sl, #16
 8009d64:	6832      	ldr	r2, [r6, #0]
 8009d66:	601a      	str	r2, [r3, #0]
 8009d68:	6872      	ldr	r2, [r6, #4]
 8009d6a:	605a      	str	r2, [r3, #4]
 8009d6c:	68b2      	ldr	r2, [r6, #8]
 8009d6e:	609a      	str	r2, [r3, #8]
 8009d70:	eb0a 0205 	add.w	r2, sl, r5
 8009d74:	ebc5 030c 	rsb	r3, r5, ip
 8009d78:	f043 0301 	orr.w	r3, r3, #1
 8009d7c:	f8cb 2008 	str.w	r2, [fp, #8]
 8009d80:	6053      	str	r3, [r2, #4]
 8009d82:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009d86:	f003 0301 	and.w	r3, r3, #1
 8009d8a:	431d      	orrs	r5, r3
 8009d8c:	4648      	mov	r0, r9
 8009d8e:	f8ca 5004 	str.w	r5, [sl, #4]
 8009d92:	f7ff fb97 	bl	80094c4 <__malloc_unlock>
 8009d96:	4638      	mov	r0, r7
 8009d98:	e769      	b.n	8009c6e <_realloc_r+0x162>
 8009d9a:	6833      	ldr	r3, [r6, #0]
 8009d9c:	6003      	str	r3, [r0, #0]
 8009d9e:	6873      	ldr	r3, [r6, #4]
 8009da0:	6043      	str	r3, [r0, #4]
 8009da2:	2a1b      	cmp	r2, #27
 8009da4:	d829      	bhi.n	8009dfa <_realloc_r+0x2ee>
 8009da6:	f100 0308 	add.w	r3, r0, #8
 8009daa:	f106 0208 	add.w	r2, r6, #8
 8009dae:	e78b      	b.n	8009cc8 <_realloc_r+0x1bc>
 8009db0:	463b      	mov	r3, r7
 8009db2:	6832      	ldr	r2, [r6, #0]
 8009db4:	601a      	str	r2, [r3, #0]
 8009db6:	6872      	ldr	r2, [r6, #4]
 8009db8:	605a      	str	r2, [r3, #4]
 8009dba:	68b2      	ldr	r2, [r6, #8]
 8009dbc:	609a      	str	r2, [r3, #8]
 8009dbe:	463e      	mov	r6, r7
 8009dc0:	4674      	mov	r4, lr
 8009dc2:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009dc6:	46d0      	mov	r8, sl
 8009dc8:	e740      	b.n	8009c4c <_realloc_r+0x140>
 8009dca:	eb08 0205 	add.w	r2, r8, r5
 8009dce:	1b4b      	subs	r3, r1, r5
 8009dd0:	f043 0301 	orr.w	r3, r3, #1
 8009dd4:	f8cb 2008 	str.w	r2, [fp, #8]
 8009dd8:	6053      	str	r3, [r2, #4]
 8009dda:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009dde:	f003 0301 	and.w	r3, r3, #1
 8009de2:	431d      	orrs	r5, r3
 8009de4:	4648      	mov	r0, r9
 8009de6:	f846 5c04 	str.w	r5, [r6, #-4]
 8009dea:	f7ff fb6b 	bl	80094c4 <__malloc_unlock>
 8009dee:	4630      	mov	r0, r6
 8009df0:	e73d      	b.n	8009c6e <_realloc_r+0x162>
 8009df2:	4631      	mov	r1, r6
 8009df4:	f7ff fb00 	bl	80093f8 <memmove>
 8009df8:	e76c      	b.n	8009cd4 <_realloc_r+0x1c8>
 8009dfa:	68b3      	ldr	r3, [r6, #8]
 8009dfc:	6083      	str	r3, [r0, #8]
 8009dfe:	68f3      	ldr	r3, [r6, #12]
 8009e00:	60c3      	str	r3, [r0, #12]
 8009e02:	2a24      	cmp	r2, #36	; 0x24
 8009e04:	d02c      	beq.n	8009e60 <_realloc_r+0x354>
 8009e06:	f100 0310 	add.w	r3, r0, #16
 8009e0a:	f106 0210 	add.w	r2, r6, #16
 8009e0e:	e75b      	b.n	8009cc8 <_realloc_r+0x1bc>
 8009e10:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8009e14:	f022 0203 	bic.w	r2, r2, #3
 8009e18:	4414      	add	r4, r2
 8009e1a:	e717      	b.n	8009c4c <_realloc_r+0x140>
 8009e1c:	4631      	mov	r1, r6
 8009e1e:	4638      	mov	r0, r7
 8009e20:	4674      	mov	r4, lr
 8009e22:	463e      	mov	r6, r7
 8009e24:	f7ff fae8 	bl	80093f8 <memmove>
 8009e28:	46d0      	mov	r8, sl
 8009e2a:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009e2e:	e70d      	b.n	8009c4c <_realloc_r+0x140>
 8009e30:	463a      	mov	r2, r7
 8009e32:	e700      	b.n	8009c36 <_realloc_r+0x12a>
 8009e34:	4631      	mov	r1, r6
 8009e36:	4638      	mov	r0, r7
 8009e38:	461c      	mov	r4, r3
 8009e3a:	463e      	mov	r6, r7
 8009e3c:	f7ff fadc 	bl	80093f8 <memmove>
 8009e40:	46d0      	mov	r8, sl
 8009e42:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009e46:	e701      	b.n	8009c4c <_realloc_r+0x140>
 8009e48:	68b3      	ldr	r3, [r6, #8]
 8009e4a:	f8ca 3010 	str.w	r3, [sl, #16]
 8009e4e:	68f3      	ldr	r3, [r6, #12]
 8009e50:	f8ca 3014 	str.w	r3, [sl, #20]
 8009e54:	2a24      	cmp	r2, #36	; 0x24
 8009e56:	d018      	beq.n	8009e8a <_realloc_r+0x37e>
 8009e58:	3610      	adds	r6, #16
 8009e5a:	f10a 0318 	add.w	r3, sl, #24
 8009e5e:	e7a8      	b.n	8009db2 <_realloc_r+0x2a6>
 8009e60:	6933      	ldr	r3, [r6, #16]
 8009e62:	6103      	str	r3, [r0, #16]
 8009e64:	6973      	ldr	r3, [r6, #20]
 8009e66:	6143      	str	r3, [r0, #20]
 8009e68:	f106 0218 	add.w	r2, r6, #24
 8009e6c:	f100 0318 	add.w	r3, r0, #24
 8009e70:	e72a      	b.n	8009cc8 <_realloc_r+0x1bc>
 8009e72:	68b1      	ldr	r1, [r6, #8]
 8009e74:	f8ca 1010 	str.w	r1, [sl, #16]
 8009e78:	68f1      	ldr	r1, [r6, #12]
 8009e7a:	f8ca 1014 	str.w	r1, [sl, #20]
 8009e7e:	2a24      	cmp	r2, #36	; 0x24
 8009e80:	d00f      	beq.n	8009ea2 <_realloc_r+0x396>
 8009e82:	3610      	adds	r6, #16
 8009e84:	f10a 0218 	add.w	r2, sl, #24
 8009e88:	e6d5      	b.n	8009c36 <_realloc_r+0x12a>
 8009e8a:	6933      	ldr	r3, [r6, #16]
 8009e8c:	f8ca 3018 	str.w	r3, [sl, #24]
 8009e90:	6973      	ldr	r3, [r6, #20]
 8009e92:	f8ca 301c 	str.w	r3, [sl, #28]
 8009e96:	3618      	adds	r6, #24
 8009e98:	f10a 0320 	add.w	r3, sl, #32
 8009e9c:	e789      	b.n	8009db2 <_realloc_r+0x2a6>
 8009e9e:	463b      	mov	r3, r7
 8009ea0:	e760      	b.n	8009d64 <_realloc_r+0x258>
 8009ea2:	6932      	ldr	r2, [r6, #16]
 8009ea4:	f8ca 2018 	str.w	r2, [sl, #24]
 8009ea8:	6972      	ldr	r2, [r6, #20]
 8009eaa:	f8ca 201c 	str.w	r2, [sl, #28]
 8009eae:	3618      	adds	r6, #24
 8009eb0:	f10a 0220 	add.w	r2, sl, #32
 8009eb4:	e6bf      	b.n	8009c36 <_realloc_r+0x12a>
 8009eb6:	4631      	mov	r1, r6
 8009eb8:	4638      	mov	r0, r7
 8009eba:	f8cd c004 	str.w	ip, [sp, #4]
 8009ebe:	f7ff fa9b 	bl	80093f8 <memmove>
 8009ec2:	f8dd c004 	ldr.w	ip, [sp, #4]
 8009ec6:	e753      	b.n	8009d70 <_realloc_r+0x264>
 8009ec8:	68b3      	ldr	r3, [r6, #8]
 8009eca:	f8ca 3010 	str.w	r3, [sl, #16]
 8009ece:	68f3      	ldr	r3, [r6, #12]
 8009ed0:	f8ca 3014 	str.w	r3, [sl, #20]
 8009ed4:	2a24      	cmp	r2, #36	; 0x24
 8009ed6:	d003      	beq.n	8009ee0 <_realloc_r+0x3d4>
 8009ed8:	3610      	adds	r6, #16
 8009eda:	f10a 0318 	add.w	r3, sl, #24
 8009ede:	e741      	b.n	8009d64 <_realloc_r+0x258>
 8009ee0:	6933      	ldr	r3, [r6, #16]
 8009ee2:	f8ca 3018 	str.w	r3, [sl, #24]
 8009ee6:	6973      	ldr	r3, [r6, #20]
 8009ee8:	f8ca 301c 	str.w	r3, [sl, #28]
 8009eec:	3618      	adds	r6, #24
 8009eee:	f10a 0320 	add.w	r3, sl, #32
 8009ef2:	e737      	b.n	8009d64 <_realloc_r+0x258>
 8009ef4:	20000628 	.word	0x20000628

08009ef8 <__fpclassifyd>:
 8009ef8:	ec53 2b10 	vmov	r2, r3, d0
 8009efc:	b410      	push	{r4}
 8009efe:	f033 4400 	bics.w	r4, r3, #2147483648	; 0x80000000
 8009f02:	d008      	beq.n	8009f16 <__fpclassifyd+0x1e>
 8009f04:	4911      	ldr	r1, [pc, #68]	; (8009f4c <__fpclassifyd+0x54>)
 8009f06:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 8009f0a:	4288      	cmp	r0, r1
 8009f0c:	d808      	bhi.n	8009f20 <__fpclassifyd+0x28>
 8009f0e:	2004      	movs	r0, #4
 8009f10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f14:	4770      	bx	lr
 8009f16:	b91a      	cbnz	r2, 8009f20 <__fpclassifyd+0x28>
 8009f18:	2002      	movs	r0, #2
 8009f1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f1e:	4770      	bx	lr
 8009f20:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 8009f24:	4909      	ldr	r1, [pc, #36]	; (8009f4c <__fpclassifyd+0x54>)
 8009f26:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009f2a:	428b      	cmp	r3, r1
 8009f2c:	d9ef      	bls.n	8009f0e <__fpclassifyd+0x16>
 8009f2e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009f32:	d201      	bcs.n	8009f38 <__fpclassifyd+0x40>
 8009f34:	2003      	movs	r0, #3
 8009f36:	e7eb      	b.n	8009f10 <__fpclassifyd+0x18>
 8009f38:	4b05      	ldr	r3, [pc, #20]	; (8009f50 <__fpclassifyd+0x58>)
 8009f3a:	429c      	cmp	r4, r3
 8009f3c:	d001      	beq.n	8009f42 <__fpclassifyd+0x4a>
 8009f3e:	2000      	movs	r0, #0
 8009f40:	e7e6      	b.n	8009f10 <__fpclassifyd+0x18>
 8009f42:	fab2 f082 	clz	r0, r2
 8009f46:	0940      	lsrs	r0, r0, #5
 8009f48:	e7e2      	b.n	8009f10 <__fpclassifyd+0x18>
 8009f4a:	bf00      	nop
 8009f4c:	7fdfffff 	.word	0x7fdfffff
 8009f50:	7ff00000 	.word	0x7ff00000

08009f54 <__sread>:
 8009f54:	b510      	push	{r4, lr}
 8009f56:	460c      	mov	r4, r1
 8009f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f5c:	f7f8 fa36 	bl	80023cc <_read_r>
 8009f60:	2800      	cmp	r0, #0
 8009f62:	db03      	blt.n	8009f6c <__sread+0x18>
 8009f64:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009f66:	4403      	add	r3, r0
 8009f68:	6523      	str	r3, [r4, #80]	; 0x50
 8009f6a:	bd10      	pop	{r4, pc}
 8009f6c:	89a3      	ldrh	r3, [r4, #12]
 8009f6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f72:	81a3      	strh	r3, [r4, #12]
 8009f74:	bd10      	pop	{r4, pc}
 8009f76:	bf00      	nop

08009f78 <__swrite>:
 8009f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f7c:	4616      	mov	r6, r2
 8009f7e:	898a      	ldrh	r2, [r1, #12]
 8009f80:	461d      	mov	r5, r3
 8009f82:	05d3      	lsls	r3, r2, #23
 8009f84:	460c      	mov	r4, r1
 8009f86:	4607      	mov	r7, r0
 8009f88:	d506      	bpl.n	8009f98 <__swrite+0x20>
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f90:	2302      	movs	r3, #2
 8009f92:	f7f8 f94b 	bl	800222c <_lseek_r>
 8009f96:	89a2      	ldrh	r2, [r4, #12]
 8009f98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f9c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009fa0:	81a2      	strh	r2, [r4, #12]
 8009fa2:	4638      	mov	r0, r7
 8009fa4:	4632      	mov	r2, r6
 8009fa6:	462b      	mov	r3, r5
 8009fa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fac:	f7f8 ba98 	b.w	80024e0 <_write_r>

08009fb0 <__sseek>:
 8009fb0:	b510      	push	{r4, lr}
 8009fb2:	460c      	mov	r4, r1
 8009fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fb8:	f7f8 f938 	bl	800222c <_lseek_r>
 8009fbc:	89a3      	ldrh	r3, [r4, #12]
 8009fbe:	1c42      	adds	r2, r0, #1
 8009fc0:	bf0e      	itee	eq
 8009fc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009fc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009fca:	6520      	strne	r0, [r4, #80]	; 0x50
 8009fcc:	81a3      	strh	r3, [r4, #12]
 8009fce:	bd10      	pop	{r4, pc}

08009fd0 <__sclose>:
 8009fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fd4:	f7f8 b920 	b.w	8002218 <_close_r>

08009fd8 <__sprint_r.part.0>:
 8009fd8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8009fda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fde:	049c      	lsls	r4, r3, #18
 8009fe0:	460f      	mov	r7, r1
 8009fe2:	4692      	mov	sl, r2
 8009fe4:	d52b      	bpl.n	800a03e <__sprint_r.part.0+0x66>
 8009fe6:	6893      	ldr	r3, [r2, #8]
 8009fe8:	6812      	ldr	r2, [r2, #0]
 8009fea:	b333      	cbz	r3, 800a03a <__sprint_r.part.0+0x62>
 8009fec:	4680      	mov	r8, r0
 8009fee:	f102 0908 	add.w	r9, r2, #8
 8009ff2:	e919 0060 	ldmdb	r9, {r5, r6}
 8009ff6:	08b6      	lsrs	r6, r6, #2
 8009ff8:	d017      	beq.n	800a02a <__sprint_r.part.0+0x52>
 8009ffa:	3d04      	subs	r5, #4
 8009ffc:	2400      	movs	r4, #0
 8009ffe:	e001      	b.n	800a004 <__sprint_r.part.0+0x2c>
 800a000:	42a6      	cmp	r6, r4
 800a002:	d010      	beq.n	800a026 <__sprint_r.part.0+0x4e>
 800a004:	4640      	mov	r0, r8
 800a006:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800a00a:	463a      	mov	r2, r7
 800a00c:	f000 f99c 	bl	800a348 <_fputwc_r>
 800a010:	1c43      	adds	r3, r0, #1
 800a012:	f104 0401 	add.w	r4, r4, #1
 800a016:	d1f3      	bne.n	800a000 <__sprint_r.part.0+0x28>
 800a018:	2300      	movs	r3, #0
 800a01a:	f8ca 3008 	str.w	r3, [sl, #8]
 800a01e:	f8ca 3004 	str.w	r3, [sl, #4]
 800a022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a026:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a02a:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 800a02e:	f8ca 3008 	str.w	r3, [sl, #8]
 800a032:	f109 0908 	add.w	r9, r9, #8
 800a036:	2b00      	cmp	r3, #0
 800a038:	d1db      	bne.n	8009ff2 <__sprint_r.part.0+0x1a>
 800a03a:	2000      	movs	r0, #0
 800a03c:	e7ec      	b.n	800a018 <__sprint_r.part.0+0x40>
 800a03e:	f7fe fcc3 	bl	80089c8 <__sfvwrite_r>
 800a042:	2300      	movs	r3, #0
 800a044:	f8ca 3008 	str.w	r3, [sl, #8]
 800a048:	f8ca 3004 	str.w	r3, [sl, #4]
 800a04c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a050 <__sprint_r>:
 800a050:	6893      	ldr	r3, [r2, #8]
 800a052:	b410      	push	{r4}
 800a054:	b11b      	cbz	r3, 800a05e <__sprint_r+0xe>
 800a056:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a05a:	f7ff bfbd 	b.w	8009fd8 <__sprint_r.part.0>
 800a05e:	4618      	mov	r0, r3
 800a060:	6053      	str	r3, [r2, #4]
 800a062:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <__swbuf_r>:
 800a068:	b570      	push	{r4, r5, r6, lr}
 800a06a:	460d      	mov	r5, r1
 800a06c:	4614      	mov	r4, r2
 800a06e:	4606      	mov	r6, r0
 800a070:	b110      	cbz	r0, 800a078 <__swbuf_r+0x10>
 800a072:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a074:	2b00      	cmp	r3, #0
 800a076:	d048      	beq.n	800a10a <__swbuf_r+0xa2>
 800a078:	89a2      	ldrh	r2, [r4, #12]
 800a07a:	69a3      	ldr	r3, [r4, #24]
 800a07c:	60a3      	str	r3, [r4, #8]
 800a07e:	b291      	uxth	r1, r2
 800a080:	0708      	lsls	r0, r1, #28
 800a082:	d538      	bpl.n	800a0f6 <__swbuf_r+0x8e>
 800a084:	6923      	ldr	r3, [r4, #16]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d035      	beq.n	800a0f6 <__swbuf_r+0x8e>
 800a08a:	0489      	lsls	r1, r1, #18
 800a08c:	b2ed      	uxtb	r5, r5
 800a08e:	d515      	bpl.n	800a0bc <__swbuf_r+0x54>
 800a090:	6822      	ldr	r2, [r4, #0]
 800a092:	6961      	ldr	r1, [r4, #20]
 800a094:	1ad3      	subs	r3, r2, r3
 800a096:	428b      	cmp	r3, r1
 800a098:	da1c      	bge.n	800a0d4 <__swbuf_r+0x6c>
 800a09a:	3301      	adds	r3, #1
 800a09c:	68a1      	ldr	r1, [r4, #8]
 800a09e:	1c50      	adds	r0, r2, #1
 800a0a0:	3901      	subs	r1, #1
 800a0a2:	60a1      	str	r1, [r4, #8]
 800a0a4:	6020      	str	r0, [r4, #0]
 800a0a6:	7015      	strb	r5, [r2, #0]
 800a0a8:	6962      	ldr	r2, [r4, #20]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d01a      	beq.n	800a0e4 <__swbuf_r+0x7c>
 800a0ae:	89a3      	ldrh	r3, [r4, #12]
 800a0b0:	07db      	lsls	r3, r3, #31
 800a0b2:	d501      	bpl.n	800a0b8 <__swbuf_r+0x50>
 800a0b4:	2d0a      	cmp	r5, #10
 800a0b6:	d015      	beq.n	800a0e4 <__swbuf_r+0x7c>
 800a0b8:	4628      	mov	r0, r5
 800a0ba:	bd70      	pop	{r4, r5, r6, pc}
 800a0bc:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a0be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a0c2:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800a0c6:	81a2      	strh	r2, [r4, #12]
 800a0c8:	6822      	ldr	r2, [r4, #0]
 800a0ca:	6661      	str	r1, [r4, #100]	; 0x64
 800a0cc:	6961      	ldr	r1, [r4, #20]
 800a0ce:	1ad3      	subs	r3, r2, r3
 800a0d0:	428b      	cmp	r3, r1
 800a0d2:	dbe2      	blt.n	800a09a <__swbuf_r+0x32>
 800a0d4:	4630      	mov	r0, r6
 800a0d6:	4621      	mov	r1, r4
 800a0d8:	f7fe fa9c 	bl	8008614 <_fflush_r>
 800a0dc:	b940      	cbnz	r0, 800a0f0 <__swbuf_r+0x88>
 800a0de:	6822      	ldr	r2, [r4, #0]
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e7db      	b.n	800a09c <__swbuf_r+0x34>
 800a0e4:	4630      	mov	r0, r6
 800a0e6:	4621      	mov	r1, r4
 800a0e8:	f7fe fa94 	bl	8008614 <_fflush_r>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	d0e3      	beq.n	800a0b8 <__swbuf_r+0x50>
 800a0f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0f4:	bd70      	pop	{r4, r5, r6, pc}
 800a0f6:	4630      	mov	r0, r6
 800a0f8:	4621      	mov	r1, r4
 800a0fa:	f7fd f985 	bl	8007408 <__swsetup_r>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	d1f6      	bne.n	800a0f0 <__swbuf_r+0x88>
 800a102:	89a2      	ldrh	r2, [r4, #12]
 800a104:	6923      	ldr	r3, [r4, #16]
 800a106:	b291      	uxth	r1, r2
 800a108:	e7bf      	b.n	800a08a <__swbuf_r+0x22>
 800a10a:	f7fe fb17 	bl	800873c <__sinit>
 800a10e:	e7b3      	b.n	800a078 <__swbuf_r+0x10>

0800a110 <__register_exitproc>:
 800a110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a114:	4c25      	ldr	r4, [pc, #148]	; (800a1ac <__register_exitproc+0x9c>)
 800a116:	6825      	ldr	r5, [r4, #0]
 800a118:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 800a11c:	4606      	mov	r6, r0
 800a11e:	4688      	mov	r8, r1
 800a120:	4692      	mov	sl, r2
 800a122:	4699      	mov	r9, r3
 800a124:	b3cc      	cbz	r4, 800a19a <__register_exitproc+0x8a>
 800a126:	6860      	ldr	r0, [r4, #4]
 800a128:	281f      	cmp	r0, #31
 800a12a:	dc18      	bgt.n	800a15e <__register_exitproc+0x4e>
 800a12c:	1c43      	adds	r3, r0, #1
 800a12e:	b17e      	cbz	r6, 800a150 <__register_exitproc+0x40>
 800a130:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800a134:	2101      	movs	r1, #1
 800a136:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 800a13a:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
 800a13e:	fa01 f200 	lsl.w	r2, r1, r0
 800a142:	4317      	orrs	r7, r2
 800a144:	2e02      	cmp	r6, #2
 800a146:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 800a14a:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 800a14e:	d01e      	beq.n	800a18e <__register_exitproc+0x7e>
 800a150:	3002      	adds	r0, #2
 800a152:	6063      	str	r3, [r4, #4]
 800a154:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 800a158:	2000      	movs	r0, #0
 800a15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a15e:	4b14      	ldr	r3, [pc, #80]	; (800a1b0 <__register_exitproc+0xa0>)
 800a160:	b303      	cbz	r3, 800a1a4 <__register_exitproc+0x94>
 800a162:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800a166:	f7fe fe63 	bl	8008e30 <malloc>
 800a16a:	4604      	mov	r4, r0
 800a16c:	b1d0      	cbz	r0, 800a1a4 <__register_exitproc+0x94>
 800a16e:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800a172:	2700      	movs	r7, #0
 800a174:	e880 0088 	stmia.w	r0, {r3, r7}
 800a178:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800a17c:	4638      	mov	r0, r7
 800a17e:	2301      	movs	r3, #1
 800a180:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 800a184:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 800a188:	2e00      	cmp	r6, #0
 800a18a:	d0e1      	beq.n	800a150 <__register_exitproc+0x40>
 800a18c:	e7d0      	b.n	800a130 <__register_exitproc+0x20>
 800a18e:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 800a192:	430a      	orrs	r2, r1
 800a194:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 800a198:	e7da      	b.n	800a150 <__register_exitproc+0x40>
 800a19a:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 800a19e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800a1a2:	e7c0      	b.n	800a126 <__register_exitproc+0x16>
 800a1a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ac:	08019e08 	.word	0x08019e08
 800a1b0:	08008e31 	.word	0x08008e31

0800a1b4 <_calloc_r>:
 800a1b4:	b510      	push	{r4, lr}
 800a1b6:	fb02 f101 	mul.w	r1, r2, r1
 800a1ba:	f7fe fe41 	bl	8008e40 <_malloc_r>
 800a1be:	4604      	mov	r4, r0
 800a1c0:	b168      	cbz	r0, 800a1de <_calloc_r+0x2a>
 800a1c2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a1c6:	f022 0203 	bic.w	r2, r2, #3
 800a1ca:	3a04      	subs	r2, #4
 800a1cc:	2a24      	cmp	r2, #36	; 0x24
 800a1ce:	d818      	bhi.n	800a202 <_calloc_r+0x4e>
 800a1d0:	2a13      	cmp	r2, #19
 800a1d2:	d806      	bhi.n	800a1e2 <_calloc_r+0x2e>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	601a      	str	r2, [r3, #0]
 800a1da:	605a      	str	r2, [r3, #4]
 800a1dc:	609a      	str	r2, [r3, #8]
 800a1de:	4620      	mov	r0, r4
 800a1e0:	bd10      	pop	{r4, pc}
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	2a1b      	cmp	r2, #27
 800a1e6:	6003      	str	r3, [r0, #0]
 800a1e8:	6043      	str	r3, [r0, #4]
 800a1ea:	d90f      	bls.n	800a20c <_calloc_r+0x58>
 800a1ec:	2a24      	cmp	r2, #36	; 0x24
 800a1ee:	6083      	str	r3, [r0, #8]
 800a1f0:	60c3      	str	r3, [r0, #12]
 800a1f2:	bf05      	ittet	eq
 800a1f4:	6103      	streq	r3, [r0, #16]
 800a1f6:	6143      	streq	r3, [r0, #20]
 800a1f8:	f100 0310 	addne.w	r3, r0, #16
 800a1fc:	f100 0318 	addeq.w	r3, r0, #24
 800a200:	e7e9      	b.n	800a1d6 <_calloc_r+0x22>
 800a202:	2100      	movs	r1, #0
 800a204:	f7fb fc08 	bl	8005a18 <memset>
 800a208:	4620      	mov	r0, r4
 800a20a:	bd10      	pop	{r4, pc}
 800a20c:	f100 0308 	add.w	r3, r0, #8
 800a210:	e7e1      	b.n	800a1d6 <_calloc_r+0x22>
 800a212:	bf00      	nop

0800a214 <_fclose_r>:
 800a214:	2900      	cmp	r1, #0
 800a216:	d03d      	beq.n	800a294 <_fclose_r+0x80>
 800a218:	b570      	push	{r4, r5, r6, lr}
 800a21a:	4605      	mov	r5, r0
 800a21c:	460c      	mov	r4, r1
 800a21e:	b108      	cbz	r0, 800a224 <_fclose_r+0x10>
 800a220:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a222:	b37b      	cbz	r3, 800a284 <_fclose_r+0x70>
 800a224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a228:	b90b      	cbnz	r3, 800a22e <_fclose_r+0x1a>
 800a22a:	2000      	movs	r0, #0
 800a22c:	bd70      	pop	{r4, r5, r6, pc}
 800a22e:	4628      	mov	r0, r5
 800a230:	4621      	mov	r1, r4
 800a232:	f7fe f945 	bl	80084c0 <__sflush_r>
 800a236:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a238:	4606      	mov	r6, r0
 800a23a:	b133      	cbz	r3, 800a24a <_fclose_r+0x36>
 800a23c:	4628      	mov	r0, r5
 800a23e:	69e1      	ldr	r1, [r4, #28]
 800a240:	4798      	blx	r3
 800a242:	2800      	cmp	r0, #0
 800a244:	bfb8      	it	lt
 800a246:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 800a24a:	89a3      	ldrh	r3, [r4, #12]
 800a24c:	061b      	lsls	r3, r3, #24
 800a24e:	d41c      	bmi.n	800a28a <_fclose_r+0x76>
 800a250:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a252:	b141      	cbz	r1, 800a266 <_fclose_r+0x52>
 800a254:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a258:	4299      	cmp	r1, r3
 800a25a:	d002      	beq.n	800a262 <_fclose_r+0x4e>
 800a25c:	4628      	mov	r0, r5
 800a25e:	f7fe fadb 	bl	8008818 <_free_r>
 800a262:	2300      	movs	r3, #0
 800a264:	6323      	str	r3, [r4, #48]	; 0x30
 800a266:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a268:	b121      	cbz	r1, 800a274 <_fclose_r+0x60>
 800a26a:	4628      	mov	r0, r5
 800a26c:	f7fe fad4 	bl	8008818 <_free_r>
 800a270:	2300      	movs	r3, #0
 800a272:	6463      	str	r3, [r4, #68]	; 0x44
 800a274:	f7fe fa68 	bl	8008748 <__sfp_lock_acquire>
 800a278:	2300      	movs	r3, #0
 800a27a:	81a3      	strh	r3, [r4, #12]
 800a27c:	f7fe fa66 	bl	800874c <__sfp_lock_release>
 800a280:	4630      	mov	r0, r6
 800a282:	bd70      	pop	{r4, r5, r6, pc}
 800a284:	f7fe fa5a 	bl	800873c <__sinit>
 800a288:	e7cc      	b.n	800a224 <_fclose_r+0x10>
 800a28a:	4628      	mov	r0, r5
 800a28c:	6921      	ldr	r1, [r4, #16]
 800a28e:	f7fe fac3 	bl	8008818 <_free_r>
 800a292:	e7dd      	b.n	800a250 <_fclose_r+0x3c>
 800a294:	2000      	movs	r0, #0
 800a296:	4770      	bx	lr

0800a298 <__fputwc>:
 800a298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a29c:	b082      	sub	sp, #8
 800a29e:	4607      	mov	r7, r0
 800a2a0:	460e      	mov	r6, r1
 800a2a2:	4614      	mov	r4, r2
 800a2a4:	f7fe fd4a 	bl	8008d3c <__locale_mb_cur_max>
 800a2a8:	2801      	cmp	r0, #1
 800a2aa:	d041      	beq.n	800a330 <__fputwc+0x98>
 800a2ac:	4638      	mov	r0, r7
 800a2ae:	a901      	add	r1, sp, #4
 800a2b0:	4632      	mov	r2, r6
 800a2b2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800a2b6:	f000 f859 	bl	800a36c <_wcrtomb_r>
 800a2ba:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a2be:	4680      	mov	r8, r0
 800a2c0:	d02f      	beq.n	800a322 <__fputwc+0x8a>
 800a2c2:	2800      	cmp	r0, #0
 800a2c4:	d03c      	beq.n	800a340 <__fputwc+0xa8>
 800a2c6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800a2ca:	2500      	movs	r5, #0
 800a2cc:	e009      	b.n	800a2e2 <__fputwc+0x4a>
 800a2ce:	6823      	ldr	r3, [r4, #0]
 800a2d0:	7019      	strb	r1, [r3, #0]
 800a2d2:	6823      	ldr	r3, [r4, #0]
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	6023      	str	r3, [r4, #0]
 800a2d8:	3501      	adds	r5, #1
 800a2da:	45a8      	cmp	r8, r5
 800a2dc:	d930      	bls.n	800a340 <__fputwc+0xa8>
 800a2de:	ab01      	add	r3, sp, #4
 800a2e0:	5d59      	ldrb	r1, [r3, r5]
 800a2e2:	68a3      	ldr	r3, [r4, #8]
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	60a3      	str	r3, [r4, #8]
 800a2ea:	daf0      	bge.n	800a2ce <__fputwc+0x36>
 800a2ec:	69a2      	ldr	r2, [r4, #24]
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	db07      	blt.n	800a302 <__fputwc+0x6a>
 800a2f2:	6823      	ldr	r3, [r4, #0]
 800a2f4:	7019      	strb	r1, [r3, #0]
 800a2f6:	6823      	ldr	r3, [r4, #0]
 800a2f8:	7819      	ldrb	r1, [r3, #0]
 800a2fa:	290a      	cmp	r1, #10
 800a2fc:	f103 0301 	add.w	r3, r3, #1
 800a300:	d1e9      	bne.n	800a2d6 <__fputwc+0x3e>
 800a302:	4638      	mov	r0, r7
 800a304:	4622      	mov	r2, r4
 800a306:	f7ff feaf 	bl	800a068 <__swbuf_r>
 800a30a:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 800a30e:	fab0 f080 	clz	r0, r0
 800a312:	0940      	lsrs	r0, r0, #5
 800a314:	2800      	cmp	r0, #0
 800a316:	d0df      	beq.n	800a2d8 <__fputwc+0x40>
 800a318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a31c:	b002      	add	sp, #8
 800a31e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a322:	89a3      	ldrh	r3, [r4, #12]
 800a324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a328:	81a3      	strh	r3, [r4, #12]
 800a32a:	b002      	add	sp, #8
 800a32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a330:	1e73      	subs	r3, r6, #1
 800a332:	2bfe      	cmp	r3, #254	; 0xfe
 800a334:	d8ba      	bhi.n	800a2ac <__fputwc+0x14>
 800a336:	b2f1      	uxtb	r1, r6
 800a338:	4680      	mov	r8, r0
 800a33a:	f88d 1004 	strb.w	r1, [sp, #4]
 800a33e:	e7c4      	b.n	800a2ca <__fputwc+0x32>
 800a340:	4630      	mov	r0, r6
 800a342:	b002      	add	sp, #8
 800a344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a348 <_fputwc_r>:
 800a348:	8993      	ldrh	r3, [r2, #12]
 800a34a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800a34e:	d10b      	bne.n	800a368 <_fputwc_r+0x20>
 800a350:	b410      	push	{r4}
 800a352:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800a354:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a358:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800a35c:	6654      	str	r4, [r2, #100]	; 0x64
 800a35e:	8193      	strh	r3, [r2, #12]
 800a360:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a364:	f7ff bf98 	b.w	800a298 <__fputwc>
 800a368:	f7ff bf96 	b.w	800a298 <__fputwc>

0800a36c <_wcrtomb_r>:
 800a36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a370:	4605      	mov	r5, r0
 800a372:	b086      	sub	sp, #24
 800a374:	461e      	mov	r6, r3
 800a376:	460c      	mov	r4, r1
 800a378:	b1a1      	cbz	r1, 800a3a4 <_wcrtomb_r+0x38>
 800a37a:	4b10      	ldr	r3, [pc, #64]	; (800a3bc <_wcrtomb_r+0x50>)
 800a37c:	4617      	mov	r7, r2
 800a37e:	f8d3 8000 	ldr.w	r8, [r3]
 800a382:	f7fe fcd7 	bl	8008d34 <__locale_charset>
 800a386:	9600      	str	r6, [sp, #0]
 800a388:	4603      	mov	r3, r0
 800a38a:	4621      	mov	r1, r4
 800a38c:	463a      	mov	r2, r7
 800a38e:	4628      	mov	r0, r5
 800a390:	47c0      	blx	r8
 800a392:	1c43      	adds	r3, r0, #1
 800a394:	d103      	bne.n	800a39e <_wcrtomb_r+0x32>
 800a396:	2200      	movs	r2, #0
 800a398:	238a      	movs	r3, #138	; 0x8a
 800a39a:	6032      	str	r2, [r6, #0]
 800a39c:	602b      	str	r3, [r5, #0]
 800a39e:	b006      	add	sp, #24
 800a3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3a4:	4b05      	ldr	r3, [pc, #20]	; (800a3bc <_wcrtomb_r+0x50>)
 800a3a6:	681f      	ldr	r7, [r3, #0]
 800a3a8:	f7fe fcc4 	bl	8008d34 <__locale_charset>
 800a3ac:	9600      	str	r6, [sp, #0]
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	4622      	mov	r2, r4
 800a3b2:	4628      	mov	r0, r5
 800a3b4:	a903      	add	r1, sp, #12
 800a3b6:	47b8      	blx	r7
 800a3b8:	e7eb      	b.n	800a392 <_wcrtomb_r+0x26>
 800a3ba:	bf00      	nop
 800a3bc:	20000a38 	.word	0x20000a38

0800a3c0 <__ascii_wctomb>:
 800a3c0:	b121      	cbz	r1, 800a3cc <__ascii_wctomb+0xc>
 800a3c2:	2aff      	cmp	r2, #255	; 0xff
 800a3c4:	d804      	bhi.n	800a3d0 <__ascii_wctomb+0x10>
 800a3c6:	700a      	strb	r2, [r1, #0]
 800a3c8:	2001      	movs	r0, #1
 800a3ca:	4770      	bx	lr
 800a3cc:	4608      	mov	r0, r1
 800a3ce:	4770      	bx	lr
 800a3d0:	238a      	movs	r3, #138	; 0x8a
 800a3d2:	6003      	str	r3, [r0, #0]
 800a3d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3d8:	4770      	bx	lr
 800a3da:	bf00      	nop

0800a3dc <_init>:
 800a3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3de:	bf00      	nop
 800a3e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3e2:	bc08      	pop	{r3}
 800a3e4:	469e      	mov	lr, r3
 800a3e6:	4770      	bx	lr

0800a3e8 <_fini>:
 800a3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ea:	bf00      	nop
 800a3ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ee:	bc08      	pop	{r3}
 800a3f0:	469e      	mov	lr, r3
 800a3f2:	4770      	bx	lr
